{"pageProps":{"member":{"name":"sosukesuzuki","twitterId":"__sosukesuzuki","githubUsername":"sosukesuzuki","active":true},"posts":[{"slug":"ergonomic-brand-checks-for-private-fields","content":"<p>2021年7月に行われた TC39 ミーティングで <a href=\"https://github.com/tc39/proposal-private-fields-in-in\">Ergonomic brand checks for Private Fields</a> というプロポーザルが Stage 4 になりました。\nこのプロポーザルは、ES2022 に含まれる予定です。また、<a href=\"https://devblogs.microsoft.com/typescript/announcing-typescript-4-5-rc/#private-field-presence-checks\">TypeScript 4.5 にも含まれる予定です</a>。</p>\n<p>この記事では、Ergonomic brand checks for Private Fields について解説します。</p>\n<h2>概要</h2>\n<p>Ergonomic brand checks for Private Fields は、<code>in</code> 演算子を使ったプライベートフィールドの有無の判定を可能にするプロポーザルです。</p>\n<h3>現在の <code>in</code> 演算子</h3>\n<p><code>in</code> 演算子は、オブジェクトが特定の名前のプロパティを持っているかどうかを判定するための二項演算子です。\n左辺にプロパティの名前、右辺にオブジェクトを受け取ります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> prop1<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prop1\"</span> <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<h3>新しい <code>in</code> 演算子</h3>\n<p>Ergonomic brand checks for Private Fields では、この <code>in</code> 演算子を拡張し、左辺に Private Identifier を取れるようになります。</p>\n<p>Private Identifier は <code>#foo</code> のような形をした特別な識別子で、クラスのプライベートフィールドを表現するのに使われます。</p>\n<p>たとえば、次のコードではクラス <code>Foo</code> は、<code>#prop1</code> というプライベートフィールドを持ちます。\nこのとき <code>#prop1</code> は Private Identifier です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n  #prop1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>拡張された <code>in</code> 演算子では、次のようにしてオブジェクトにプライベートフィールドが含まれるかどうかをチェックできます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">#prop1 <span class=\"token keyword\">in</span> obj\n</code></pre></div>\n<p>しかし、プライベートフィールドはプライベートなので上記のコードはそのフィールドを持つクラスの中でのみ使うことができます。</p>\n<p>つまり、次のようにクラスの外でプライベートフィールドに対して <code>in</code> を使うとエラーになります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n  #prop1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>#prop1 <span class=\"token keyword\">in</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Uncaught SyntaxError: Private field '#prop1' must be declared in an enclosing class</span>\n</code></pre></div>\n<p>しかし、次のようなコードはエラーになりません。メソッド <code>foo</code> はクラス <code>Foo</code> の中にあるので、Private Identifier である <code>#foo</code> を <code>in</code> 演算子の左辺として使うことができます。\nそして、この <code>foo</code> の中で <code>this</code> は <code>Foo</code> のインスタンスであり、それには当然 <code>#prop1</code> というプライベートプロパティが存在するので、<code>#prop1 in this</code> の結果は <code>true</code> になります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n  #prop1<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> #prop1 <span class=\"token keyword\">in</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<h2>モチベーション</h2>\n<p>存在しないプライベートフィールドにアクセスすると、実行時エラーが発生します。</p>\n<p>その挙動と try / catch を組み合わせて、次のようにしてオブジェクトのクラスを判定できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n  #brand<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function\">isFoo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n      obj<span class=\"token punctuation\">.</span><span class=\"token property-access\">#brand</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>obj.#brand</code> にアクセスしたとき、<code>obj</code> が Foo のインスタンスでない場合、実行時エラーが発生し <code>catch</code> に入り <code>false</code> が返されます。\nこのようにして、あるオブジェクトが<code>Foo</code>のインスタンスであるかを検証するスタティックメソッドを作れます。</p>\n<p>ですが、このパターンは冗長です。<code>in</code> 演算子を使えばもっと短く書けます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n  #brand<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function\">isFoo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> #brand <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>これが、このプロポーザルの主なモチベーションです。</p>\n<p><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/instanceof\"><code>instanceof</code> 演算子</a>も基本的にはこの目的のために使えます。しかし <code>instanceof</code> 演算子はプロトタイプに依存するので、プロトタイプを書き換えることでその挙動を変更できます。</p>\n<p>次の例では、 <code>obj</code> は <code>Foo</code> のインスタンスではありませんが、後からプロトタイプを書き換えているので <code>obj instanceof Foo</code> は <code>true</code> になっています。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setPrototypeOf</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<p>なので、より安全にオブジェクトのもとになったクラスを検証したい場合は <code>in</code> 演算子を使うと良いでしょう。</p>\n<h2>参考リンク</h2>\n<ul>\n<li><a href=\"https://tc39.es/ecma262/#prod-RelationalExpression\">https://tc39.es/ecma262/#prod-RelationalExpression</a></li>\n<li><a href=\"https://tc39.es/ecma262/#prod-PrivateIdentifier\">https://tc39.es/ecma262/#prod-PrivateIdentifier</a></li>\n<li><a href=\"https://github.com/tc39/proposal-private-fields-in-in\">https://github.com/tc39/proposal-private-fields-in-in</a></li>\n<li><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/in\">https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/in</a></li>\n</ul>\n","metaData":{"title":"ES2022 と TypeScript 4.5 に入るプライベートフィールドのための in 演算子について","author":"sosukesuzuki","createdAt":"2021-11-11","summary":"ES2022 と TypeScript 4.5 に入る現在 Stage 4 の提案 Ergonomic brand checks for Private Fields についての解説です。","tags":["ECMAScript","TypeScript"],"updatedAt":"2021-11-11"}},{"slug":"tc39-meeting-2021-10","content":"<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">※ 旧タイトル: TC39 meeting 86th の概要とステージの移動</code></pre></div>\n<p>TC39 の 86 回目のミーティングが 10/25 ~ 10/28 に開催されました。\nこのミーティングで議題に上がった提案と、そのステージの移動について紹介します。</p>\n<ul>\n<li><a href=\"https://github.com/tc39/agendas/blob/master/2021/10.md\">agendas/10.md at master · tc39/agendas</a></li>\n<li><a href=\"https://github.com/babel/proposals/issues/77\">Oct 2021 · Issue #77 · babel/proposals</a></li>\n</ul>\n<h2>for Stage 4</h2>\n<h3><a href=\"https://github.com/tc39/proposal-error-cause\">Error Cause</a></h3>\n<p><strong>Stage 4 になりました。ECMAScript 2022 に入ります</strong></p>\n<p>Error Cause は、<code>Error</code> コンストラクタの第 2 引数に <code>cause</code> という値で原因となったエラーを渡すことができるようにする提案です。\nキャッチする側では、<code>error.cause</code> で、そのエラーを取得できます。</p>\n<p>例を示します。</p>\n<p><code>doUploadJob</code> 関数は <code>fetch</code> を実行して失敗したときに新しいエラーをスローします。そのエラーの第 2 引数に <code>{ cause: err }</code> というオブジェクトを渡しています。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">doUploadJob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://example.com/upload\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Upload job result failed\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> cause<span class=\"token operator\">:</span> err <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">doJob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Caused by\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span><span class=\"token property-access\">cause</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Error: Upload job result failed</span>\n<span class=\"token comment\">// Caused by TypeError: Failed to fetch</span>\n</code></pre></div>\n<p><code>doUploadJob</code> がスローしているエラーメッセージは <code>\"Upload job result failed\"</code> ですが、その原因となったエラーを <code>cause</code> として渡すことで、キャッチする側でどのエラーが原因で失敗したのかを取得できます。</p>\n<p>この例では、<code>doUploadJob</code> が失敗した原因が <code>TypeError: Failed to fetch</code> であったことがわかります。</p>\n<h2>for Stage 3</h2>\n<p>今回は、for Stage 3 の提案はありませんでした。</p>\n<h2>for Stage 2</h2>\n<h3><a href=\"https://github.com/tc39/proposal-array-grouping\">Array Grouping</a></h3>\n<p><strong>Stage 2 になりました</strong></p>\n<p>Array Grouping は、<code>Array</code> に <code>groupBy</code> というインスタンスメソッドを追加する提案です。</p>\n<p>ユースケースは<a href=\"https://lodash.com/docs/4.17.15#groupBy\">Lodash の <code>groupBy</code></a> と同様です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narray<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">groupBy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"even\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"odd\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// =>  { odd: [1, 3, 5], even: [2, 4] }</span>\n</code></pre></div>\n<h3><a href=\"https://github.com/tc39/proposal-partial-application\">Partial Application</a></h3>\n<p><strong>Stage 2 になりませんでした</strong></p>\n<p>Partial Application は、関数の部分適用のための構文を導入します。</p>\n<p>例を示します。</p>\n<p><code>add</code> は 2 つの引数を受け取り、その 2 つを足し合わせて返すだけの単純な関数です。\nそして、Partial Application を使って <code>addOne</code> という新しい関数を作っています。<code>addOne</code> は、1 つの引数を受け取り、それに<code>1</code>を足して返す関数です。\nつまり、既存の関数の一部の引数だけ渡して、残りの引数を受け取るような関数を作ることができます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> addOne <span class=\"token operator\">=</span> add<span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">addOne</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n</code></pre></div>\n<p>現在の JavaScript で表現すると、次のようになります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">y</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> addOne <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">addOne</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n</code></pre></div>\n<p>Haskell のような関数型プログラミング言語では標準で備わっている機能です。</p>\n<h2>for Stage 1</h2>\n<h3><a href=\"https://github.com/bathos/proposal-string-cooked\"><code>String.cooked</code></a></h3>\n<p><strong>Stage 1 になりました</strong></p>\n<p><code>String.cooked</code> は <code>String</code> に新しいスタティックメソッド <code>cooked</code> を追加する提案です。\n<code>String.cooked</code> は <a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/String/raw\"><code>String.raw</code></a> と逆のことをします。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">raw</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">mmm ... \\u0064elicious cooked string</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// mmm ... \\u0064elicious cooked string</span>\n<span class=\"token known-class-name class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">cooked</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">mmm ... \\u0064elicious cooked string</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// \"mmm ... delicious cooked string\"</span>\n</code></pre></div>\n<p>つまり、通常のテンプレートリテラルとおなじ挙動です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">mmm ... \\u0064elicious cooked string</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// \"mmm ... delicious cooked string\"</span>\n</code></pre></div>\n<p>この機能がタグ付きテンプレートリテラルとして存在することで、これを用いて新しいタグ付きテンプレートリテラルを作るときに役にたちます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">myTag</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">strings<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>values</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">cooked</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>values<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token arrow operator\">=></span> <span class=\"token known-class-name class-name\">String</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nmyTag<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token string\">'world'</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token comment\">// \"hello WORLD\"</span>\n</code></pre></div>\n<h3><a href=\"https://github.com/jridgewell/proposal-destructuring-private\">Destructure Private Fields</a></h3>\n<p><strong>Stage 1 を飛ばして、Stage 2 になりました</strong></p>\n<p>Destructure Private Fields は、プライベートフィールドの分割代入のための構文を導入します。</p>\n<p><code>#</code> からはじまる識別子は通常であれば存在できないので、別の名前にリネームする必要があります。次の例では <code>this.#x</code> を <code>x</code> という名前にリネームしています。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n  #x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">#x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 1</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> #x<span class=\"token operator\">:</span> x <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 1</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3><a href=\"https://github.com/js-choi/proposal-bind-this\">Bind-this operator</a></h3>\n<p><strong>Stage 1 になりました</strong></p>\n<p>Bind this operator は、<a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\">Function.prototype.bind</a> と同様の方法で関数をバインドするための二項演算子を導入する提案です。</p>\n<p>以前から存在する Stage 0 の <a href=\"https://github.com/tc39/proposal-bind-operator\">Bind Operator</a> の後継であり、Stage 1 の <a href=\"https://github.com/tc39/proposal-extensions\">Extensions</a> の競合です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">hasOwnProperty</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> foo<span class=\"token operator\">:</span> <span class=\"token string\">\"foo\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> foo<span class=\"token operator\">:</span> <span class=\"token string\">\"foo\"</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<h3><a href=\"https://github.com/js-choi/proposal-function-helpers\">Function helpers</a></h3>\n<p><strong>Stage 1 になりませんでした。この提案に含まれる関数は個別の提案として再度提出されるかもしれません。</strong></p>\n<p>Function helpers は、<code>Function</code> のスタティックメソッドとして便利なヘルパー関数を追加する提案です。</p>\n<p><code>Function.flow</code> は引数に与えられた関数を合成した新しい関数を返します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> f <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Function</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">flow</span><span class=\"token punctuation\">(</span>f0<span class=\"token punctuation\">,</span> f1<span class=\"token punctuation\">,</span> f2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// f2(f1(f0(5, 7))).</span>\n</code></pre></div>\n<p><code>Function.pipe</code> は第 1 引数の値を、それ移行の引数として渡された関数を合成した関数に渡した結果を返します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Function</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> f0<span class=\"token punctuation\">,</span> f1<span class=\"token punctuation\">,</span> f2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// f2(f1(f0(5))).</span>\n</code></pre></div>\n<p><code>Function.constant</code> は、第 1 引数として渡された値を返し続ける関数を返します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> f <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Function</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">constant</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fooo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">3009</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> foo<span class=\"token operator\">:</span> <span class=\"token string\">\"foo\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n</code></pre></div>\n<p><code>Function.identifiy</code> は、第 1 引数に与えられた値をそのまま返します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Function</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">identity</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n<span class=\"token known-class-name class-name\">Function</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">identity</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\n</code></pre></div>\n<p><code>Function.tap</code> はコールバック関数を引数として受け取り、関数を返します。\n<code>Function.tape</code> が返した関数に引数を渡すと、それをコールバック関数に渡して実行し、その上でその引数をそのまま返します。\n言葉で説明すると難しいですが、例を見れば簡単だと思います。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> f <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Function</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">tap</span><span class=\"token punctuation\">(</span><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">log</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5 を出力して、5 を返す</span>\n</code></pre></div>\n<h3><a href=\"https://github.com/lucacasonato/proposal-evaluator-attributes\">Evaluator Attributes</a></h3>\n<p><strong>Stage 1 になりました</strong></p>\n<p>Evaluator Attributes は、インポートされたモジュールの評価方法を処理系に伝えるための構文を導入します。</p>\n<p>例にある通り、提案された目的は WebAssembly のモジュールを JavaScript の Import 文で読み込むためです。しかし、提案の仕様としては WebAssembly には限られていません。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">mod</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./foo.wasm\"</span> <span class=\"token keyword module\">as</span> <span class=\"token string\">\"wasm-module\"</span><span class=\"token punctuation\">;</span>\nmod <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">WebAssembly<span class=\"token punctuation\">.</span>Module</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<p>現在 Stage 3 の <a href=\"https://github.com/tc39/proposal-import-assertions\">Import Assertions</a> に似ていますが、Import Assertions はモジュールの評価方法に影響を与えることはできません。</p>\n<h3>RegExp Features</h3>\n<p>前回のミーティングで提案された<a href=\"https://github.com/rbuckton/proposal-regexp-features\">RegExp Features</a>が機能ごとに別々の提案に分割されました。</p>\n<h4><a href=\"https://github.com/rbuckton/proposal-regexp-modifiers\">RegExp Modifiers</a></h4>\n<p><strong>Stage 1 になりました</strong></p>\n<h4><a href=\"https://github.com/rbuckton/proposal-regexp-x-mode\">RegExp Extended Mode and Comments</a></h4>\n<p><strong>Stage 1 になりました</strong></p>\n<h4><a href=\"https://github.com/rbuckton/proposal-regexp-atomic-operators\">RegExp Atomic Operators</a></h4>\n<p><strong>Stage 1 になりませんでした</strong></p>\n<h4><a href=\"https://github.com/rbuckton/proposal-regexp-r-escape\">RegExp <code>\\R</code> Escape</a></h4>\n<p><strong>Stage 1 になりました</strong></p>\n<h4><a href=\"https://github.com/rbuckton/proposal-regexp-buffer-boundaries\">RegExp Buffer Boundaries</a></h4>\n<p><strong>Stage 1 になりました</strong></p>\n<h3>Updates</h3>\n<p>ステージの移動はないものの、アップデートがあった提案です。</p>\n<ul>\n<li><a href=\"https://github.com/tc39/proposal-change-array-by-copy\">Change Array by Copy</a></li>\n<li><a href=\"https://github.com/tc39/proposal-json-parse-with-source\">JSON.parse sourct text access</a></li>\n<li><a href=\"https://github.com/tc39/proposal-record-tuple/\">Records &#x26; Tuples</a></li>\n<li><a href=\"https://github.com/tc39/proposal-explicit-resource-management\">Explicit Resource Management</a></li>\n<li><a href=\"https://github.com/tc39/proposal-js-module-blocks\">JS Module Blocks</a></li>\n<li><a href=\"https://github.com/js-choi/proposal-array-from-async\">Array.fromAsync</a></li>\n</ul>\n<h2>その他</h2>\n<p>提案ではなく、仕様書の変更として扱われているものです。</p>\n<h3><a href=\"https://github.com/tc39/ecma262/pull/1321\">Extending null</a></h3>\n<p><strong>合意は得られませんでした</strong></p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">null</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</code></pre></div>\n","metaData":{"title":"ECMAScriptの最新動向 2021年11月版","author":"sosukesuzuki","editor":"nakajmg","createdAt":"2021-11-02","summary":"2021年10月25日~28日に開催された TC39 meeting 86th の内容を紹介します","tags":["TC39","ECMAScript"],"updatedAt":"2021-11-02"}},{"slug":"first-post","content":"<p>こんにちは、サイボウズフロントエンドエキスパートチームの<a href=\"https://twitter.com/__sosukesuzuki\">@__sosukesuzuki</a>です。</p>\n<p>サイボウズには<a href=\"https://blog.cybozu.io/\">Cybozu Inside Out</a>という技術ブログがあります。\nそれとは別に、この度フロントエンドエキスパートチームとしてウェブサイトを開設することにしました。</p>\n<p>この記事では、このウェブサイトを開設することになった経緯と目的、使用した技術について説明します。</p>\n<h2>経緯</h2>\n<p>フロントエンドエキスパートチームでは、チームでのコミュニケーションの促進を主な目的としてハッカソンを開催することがあります。\n(チームでのハッカソンについては<a href=\"https://blog.cybozu.io/entry/2021/02/25/133039\">Cybozu Inside Out に投稿されている記事</a>をご覧ください)</p>\n<p>そのようなハッカソンで、フリーテーマの回がありました。\nそこで、<a href=\"https://twitter.com/__sakito__\">Sakito</a>さんと<a href=\"https://twitter.com/b4h0_c4t\">BaHo</a>さんと<a href=\"https://twitter.com/__sosukesuzuki\">sosukesuzuki</a>(私)のチームでは、フロントエンドエキスパートチームのウェブサイトを作ってみることにしました。</p>\n<p>ハッカソンの期間内に完成することはありませんでしたが、チームとしてウェブサイトを持っていた方が良いということで合意が得られたので、ハッカソン終了後も開発を継続することにしました。</p>\n<h2>目的</h2>\n<p>フロントエンドエキスパートチームの活動を多くの人に知ってもらうためです。</p>\n<p>フロントエンドエキスパートチームでは、日頃から様々なフロントエンド技術の啓蒙活動を行っています。\nそれらの多くはクローズドな場所で行われています。しかし基本的にその内容はサイボウズ特有のものではなく、一般的に有用な情報です。</p>\n<p>そこで、フロントエンドエキスパートチームとしてウェブサイトを開設し、公開できる有用な情報は公開することにしました。</p>\n<p>このウェブサイトを通して、フロントエンドエキスパートチームに興味を持ってくれたら嬉しいです。</p>\n<h2>技術</h2>\n<p>次の要件を満たす技術として、<a href=\"https://github.com/vercel/next.js\">Next.js</a> を採用しました。</p>\n<ul>\n<li>環境構築が簡単である\n<ul>\n<li>もともとハッカソンで開発していたので、環境構築に多くの時間を割けないという事情がありました。</li>\n</ul>\n</li>\n<li>SSG の機能を備えている\n<ul>\n<li>すべてのコンテンツは静的なものと決まっていたので、SSG ができると嬉しい</li>\n</ul>\n</li>\n<li>TypeScript との相性が良い</li>\n</ul>\n<p>記事は Markdown として管理して Next.js の <code>getStaticProps</code> のタイミングで <a href=\"https://github.com/remarkjs/remark\">remark</a> を使って HTML に変換しています。</p>\n<p>また、ブログの機能を持つので、feed の生成と記事ごとの OGP 画像の生成をのためのスクリプトをそれぞれ用意しました。feed 生成スクリプトは、記事データの Markdown からメタデータを取得し、XML ファイルを書き出します。\nOGP 画像生成スクリプトは、記事データの Markdown からタイトルを取得し、<a href=\"https://github.com/puppeteer/puppeteer\">Puppeteer</a> で画像を生成します。</p>\n<p>ホスティングには GitHub Pages を使っています。GitHub で管理している HTML をホストする先としてはやはり楽です。</p>\n<p>実装はすべて <a href=\"https://github.com/cybozu/frontend-expert\">https://github.com/cybozu/frontend-expert</a> で公開しています。</p>\n<h2>おわりに</h2>\n<p>これから、不定期ではありますが、当サイトにてフロントエンドに関連する情報を発信していく予定です。ぜひ読んでみてくださいね。</p>\n","metaData":{"title":"サイボウズフロントエンドエキスパートチームのウェブサイトを作りました","author":"sosukesuzuki","createdAt":"2021-10-14","summary":"このウェブサイトを開設することになった経緯と目的、使用した技術について説明します。","tags":["Announcement"],"updatedAt":"2021-10-14"}}]},"__N_SSG":true}
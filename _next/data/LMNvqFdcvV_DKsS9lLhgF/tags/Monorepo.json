{"pageProps":{"posts":[{"type":"markdown","href":"/posts/considerations-for-monorepo","slug":"considerations-for-monorepo","content":"<p>それっぽいタイトルを付けましたが特に意味はないです。</p>\n<p><a href=\"https://cybozu.github.io/frontend-expert/posts/turborepo\">workspace を使ったコマンドを最適化して実行する Turborepo について</a>のお話で Turborepo を軽く触ってみた際に<code>npx create-turbo@latest</code>で作られる構成がとてもわかりやすく、プロダクトの初期段階からモノレポを採用するのは選択肢の 1 つとしていいのでは、と思い続編を書きました。</p>\n<p>前回と同じくサンプルのリポジトリはこちらになります。<br>\n<a href=\"https://github.com/nus3/p-turborepo/tree/main/yarn\">https://github.com/nus3/p-turborepo/tree/main/yarn</a></p>\n<h2>概要</h2>\n<ul>\n<li>モノレポを採用することで、同一リポジトリ内で自作した汎用的なライブラリやコンポーネントを複数のアプリケーションで使いまわせる</li>\n<li>モノレポの規模が大きくなってきた場合には、モノレポ内のパッケージを npm に公開することでアプリケーションとパッケージを非同期に開発できる</li>\n<li>Yarn や npm の workspace はイイゾ！</li>\n</ul>\n<h2>モノレポとは</h2>\n<p>モノレポとは本記事では npm や Yarn の workspaces 機能を使い、1 つのリポジトリ内で複数の npm パッケージを管理している構成のこととします。</p>\n<h3>npm や Yarn の workspaces</h3>\n<p>npm や Yarn の workspaces は 1 つのリポジトリ内で複数の npm パッケージを管理するための機能です。</p>\n<ul>\n<li><a href=\"https://classic.yarnpkg.com/lang/en/docs/workspaces/\">Yarn(v1)</a></li>\n<li><a href=\"https://yarnpkg.com/features/workspaces\">Yarn(v2 以降)</a></li>\n<li><a href=\"https://docs.npmjs.com/cli/v8/using-npm/workspaces\">npm</a></li>\n</ul>\n<p>workspaces を使うにはリポジトリのルート直下にある<code>package.json</code>に<code>workspaces</code>を追加します。</p>\n<p>例えば<code>apps</code>配下にアプリケーションの npm パッケージを、<code>packages</code>配下に汎用的なコンポーネント、ライブラリなどの npm パッケージを入れる場合、次のようになります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"workspaces\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"apps/*\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"packages/*\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>apps</code> 配下にある<code>nus3-a</code>というアプリケーションから <code>packages</code> 配下にある<code>nus3-ui</code>という名前の npm パッケージを使う場合、それぞれ次のような<code>package.json</code>になります。</p>\n<p><code>apps/nus3-a</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nus3-a\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"nus3-ui\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"*\"</span>\n    <span class=\"token comment\">// Yarnのv2以降であれば`workspace:`構文が使えるようになる</span>\n    <span class=\"token comment\">// REF: (nus3) https://yarnpkg.com/features/workspaces#workspace-ranges-workspace</span>\n    <span class=\"token comment\">// \"nus3-ui\": \"workspace:*\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>packages/nus3-ui</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nus3-ui\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.0\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>workspaces 内にある npm パッケージの名前が npm に公開されているパッケージ名と同じ場合は、 workspace 内の npm パッケージが優先してインストールされます。後々 workspaces 内の npm パッケージを公開する可能性がある場合、パッケージ名は npm で公開されているパッケージ名と被らない名前にした方が良いかもしれません。</p>\n<p>workspace 内の npm パッケージを依存関係に追加すると node_modules にシンボリックリンクが作成されます。次の画像のように node_modules 配下に<code>nus3-ui</code>と<code>nus3-a</code>のシンボリックリンクが追加されていることが確認できます。</p>\n<p><img src=\"/frontend-expert/image/considerations-for-monorepo/symlink.png\" alt=\"node_modulesに作成されたシンボリックリンク\" width=\"340\" height=\"101\" ></p>\n<p>シンボリックリンクにより依存する npm パッケージのコードを直接参照するので、npm に公開しバージョン管理するまでは、version は<code>0.0.0</code>、かつ、使う側は<code>\"nus3-ui\": \"*\"</code>のようにワイルドカードを指定するとバージョンのことを意識せずに管理できます。</p>\n<h3>create-turbo で作られるモノレポ構成</h3>\n<p>create-turbo(<code>npx create-turbo@latest</code>) では作られるモノレポ構成に次のようなものが含まれます。</p>\n<ul>\n<li>npm に公開せずに config をモノレポ内の別パッケージに分けて、複数のパッケージから使用する</li>\n<li>React を使った汎用的なコンポーネント(tsx)を別パッケージに分けて アプリケーション(Next.js)で使用する</li>\n</ul>\n<p>それぞれ見ていきましょう。</p>\n<h4>npm に公開せずに config をモノレポ内の別パッケージに分けて、複数のパッケージから使用する</h4>\n<p>ESLint や Stylelint の config は npm に公開することで、異なるプロジェクトで共通の設定を使えます。サイボウズでは<a href=\"https://github.com/cybozu/eslint-config\">@cybozu/eslint-config</a>や<a href=\"https://github.com/cybozu/stylelint-config\">@cybozu/stylelint-config</a>として npm に公開しています。</p>\n<p>モノレポ内であれば ESLint や Stylelint の設定を npm に公開・管理せずに共有することもできます。</p>\n<p><code>packages/nus3-config</code><br>\nで共通の ESLint や TSConfig を定義して、<code>package.json</code> の<code>files</code> に指定します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nus3-config\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"files\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"eslint-preset.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"tsconfig.base.json\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"tsconfig.nextjs.json\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"tsconfig.react-library.json\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>apps/nus3-a</code>\nで<code>nus3-config</code>を追加し、<code>nus3-config</code>から TSConfig や ESLint のルールを適用します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nus3-a\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"eslint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"8.6.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"nus3-config\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"*\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>apps/nus3-a/tsconfig.json</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nus3-config/tsconfig.nextjs.json\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>apps/nus3-a/.eslintrc</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nus3-config/eslint-preset\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4>React を使った汎用的なコンポーネント(tsx)を別パッケージに分けて アプリケーション(Next.js)で使用する</h4>\n<p>create-turbo では汎用的な React コンポーネントを tsx ファイルのまま <code>packages</code> 配下の npm パッケージで管理し、Next.js の<a href=\"https://github.com/martpie/next-transpile-modules\">plugin</a>を使って アプリケーション 側でトランスパイルしています。</p>\n<p><code>packages/nus3-ui</code><br>\nで React(tsx)のコンポーネントを実装します。実装した tsx ファイルのパスをそのまま<code>main</code>と<code>types</code>に追加します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nus3-ui\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./index.tsx\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"types\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./index.tsx\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@types/react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"17.0.37\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@types/react-dom\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"17.0.11\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"typescript\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"4.5.4\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>packages/nus3-ui/index.tsx</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">VFC</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">Button</span><span class=\"token operator\">:</span> <span class=\"token function-variable function\">VFC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">ボタン</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>apps/nus3-a</code><br>\n<code>nus3-ui</code>の tsx ファイルを<code>nus3-a</code>で<code>next-transpile-modules</code>を使ってトランスパイルします。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nus3-a\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"next-transpile-modules\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"9.0.0\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>apps/nus3-a/next.config.js</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> withTM <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"next-transpile-modules\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"nus3-ui\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token function\">withTM</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h2>フロントエンドのモノレポ戦略</h2>\n<p>筆者のこれまでの経験では、創業して間もない会社やプロダクトの初期フェーズで、複数のアプリケーションの開発が並列して始まることが多くありました。そういった状況では、モノレポを採用しておくと複数のアプリケーションで共通したコンポーネントやライブラリを少ないコストで使用できます。</p>\n<p>また、モノレポ内で共通して使っているパッケージに変更を加える際に、その影響範囲が把握できないくらいモノレポの規模が大きくなった場合には、パッケージを npm に公開してバージョン管理することで、バージョンの変更タイミングを各々のアプリケーションに任せることができ、アプリケーションとパッケージの開発を非同期に行うことができます。</p>\n<p>このように、初期段階では汎用的な npm パッケージをアセットとして複数のアプリケーションに提供することで開発スピードを上げられ、また、規模が大きくなってきた場合はパッケージを npm に公開するといった方針をとることもできます。</p>\n<p>もちろん、1 つのリポジトリですべてのパッケージを管理することやコードベースが大きく複雑になることなどデメリットもあり、モノレポを採用することが適切ではない場合もあります。メリット・デメリットを踏まえつつ、フロントエンドの技術選定の中にモノレポの採用を選択肢の 1 つとして入れてもいいかもしれません。</p>\n","metaData":{"title":"フロントエンドのモノレポ構成はスケーリングの夢を見るか","author":"nus3","editor":["nakajmg"],"createdAt":"2022-01-31","summary":"Turborepoのstarterでできるモノレポ構成からスケーリングするフロントエンドの構成について考える","tags":["Monorepo","Turborepo"],"updatedAt":"2022-01-31"}},{"type":"markdown","href":"/posts/turborepo","slug":"turborepo","content":"<p>今年からフロントエンドエキスパートチームでは活動内容の一つである<strong>探求</strong>の一環として、メンバーが気になった技術に対して、気軽に触ってみる会をしています。次の画像は筆者が Slack で、気軽に触ってみる会の開催を宣言してる時のものです。</p>\n<p><img src=\"/frontend-expert/image/turborepo/slack.png\" alt=\"slackで気軽に触ってみる会を宣言してる\" width=\"718\" height=\"152.15061295971978\" ></p>\n<p>今回は<a href=\"https://vercel.com/blog/vercel-acquires-turborepo\">去年の 12 月に Vercel に買収されたニュース</a>があった Turborepo を気軽に触ってみました。\n個人的には 1 人で調べるときよりも複数人でわいわい調べた方が、その技術や関連する周辺知識の話を色んな人の観点で深掘ってできて、とても有意義な時間でした。</p>\n<h2>概要</h2>\n<p>Turborepo はモノレポのためのビルドシステムで次のような特徴があります。</p>\n<ul>\n<li>Yarn, npm, pnpm の workspaces に対応してるリポジトリに対して簡単に導入できる</li>\n<li>workspace 内のコマンドの依存関係をシンプルに設定してくれる</li>\n<li>Turborepo で実行するコマンドがない package はスルーしてくれる(npm workspace の<code>--if-present</code>に相当)</li>\n<li>ローカルキャッシュ、リモートキャッシュを生成・利用できる</li>\n</ul>\n<h3>サンプルで作ったモノレポ構成</h3>\n<p>今回は Yarn v1 の workspace を使ってます。<br>\n<a href=\"https://github.com/nus3/p-turborepo/tree/main/yarn\">https://github.com/nus3/p-turborepo/tree/main/yarn</a></p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">├── apps\n│   └── nus3-a: Next.js\n└── packages:\n    ├── nus3-button2: Reactのコンポーネント + ViteのLibrary Modeでビルド\n    ├── nus3-config: tsconfig + eslintのconfig\n    └── nus3-ui: Reactのコンポーネント(ビルドせずに使う)</code></pre></div>\n<p>サンプルで作ったモノレポ内の package たちは次のような依存関係になっています。<br>\n(色々試してたので適当な命名になってます。すんません)</p>\n<ul>\n<li><code>nus3-a</code>は<code>nus3-ui</code>と<code>nus3-button2</code>に依存している</li>\n<li><code>nus3-ui</code>は<code>nus3-button2</code>に依存している</li>\n</ul>\n<p><img src=\"/frontend-expert/image/turborepo/dependencies.png\" alt=\"サンプルリポジトリの依存関係\" width=\"577\" height=\"314\" ></p>\n<h3>使い方</h3>\n<ol>\n<li>使っているパッケージマネージャーで(Yarn, npm, pnpm)で workspace の設定</li>\n<li><code>turbo</code>のインストール</li>\n<li>package.json に<code>pipeline</code>の設定</li>\n</ol>\n<h4>1. 使っているパッケージマネージャーで(Yarn, npm, pnpm)で workspace の設定</h4>\n<p>workspace の設定については割愛します。各パッケージマネージャーのドキュメントをご覧ください。</p>\n<ul>\n<li><a href=\"https://classic.yarnpkg.com/lang/en/docs/workspaces/\">Yarn</a></li>\n<li><a href=\"https://docs.npmjs.com/cli/v8/using-npm/workspaces\">npm</a></li>\n<li><a href=\"https://pnpm.io/workspaces\">pnpm</a></li>\n</ul>\n<h4>2. <code>turbo</code>のインストール</h4>\n<p><code>yarn add turbo -W --dev</code>で Turborepo を追加します。</p>\n<h4>3. package.json に<code>pipeline</code>の設定</h4>\n<p><code>package.json</code>に<code>turbo.pipeline</code>を追加し、そこで<code>turbo run {command}</code>で実行する command の依存関係やキャッシュの設定をします。この<code>pipeline</code>で定義した command しか<code>turbo run {command}</code>では実行できません。</p>\n<p>実際に定義したものが次の json になります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"turbo\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"pipeline\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"dependsOn\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"^build\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"outputs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"dist/**\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".next/**\"</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"dependsOn\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"build\"</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"deploy\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"dependsOn\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"build\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lint\"</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>dependsOn</code>で依存関係を、<code>outputs</code>でキャッシュするものを指定します。</p>\n<p>定義したコマンドを一つずつ見ていきましょう。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"dependsOn\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"^build\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n</code></pre></div>\n<p>dependOn に<code>^</code>を追加したコマンド(<code>^build</code>)を指定することで workspace 内の各 package の指定したコマンド(<code>build</code>)を package 間の依存関係を考慮した順番で実行してくれます。</p>\n<p>実際に実行してみると、サンプルで作った各 package の依存関係を考慮した順番(<code>@nus3/example-button2</code> → <code>nus3-ui</code> → <code>nus3-a</code>)でビルドされていることがわかります。<br>\n(※今回サンプルで作った構成では<code>nus3-ui</code>はビルドの必要がないですが、依存関係を考慮した順番を表すのにあえて build コマンドを追加しています)</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">$ turbo run build\n• Packages in scope: @nus3/example-button2, nus3-a, nus3-config, nus3-ui\n• Running build in 4 packages\n@nus3/example-button2:build: cache miss, executing a161062b16a0be35\n@nus3/example-button2:build: $ vite build &#x26;amp;&#x26;amp; tsc -p ./tsconfig.build.json\n...\n@nus3/example-button2:build: dist/nus3-example-button2.es.js   3.30 KiB / gzip: 1.39 KiB\nnus3-ui:build: cache miss, executing b32d4fb848c8658f\nnus3-ui:build: $ echo &#x26;#39;build nus3-ui&#x26;#39;\n...\nnus3-a:build: cache miss, executing a80d8842624981a8\nnus3-a:build: $ next build\n...\n\n Tasks:    3 successful, 3 total\nCached:    0 cached, 3 total\n  Time:    5.702s</code></pre></div>\n<p>次の<code>outputs</code>はコマンドを実行した際に、<code>dist</code>と<code>.next</code>配下にあるファイル群をキャッシュする設定です。<code>node_modules/.cache/turbo</code>にキャッシュしたファイルが出力されます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"outputs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"dist/**\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".next/**\"</span><span class=\"token punctuation\">]</span>\n</code></pre></div>\n<p>先程の build コマンドをもう一度実行すると cache が使われ、前回より早く実行されているのがわかります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">$ turbo run build\n• Packages in scope: @nus3/example-button2, nus3-a, nus3-config, nus3-ui\n• Running build in 4 packages\n@nus3/example-button2:build: cache hit, replaying output a161062b16a0be35\n...\nnus3-ui:build: cache hit, replaying output b32d4fb848c8658f\n...\nnus3-a:build: cache hit, replaying output a80d8842624981a8\n...\n\n Tasks:    3 successful, 3 total\nCached:    3 cached, 3 total\n  Time:    221ms &#x26;gt;&#x26;gt;&#x26;gt; FULL TURBO\n\n✨  Done in 0.57s.\n</code></pre></div>\n<p>次のように何も指定しない場合、依存関係がないものとして認識され並列に実行されます</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre></div>\n<p>次の deploy コマンドの<code>dependsOn</code>では pipeline で定義した<code>build</code>, <code>test</code>, <code>lint</code>(順不同)を実行し、終了した時点で workspace 内の各 package の<code>deploy</code>コマンドを実行します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"deploy\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"dependsOn\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"build\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lint\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre></div>\n<p>今回定義したものの場合、Turborepo は次のようなことを考慮しながら各々の package のコマンドを実行します。</p>\n<ul>\n<li><code>build</code>: モノレポ内の各 package の依存関係を考慮しつつ build</li>\n<li><code>test</code>: <code>pipeline</code>で定義した<code>build</code>が実行された後に実行</li>\n<li><code>lint</code>: 他のコマンドの順番を気にせず、並列で実行</li>\n</ul>\n<p>deploy コマンドを実行した結果が次になります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">$ turbo run deploy\n• Packages in scope: @nus3/example-button2, nus3-a, nus3-config, nus3-ui\n• Running deploy in 4 packages\nnus3-a:lint: $ next lint\n@nus3/example-button2:build: $ vite build &#x26;amp;amp;&#x26;amp;amp; tsc -p ./tsconfig.build.json\n...\nnus3-ui:build: $ echo &#x26;#39;build nus3-ui&#x26;#39;\n...\nnus3-a:build: $ next build\n...\nnus3-a:test: $ echo &#x26;#39;test nus3-a&#x26;#39;\n...\nnus3-a:deploy: $ echo &#x26;#39;deploy nus3-a&#x26;#39;</code></pre></div>\n<p>実際に上記を考慮しつつ各 package のコマンドが実行された後に、最後に deploy コマンドが実行されているのがわかると思います。</p>\n<p>また、今回はローカルキャッシュの話のみでしたが、Turborepo には<a href=\"https://turborepo.org/docs/features/remote-caching#vercel\">Vercel</a>や<a href=\"https://turborepo.org/docs/features/remote-caching#custom-remote-caches\">独自</a>にキャッシュを配置することで、同じハッシュのキャッシュがあった場合にそのキャッシュを使ってくれる<strong>リモートキャッシュ</strong>といった機能も Beta で用意されています。</p>\n<p>今のプロジェクトが Yarn や npm の workspace を使っているのであれば、Turborepo を試しに入れてみてもいいかもしれません。</p>\n","metaData":{"title":"workspaceを使ったコマンドを最適化して実行するTurborepoについて","author":"nus3","createdAt":"2022-01-17","summary":"Turborepoの機能について","tags":["Turborepo","Monorepo"],"updatedAt":"2022-01-17"}}],"tag":"Monorepo"},"__N_SSG":true}
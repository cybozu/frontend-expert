{"pageProps":{"post":{"type":"markdown","href":"/posts/release-chrome-101","slug":"release-chrome-101","content":"<h1>Chrome101</h1>\n<p>Chrome 101 のリリースノート関連の情報をまとめました。</p>\n<p><a href=\"https://developer.chrome.com/blog/new-in-chrome-101/\">https://developer.chrome.com/blog/new-in-chrome-101/</a>\n<a href=\"https://developer.chrome.com/blog/new-in-devtools-101/\">https://developer.chrome.com/blog/new-in-devtools-101/</a>\n<a href=\"https://developer.chrome.com/blog/deps-rems-101/\">https://developer.chrome.com/blog/deps-rems-101/</a>\n<a href=\"https://www.chromestatus.com/features#milestone%3D101\">https://www.chromestatus.com/features#milestone%3D101</a></p>\n<h2>New In Chrome (Chrome 101)</h2>\n<p>Chrome101 で新しく追加された機能です。</p>\n<h3><code>hwb()</code> color notation</h3>\n<p>CSSの色指定方法として<code>hwb()</code>値がサポートされました。</p>\n<p>hwb() は、色相、白色度、黒色度にしたがって色を指定します。他の色表記と同様に、オプションのアルファ成分で不透明度を指定することもできます。以下の例では<code>#00c3ff</code>の色を50%透過度で指定しています。</p>\n<div class=\"remark-highlight\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">h1</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">hwb</span><span class=\"token punctuation\">(</span><span class=\"token number\">194</span> <span class=\"token number\">0</span><span class=\"token unit\">%</span> <span class=\"token number\">0</span><span class=\"token unit\">%</span> <span class=\"token operator\">/</span> <span class=\"token number\">.5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">/* #00c3ff with 50% opacity */</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>FireFoxではv96から、Safariではv15からこの<code>hwb()</code>値をサポートしているため、今回のChromeのサポートにより、多くのブラウザでこの記法が使えることになります。</p>\n<h3>Priority Hints</h3>\n<p>ブラウザがページ内リソース(<code>image</code>,<code>script</code>,<code>CSS</code>)を読み込む際の優先度ヒントを明示的に宣言できる<code>Priority Hints</code>機能がリリースされました。</p>\n<p>htmlで読み込みの優先度ヒントを書く場合は、<code>fetchpriority</code>属性に<code>high</code>,<code>low</code>,<code>auto</code>のいずれかを指定します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&#x3C;!-- 優先度 low で画像を読み込む場合 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/images/in_viewport_but_not_important.svg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">fetchpriority</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>low<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>I<span class=\"token punctuation\">'</span>m an unimportant image!<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<p>この機能はChrome96からOriginTrialとして試験的に実装されており、当時は<code>importance</code>属性を用いる方法をとっていましたが、Web標準化プロセスの中で、HTMLでは<code>fetchpriority</code>、JavaScriptのFetch APIでは<code>priority</code>というプロパティを利用するよう仕様が変更されました。</p>\n<p>優先度指定における細かい挙動やユースケースについては<a href=\"https://web.dev/priority-hints/\">Optimize resource loading with Priority Hints</a>を参照してください。</p>\n<h3>Also in this release</h3>\n<h4>USBDevice forget()</h4>\n<p><code>USBDevice</code>オブジェクトで<code>forgot()</code>メソッドがサポートされました。このメソッドでは以前許可されていたデバイスの登録を削除することができます。例えば多くのデバイスで共有されているコンピューターで使用されているアプリケーションなどでは有用です。</p>\n<h4>Web USB sameObject behavior</h4>\n<p><code>USBConfiguration</code>、<code>USBInterface</code>、<code>USBAlternateInterface</code>、<code>USBEndpoint</code> の4つのインスタンスが厳密な同値（<code>===</code>）なるのは、同じ<code>USBDevice</code>のアクセッサから取得した場合のみに変更されます。</p>\n<h4>Secure context fix for dedicated workers</h4>\n<p>全な(HTTPSの)Originからロードされていますが、安全でない(HTTPSでない)コンテキストでインスタンス化された専用ワーカーは安全だとはみなされなくなりました。</p>\n<p>具体的に上記のような状況において、以下のような変更が入ります</p>\n<ul>\n<li><code>self.isSecureContext</code>が<code>false</code>を返すようになる</li>\n<li><code>self.caches</code> と <code>self.storageFoundation</code> が使用できなくなる</li>\n</ul>\n<p>この修正により、上記のようなワーカーの挙動においてHTML標準やGeckoと互換性を持つようになりました。</p>\n<h4>Make 'true' a truthy value for window.open boolean features</h4>\n<p>chrome98から、<code>window.open()</code>に対し<code>popup=yes</code>または<code>popup=1</code>のように指定することで、ポップアップウィンドウで開くことをブラウザに要求することが出来るようになりました。</p>\n<p>このpopup値として<code>yes</code>,<code>1</code>などがサポートされていたものの、<code>true/false</code>がサポートされていなかったため、<code>popup=true</code>はpopupを開かないことを意味していました。</p>\n<p>このように<code>popup=true</code>がfalseとして評価されるのは直感に反しているため、Chrome101からは<code>popup=true</code>がtrueとして評価されるようになります。</p>\n<h2>What's New In DevTools (Chrome 101)</h2>\n<p>DevTools についてはこちらの日本語訳を参照ください。</p>\n<p><a href=\"https://developer.chrome.com/ja/blog/new-in-devtools-101/\">https://developer.chrome.com/ja/blog/new-in-devtools-101/</a></p>\n<h2>Deprecations and removals in Chrome 101</h2>\n<h3>Reduce user agent string information</h3>\n<p>ChromeではHTTPリクエストやnavigatorで利用されるUser-Agent文字列の削減に取り組んでいます。この取り組みはUser-Agent文字列がユーザーフィンガープリンティング(webブラウザからの情報だけで個人の情報を特定する技術)に利用されるのを防ぐために行われています。現在はOriginTrialとしてこれらの取り組みを進めています。</p>\n<h3>Remove WebSQL in third-party contexts</h3>\n<p>サードパーティーのコンテキストにおけるWebSQL機能を削除しました。Web SQL Database標準は2009年4月に提案され、2010年11月に放棄された標準で、FireFoxはこの機能を搭載せず、Safariも2019年から非推奨としています。またW3Cは代替手段として、Web StorageとIndexed Databaseを推奨しています。Chromeとしても使用率が十分に低くなった時点で完全に非推奨とし、削除する予定です。</p>\n<h2>その他 Chrome Platform Status に記載されていたもの</h2>\n<h3>MediaCapabilities API for WebRTC</h3>\n<p><code>MediaCapabilities API</code>でWebRTCストリームをサポートするようになりました。</p>\n<p><code>MediaCapabilities API</code>は、動画再生に使用できるコーデックや解像度などの情報を提供するAPIです。これらの情報によりwebアプリケーションは使用するコーデクなどがサポートされているかどうか、スムーズな再生が期待できるかどうかを判断できるようになります。</p>\n<p>今回のリリースからWebRTCストリームについての情報もこの<code>MediaCapabilities API</code>から取得できるようになります。この機能がない場合、アプリケーションが不必要に低い解像度やフレームレートを使用して品質が低下したり、クライアントが希望するフレームレートでストリームを処理できずスタッタリングが発生したりする可能性があります。</p>\n<h3>font-palette and custom @font-palette-values palettes</h3>\n<p>カラーフォントで利用するパレットを選択することができる、<code>font-palette</code> CSSプロパティがサポートされました。</p>\n<p>また<code>@font-palette-values</code>ルールを利用することで、ベースとなるカラーパレットを選択したり、カラーパレットの上書きなどができるようになります。</p>\n<p>ベースとなるカラーパレットを選択する例</p>\n<div class=\"remark-highlight\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@font-palette-values</span> <span class=\"token variable\">--Pinks</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> MultiColorFont<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">base-palette</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* パレットを番号で指定 */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\"><span class=\"token class\">.text-pink</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-palette</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">--Pinks</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* @font-palette-valuesで作成したパレットを指定 */</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>カラーパレットを上書きする例</p>\n<div class=\"remark-highlight\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@font-palette-values</span> <span class=\"token variable\">--SkyAndYellow</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> MultiColorFont<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">override-colors</span><span class=\"token punctuation\">:</span>　\n    <span class=\"token number\">0</span> <span class=\"token hexcode color\">#87dbe8</span><span class=\"token punctuation\">,</span> \n    <span class=\"token number\">1</span> <span class=\"token hexcode color\">#f7ca25</span><span class=\"token punctuation\">;</span>　<span class=\"token comment\">/* 対応する番号のカラーを上書き */</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>このように<code>font-palette</code> CSSプロパティのサポートは、すでにサポートしているCOLR/CPALカラーフォントの有用性を向上するものです。ダークモード対応をはじめとして、アイコンフォントをコンテンツの配色に合わせたいユースケースでこの機能はとても有用です。</p>\n","metaData":{"title":"Chrome 101 リリースノートまとめ","author":"Saji","editor":"nus3","createdAt":"2022-05-16","summary":"Chrome 101 のリリースノートの要約です","tags":["Releasenote","Browser"],"updatedAt":"2022-05-16"}}},"__N_SSG":true}
{"pageProps":{"posts":[{"slug":"considerations-for-monorepo","content":"<p>それっぽいタイトルを付けましたが特に意味はないです。</p>\n<p><a href=\"https://cybozu.github.io/frontend-expert/posts/turborepo\">workspace を使ったコマンドを最適化して実行する Turborepo について</a>のお話で Turborepo を軽く触ってみた際に<code>npx create-turbo@latest</code>で作られる構成がとてもわかりやすく、プロダクトの初期段階からモノレポを採用するのは選択肢の 1 つとしていいのでは、と思い続編を書きました。</p>\n<p>前回と同じくサンプルのリポジトリはこちらになります。<br>\n<a href=\"https://github.com/nus3/p-turborepo/tree/main/yarn\">https://github.com/nus3/p-turborepo/tree/main/yarn</a></p>\n<h2>概要</h2>\n<ul>\n<li>モノレポを採用することで、同一リポジトリ内で自作した汎用的なライブラリやコンポーネントを複数のアプリケーションで使いまわせる</li>\n<li>モノレポの規模が大きくなってきた場合には、モノレポ内のパッケージを npm に公開することでアプリケーションとパッケージを非同期に開発できる</li>\n<li>Yarn や npm の workspace はイイゾ！</li>\n</ul>\n<h2>モノレポとは</h2>\n<p>モノレポとは本記事では npm や Yarn の workspaces 機能を使い、1 つのリポジトリ内で複数の npm パッケージを管理している構成のこととします。</p>\n<h3>npm や Yarn の workspaces</h3>\n<p>npm や Yarn の workspaces は 1 つのリポジトリ内で複数の npm パッケージを管理するための機能です。</p>\n<ul>\n<li><a href=\"https://classic.yarnpkg.com/lang/en/docs/workspaces/\">Yarn(v1)</a></li>\n<li><a href=\"https://yarnpkg.com/features/workspaces\">Yarn(v2 以降)</a></li>\n<li><a href=\"https://docs.npmjs.com/cli/v8/using-npm/workspaces\">npm</a></li>\n</ul>\n<p>workspaces を使うにはリポジトリのルート直下にある<code>package.json</code>に<code>workspaces</code>を追加します。</p>\n<p>例えば<code>apps</code>配下にアプリケーションの npm パッケージを、<code>packages</code>配下に汎用的なコンポーネント、ライブラリなどの npm パッケージを入れる場合、次のようになります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"workspaces\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"apps/*\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"packages/*\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>apps</code> 配下にある<code>nus3-a</code>というアプリケーションから <code>packages</code> 配下にある<code>nus3-ui</code>という名前の npm パッケージを使う場合、それぞれ次のような<code>package.json</code>になります。</p>\n<p><code>apps/nus3-a</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nus3-a\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"nus3-ui\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"*\"</span>\n    <span class=\"token comment\">// Yarnのv2以降であれば`workspace:`構文が使えるようになる</span>\n    <span class=\"token comment\">// REF: (nus3) https://yarnpkg.com/features/workspaces#workspace-ranges-workspace</span>\n    <span class=\"token comment\">// \"nus3-ui\": \"workspace:*\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>packages/nus3-ui</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nus3-ui\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.0\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>workspaces 内にある npm パッケージの名前が npm に公開されているパッケージ名と同じ場合は、 workspace 内の npm パッケージが優先してインストールされます。後々 workspaces 内の npm パッケージを公開する可能性がある場合、パッケージ名は npm で公開されているパッケージ名と被らない名前にした方が良いかもしれません。</p>\n<p>workspace 内の npm パッケージを依存関係に追加すると node_modules にシンボリックリンクが作成されます。次の画像のように node_modules 配下に<code>nus3-ui</code>と<code>nus3-a</code>のシンボリックリンクが追加されていることが確認できます。</p>\n<p><img src=\"/frontend-expert/image/considerations-for-monorepo/symlink.png\" alt=\"node_modulesに作成されたシンボリックリンク\" width=\"340\" height=\"101\" ></p>\n<p>シンボリックリンクにより依存する npm パッケージのコードを直接参照するので、npm に公開しバージョン管理するまでは、version は<code>0.0.0</code>、かつ、使う側は<code>\"nus3-ui\": \"*\"</code>のようにワイルドカードを指定するとバージョンのことを意識せずに管理できます。</p>\n<h3>create-turbo で作られるモノレポ構成</h3>\n<p>create-turbo(<code>npx create-turbo@latest</code>) では作られるモノレポ構成に次のようなものが含まれます。</p>\n<ul>\n<li>npm に公開せずに config をモノレポ内の別パッケージに分けて、複数のパッケージから使用する</li>\n<li>React を使った汎用的なコンポーネント(tsx)を別パッケージに分けて アプリケーション(Next.js)で使用する</li>\n</ul>\n<p>それぞれ見ていきましょう。</p>\n<h4>npm に公開せずに config をモノレポ内の別パッケージに分けて、複数のパッケージから使用する</h4>\n<p>ESLint や Stylelint の config は npm に公開することで、異なるプロジェクトで共通の設定を使えます。サイボウズでは<a href=\"https://github.com/cybozu/eslint-config\">@cybozu/eslint-config</a>や<a href=\"https://github.com/cybozu/stylelint-config\">@cybozu/stylelint-config</a>として npm に公開しています。</p>\n<p>モノレポ内であれば ESLint や Stylelint の設定を npm に公開・管理せずに共有することもできます。</p>\n<p><code>packages/nus3-config</code><br>\nで共通の ESLint や TSConfig を定義して、<code>package.json</code> の<code>files</code> に指定します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nus3-config\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"files\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"eslint-preset.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"tsconfig.base.json\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"tsconfig.nextjs.json\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"tsconfig.react-library.json\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>apps/nus3-a</code>\nで<code>nus3-config</code>を追加し、<code>nus3-config</code>から TSConfig や ESLint のルールを適用します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nus3-a\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"eslint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"8.6.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"nus3-config\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"*\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>apps/nus3-a/tsconfig.json</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nus3-config/tsconfig.nextjs.json\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>apps/nus3-a/.eslintrc</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nus3-config/eslint-preset\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4>React を使った汎用的なコンポーネント(tsx)を別パッケージに分けて アプリケーション(Next.js)で使用する</h4>\n<p>create-turbo では汎用的な React コンポーネントを tsx ファイルのまま <code>packages</code> 配下の npm パッケージで管理し、Next.js の<a href=\"https://github.com/martpie/next-transpile-modules\">plugin</a>を使って アプリケーション 側でトランスパイルしています。</p>\n<p><code>packages/nus3-ui</code><br>\nで React(tsx)のコンポーネントを実装します。実装した tsx ファイルのパスをそのまま<code>main</code>と<code>types</code>に追加します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nus3-ui\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./index.tsx\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"types\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./index.tsx\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@types/react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"17.0.37\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@types/react-dom\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"17.0.11\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"typescript\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"4.5.4\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>packages/nus3-ui/index.tsx</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">VFC</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">Button</span><span class=\"token operator\">:</span> <span class=\"token function-variable function\">VFC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">ボタン</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>apps/nus3-a</code><br>\n<code>nus3-ui</code>の tsx ファイルを<code>nus3-a</code>で<code>next-transpile-modules</code>を使ってトランスパイルします。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nus3-a\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"next-transpile-modules\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"9.0.0\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>apps/nus3-a/next.config.js</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> withTM <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"next-transpile-modules\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"nus3-ui\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token function\">withTM</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h2>フロントエンドのモノレポ戦略</h2>\n<p>筆者のこれまでの経験では、創業して間もない会社やプロダクトの初期フェーズで、複数のアプリケーションの開発が並列して始まることが多くありました。そういった状況では、モノレポを採用しておくと複数のアプリケーションで共通したコンポーネントやライブラリを少ないコストで使用できます。</p>\n<p>また、モノレポ内で共通して使っているパッケージに変更を加える際に、その影響範囲が把握できないくらいモノレポの規模が大きくなった場合には、パッケージを npm に公開してバージョン管理することで、バージョンの変更タイミングを各々のアプリケーションに任せることができ、アプリケーションとパッケージの開発を非同期に行うことができます。</p>\n<p>このように、初期段階では汎用的な npm パッケージをアセットとして複数のアプリケーションに提供することで開発スピードを上げられ、また、規模が大きくなってきた場合はパッケージを npm に公開するといった方針をとることもできます。</p>\n<p>もちろん、1 つのリポジトリですべてのパッケージを管理することやコードベースが大きく複雑になることなどデメリットもあり、モノレポを採用することが適切ではない場合もあります。メリット・デメリットを踏まえつつ、フロントエンドの技術選定の中にモノレポの採用を選択肢の 1 つとして入れてもいいかもしれません。</p>\n","metaData":{"title":"フロントエンドのモノレポ構成はスケーリングの夢を見るか","author":"nus3","editor":["nakajmg"],"createdAt":"2022-01-31","summary":"Turborepoのstarterでできるモノレポ構成からスケーリングするフロントエンドの構成について考える","tags":["Monorepo","Turborepo"],"updatedAt":"2022-01-31"}},{"slug":"tc39-meeting-2021-12","content":"<p>TC39 の 87 回目のミーティングが 12月14日 ~ 12月15日に開催されました。このミーティングで議題に上がった提案とそのステージの移動について紹介します。</p>\n<h2>For Stage 4</h2>\n<p><strong>For Stage 4 の提案はありませんでした</strong></p>\n<h2>For Stage 3</h2>\n<h3><a href=\"https://github.com/tc39/proposal-array-grouping\">Array Grouping</a></h3>\n<p><strong>Stage 3 になりました</strong></p>\n<p>Array Grouping は <code>Array.prototype.groupBy</code> と <code>Array.prototype.groupByToMap</code> を追加するプロポーザルです。</p>\n<p>2021 年 10 月のミーティングで Stage 2 になったばかりですが、今回のミーティングで Stage 3 になりました。</p>\n<p>また、今回から <code>Array.prototype.groupByToMap</code> が追加されています。</p>\n<p>これは <code>groupBy</code> の結果が <code>Map</code> になったものです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> odd  <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> odd<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> even <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> even<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">groupByToMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> num <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> even<span class=\"token operator\">:</span> odd<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Map { {odd: true}: [1, 3, 5], {even: true}: [2, 4] }</span>\n</code></pre></div>\n<h2>For Stage 2</h2>\n<h3><a href=\"https://github.com/tc39/proposal-array-from-async/\">Array.fromAsync</a></h3>\n<p><strong>Stage 2 になりました</strong></p>\n<p><code>Array.fromAsync</code> は非同期イテラブルから配列を生成するためのスタティックメソッドを追加するプロポーザルです。</p>\n<p>JavaScript では <code>Array.from</code> を使ってイテラブルから配列を生成できます。しかし、非同期イテラブルから配列を生成することはできません。</p>\n<p>このプロポーザルによって追加される <code>Array.fromAsync</code> メソッドを使うと次のようにして非同期イテラブルから配列を生成できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token operator\">*</span> <span class=\"token function\">asyncGen</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword control-flow\">yield</span> i <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fromAsync</span><span class=\"token punctuation\">(</span><span class=\"token function\">asyncGen</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3><a href=\"https://github.com/tc39/proposal-regexp-r-escape\">RegExp <code>\\R</code> escape</a></h3>\n<p><strong>Stage 2 になりませんでした</strong></p>\n<p>RegExp <code>\\R</code> escape は以前 <a href=\"https://github.com/rbuckton/proposal-regexp-features\">RegExp Language Features</a> として提案されていた正規表現の機能群の１つで、正規表現内で line terminator とシンプルにマッチングさせるために新しく <code>\\R</code> を導入する提案です。</p>\n<p>この機能は <code>u</code> もしくは <code>v</code> フラグが有効になっているときのみ有効になります。そして、大まかには次のパターンと等価です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token operator\">?</span><span class=\"token operator\">></span>\\r\\n<span class=\"token operator\">?</span><span class=\"token operator\">|</span><span class=\"token punctuation\">[</span>\\x0A<span class=\"token operator\">-</span>\\x0C\\x85\\u<span class=\"token punctuation\">{</span><span class=\"token number\">2028</span><span class=\"token punctuation\">}</span>\\u<span class=\"token punctuation\">{</span><span class=\"token number\">2029</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>この正規表現の機能は Perl をはじめとする多くの正規表現エンジンに実装されていて、TC39 においてもそのユースケースは認められているようです。</p>\n<p>しかし、<a href=\"https://github.com/tc39/proposal-regexp-set-notation\">RegExp Set Notation Proposal</a> の sequece properties によって同等の機能が実現できる可能性があるためその方向で調査しなおすべきだという結論になり Stage 2 には到達しませんでした。</p>\n<h3><a href=\"https://github.com/tc39/proposal-regexp-modifiers\">RegExp Modifiers</a></h3>\n<p><strong>Stage 2 になりました</strong></p>\n<p>RegExp Modifiers は <code>\\R</code> escape と同じようにもともと RegExp Language Features の機能の１つでした。</p>\n<p>この提案は正規表現パターン内でのフラグの変更を可能にします。</p>\n<p>例を示します。</p>\n<p>次の例中の正規表現パターン全体には <code>i</code> フラグが適用されてます。しかし２つめの <code>[a-z]</code> は <code>?-i:</code> という RegExp Modifiers の構文を使って <code>i</code> フラグを無効にしてます。このとき一文字目では大文字小文字が無視されるものの、二文字目では大文字小文字が無視されません。</p>\n<p>したがってこのパターンは <code>\"ab\"</code> や <code>\"Ab\"</code> にはマッチし <code>\"aB\"</code> にはマッチしません。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> re1 <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token anchor function\">^</span><span class=\"token charset\"><span class=\"token charset-punctuation punctuation\">[</span><span class=\"token range\">a<span class=\"token range-punctuation operator\">-</span>z</span><span class=\"token charset-punctuation punctuation\">]</span></span><span class=\"token group punctuation\">(</span><span class=\"token quantifier number\">?</span>-i:<span class=\"token charset\"><span class=\"token charset-punctuation punctuation\">[</span><span class=\"token range\">a<span class=\"token range-punctuation operator\">-</span>z</span><span class=\"token charset-punctuation punctuation\">]</span></span><span class=\"token group punctuation\">)</span><span class=\"token anchor function\">$</span></span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">;</span>\nre1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ab\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nre1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ab\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nre1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n</code></pre></div>\n<h3><a href=\"https://github.com/tc39/proposal-regexp-buffer-boundaries\">RegExp Buffer Boundaries</a></h3>\n<p><strong>Stage 2 になりました</strong></p>\n<p>RegExp Buffer Boundaries も RegExp Language Features の機能の１つでした。</p>\n<p>この提案は、それぞれ入力の最初と最後にマッチする <code>\\A</code> と <code>\\z</code> を導入します。<code>m</code> フラグの影響を受けないことを除けば <code>^</code> と <code>$</code> に似ています。</p>\n<p><code>^</code> と <code>$</code> はそれぞれ最初と最後にマッチしますが、<code>m</code> フラグが有効になっているときは行頭と行末にマッチします。しかし RegExp Buffer Boundaries が導入する <code>\\A</code> と <code>\\z</code> は、たとえ <code>m</code> フラグが有効であっても入力の最初と最後にマッチします。</p>\n<p>例を示します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token anchor function\">\\A</span>foo<span class=\"token alternation keyword\">|</span><span class=\"token anchor function\">^</span>bar</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">um</span></span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>このパターンでは <code>foo</code> に <code>\\A</code> がついています。したがって入力の最初が <code>foo</code> の文字列にマッチします。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">re<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nre<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<p>しかし入力の最初ではなく行頭が <code>foo</code> の文字列にはマッチしません。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">re<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nfoo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n</code></pre></div>\n<p><code>bar</code> には <code>^</code> がついています。パターン全体で <code>m</code> フラグが有効になっているので、入力の先頭と行頭が <code>bar</code> の文字列にマッチします。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">re<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nre<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bar\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nre<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nbar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<h2>For Stage 1</h2>\n<h2>Updates</h2>\n<p>ステージの移動はないものの、アップデートがあった提案です。</p>\n<h3><a href=\"https://github.com/tc39/proposal-temporal\">Temporal</a></h3>\n<p>いくつかの仕様上の軽微な修正がありました。修正箇所について説明した<a href=\"https://ptomato.name/talks/tc39-2021-12/#1\">スライド</a>が公開されています。</p>\n<h3><a href=\"https://github.com/tc39/proposal-decimal\">Decimal</a></h3>\n<p>Decimal は現在 Stage 1 ですが、2022 年に Stage 2 に到達することを目指しているそうです。進捗を共有するための<a href=\"https://drive.google.com/file/d/1qdieei11dZgDY_KnJhSBcFyHTMZOmCJr/view\">スライド</a>が公開されています。</p>\n<h3><a href=\"https://github.com/tc39/proposal-destructuring-private\">Destructuring Private Fields</a></h3>\n<p>Destructuring Private Fields が提案された当初は小さな修正で十分だと考えられていました。しかし真剣に検討してみるといくつかの仕様上の難しい問題が明らかになったそうです。そこで再度レビュワーを募りレビューをやり直すことが決定しました。</p>\n<h3><a href=\"https://github.com/tc39/proposal-shadowrealm\">Shadow Realms</a></h3>\n<p>いくつかの仕様上の重要な変更があったようです。詳しくは<a href=\"https://docs.google.com/presentation/d/12PM5c4_yUnqXHjvACh8HEN5oJwgei-0T0hX_hlqjfDU/edit#slide=id.ge435a9058a_0_0\">スライド</a>に記載されています。</p>\n<h3><a href=\"https://github.com/tc39/proposal-record-tuple/\">Records and Tuples</a></h3>\n<p>Record と Tuple の中で通常のオブジェクトを扱う方法について議論されました。その方法とその懸念についての Decision Tree が<a href=\"https://drive.google.com/file/d/1lVYn8_sHecqxW08vN5Tu7rXZn7GemBqO/view\">スライド</a>として公開されています。</p>\n<h2>Normative Changes</h2>\n<h3><a href=\"https://github.com/tc39/ecma262/pull/2106\"><code>import.meta[Symbol.toStringTag]</code> の追加</a></h3>\n<p><strong>合意は得られませんでした</strong></p>\n<p><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag\"><code>Symbol.toStringTag</code></a> という Well-known Symbol があります。\nこの Symbol は <code>Object.prototype.toString()</code> によって表示される文字列の決定に使われます。</p>\n<p>具体的な例を示します。</p>\n<p>オブジェクト <code>foo</code> の <code>[Symbol.toStringTag]</code> に <code>\"I'm foo\"</code> という文字列をセットしておくと、<code>foo.toString()</code> は <code>[object I'm foo]</code> になります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token known-class-name class-name\">Symbol</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">toStringTag</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token string\">\"I'm foo\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"[object I'm foo]\"</span>\n</code></pre></div>\n<p>今回のミーティングでは <code>import.meta</code> の <code>[Symbol.toStringTag]</code> に <code>\"ImportMeta\"</code> という文字列を設定するという修正について議論されました。</p>\n<p>この挙動についての Issue は <code>import.meta</code> の策定時にも存在しましたが、そのときすでに <code>import.meta</code> が Stage 4 を達成していたことからクローズされました。</p>\n<p>そして今回のミーティングでもこの仕様の修正についての合意は得られませんでした。この修正のための Pull Request が作成された時点で以下のような懸念が公開されていました。</p>\n<ul>\n<li><code>import.meta</code> は、ECMAScript の範囲では <a href=\"https://tc39.es/ecma262/#sec-hostgetimportmetaproperties\"><code>HostGetImportMetaProperties</code></a> というホスト定義の abstract operation によって中身が決定されるオブジェクトであるということしか決まっておらず、ホストにとって必要であればホスト側で <code>import.meta</code> の <code>Symbol.toStringTag</code> を定義できる。</li>\n<li>仕様内で作成される他のオブジェクトとは異なり、<code>import.meta</code> はホストのデータによって生成されるものであり、ECMAScript の範囲でプロパティを生成することを考慮したものではない。</li>\n</ul>\n<h2>参考リンク</h2>\n<ul>\n<li>TC39\n<ul>\n<li><a href=\"https://github.com/tc39/agendas/blob/main/2021/12.md\">Agenda for the 87th meeting of Ecma TC39</a></li>\n<li><a href=\"https://github.com/tc39/ecma262/pull/2106\">Normative: Add import.meta[Symbol.toStringTag]</a></li>\n<li><a href=\"https://github.com/tc39/proposal-array-grouping\">Proposal Array Grouping</a></li>\n<li><a href=\"https://github.com/tc39/proposal-shadowrealm\">Proposal Shadow Realms</a></li>\n<li><a href=\"https://github.com/tc39/proposal-array-from-async/\">Proposal <code>Array.fromAsync</code></a></li>\n<li><a href=\"https://github.com/rbuckton/proposal-regexp-features\">Proposal RegExp Language Features</a></li>\n<li><a href=\"https://github.com/tc39/proposal-regexp-r-escape\">Proposal RegExp <code>\\R</code> escape</a></li>\n<li><a href=\"https://github.com/tc39/proposal-regexp-set-notation\">Proposal RegExp Set Notation</a></li>\n<li><a href=\"https://github.com/tc39/proposal-regexp-buffer-boundaries\">Proposal RegExp Buffer Boundaries</a></li>\n<li><a href=\"https://github.com/tc39/proposal-regexp-modifiers\">Proposal RegExp Modifiers</a></li>\n<li><a href=\"https://github.com/tc39/proposal-temporal\">Proposal Temporal</a></li>\n<li><a href=\"https://github.com/tc39/proposal-shadowrealm\">Proposal Shadow Realms</a></li>\n<li><a href=\"https://github.com/tc39/proposal-record-tuple/\">Proposal Records and Tuples</a></li>\n<li><a href=\"https://github.com/tc39/proposal-destructuring-private\">Proposal Destructuring Private Fields</a></li>\n</ul>\n</li>\n<li>Babel\n<ul>\n<li><a href=\"https://github.com/babel/proposals/issues/78\">Dec 2021 · Issue #78 · babel/proposals</a></li>\n</ul>\n</li>\n<li>ECMA262\n<ul>\n<li><a href=\"https://tc39.es/ecma262/#prod-ImportMeta\"><code>import.meta</code></a></li>\n<li><a href=\"https://tc39.es/ecma262/#sec-hostgetimportmetaproperties\"><code>HostGetImportMetaProperties</code></a></li>\n</ul>\n</li>\n</ul>\n","metaData":{"title":"ECMAScriptの最新動向 2021年12月版","author":"sosukesuzuki","createdAt":"2022-01-24","summary":"2021年12月14日~15日に開催された TC39 meeting 87th の内容を紹介します","tags":["TC39","ECMAScript"],"updatedAt":"2022-01-24"}},{"slug":"release-chrome-97","content":"<p>Chrome 97 のリリースノート関連の情報をまとめました。</p>\n<ul>\n<li><a href=\"https://developer.chrome.com/blog/new-in-chrome-97/\">https://developer.chrome.com/blog/new-in-chrome-97/</a></li>\n<li><a href=\"https://developer.chrome.com/blog/new-in-devtools-97/\">https://developer.chrome.com/blog/new-in-devtools-97/</a></li>\n<li><a href=\"https://developer.chrome.com/blog/deps-rems-97/\">https://developer.chrome.com/blog/deps-rems-97/</a></li>\n<li><a href=\"https://www.chromestatus.com/features#milestone%3D97\">https://www.chromestatus.com/features#milestone%3D97</a></li>\n<li><a href=\"https://v8.dev/blog/v8-release-97\">https://v8.dev/blog/v8-release-97</a></li>\n</ul>\n<h2>New In Chrome (Chrome 97)</h2>\n<p>Chrome97 で新しく追加された機能です。</p>\n<h3>Web Transport</h3>\n<p>サーバーとクライアントの双方向リアルタイム通信を実現する新しいフレームワークとして提案されている<code>Web Transport</code>が正式にサポートされました。</p>\n<p>Web Transport は既存の代表的手法である<code>Web Sockets</code>や<code>WebRTC</code>と比べ以下のような利点を持っています。</p>\n<ul>\n<li><code>WebSockets</code>よりも低遅延な通信を実現する</li>\n<li>P2P メッセージング用に設計された<code>WebRTC</code>と違い、クライアントサーバーメッセージングを前提として設計されているため扱いやすい</li>\n</ul>\n<p>Web Transport では<code>streams API</code>と<code>datagram API</code>という２種類の通信 API がサポートされており、それぞれ以下のような特徴から使い分けることができます。</p>\n<ul>\n<li>streams API : 信頼性の高い順序付けられたデータ送信に最適</li>\n<li>datagram API : 信頼性や順序がそこまで求められず、より低遅延でベストエフォートなデータ送信に最適</li>\n</ul>\n<p>注意点として、Web Transport を試すためには<code>HTTP/3</code>をサポートしたサーバーが必要となります。</p>\n<p>Web Transport は以下のような形で簡単に利用することができます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'https://example.com:4999/foo/bar'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> transport <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebTransport</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// WebTransportインスタンス生成</span>\n<span class=\"token keyword control-flow\">await</span> transport<span class=\"token punctuation\">.</span><span class=\"token property-access\">ready</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 接続を待つ</span>\n\n<span class=\"token keyword\">const</span> writer <span class=\"token operator\">=</span> transport<span class=\"token punctuation\">.</span><span class=\"token property-access\">datagrams</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">writable</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> data1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">65</span><span class=\"token punctuation\">,</span> <span class=\"token number\">66</span><span class=\"token punctuation\">,</span> <span class=\"token number\">67</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwriter<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">write</span><span class=\"token punctuation\">(</span>data1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>詳しくは<a href=\"https://web.dev/webtransport/\">Experimenting with WebTransport</a>を参照しててください。</p>\n<h3>Script type feature detection</h3>\n<p>ブラウザ側で<code>ES Modules</code>の対応状況を判別する方法として今まで<code>nomodule</code>属性がありましたが、<code>import maps</code>, <code>speculation rules</code>,<code>bundle preloading</code>などの新しく提案されている仕様には対応しきれていませんでした。</p>\n<p>今回サポートされた<code>HTMLScriptElement.supports()</code>を利用することで以下のように JavaScript側でscriptがどの仕様に対応しているかのチェックをすることができるようになります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">HTMLScriptElement</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">supports</span><span class=\"token punctuation\">(</span><span class=\"token string\">'importmap'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Use &#x3C;script type=\"importmap\" ...></span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">HTMLScriptElement</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">supports</span><span class=\"token punctuation\">(</span><span class=\"token string\">'module'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Use &#x3C;script type=\"module\" ...></span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Use classic method...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>New array prototypes</h3>\n<p>Array と TypedArray で<code>findLast()</code>と<code>findLastIndex()</code>が使えるようになりました。\nこの二つの関数は引数で渡された条件に合致する配列内の<strong>最後の要素</strong>の値、位置をそれぞれ返します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">130</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> last <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">findLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> value <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 44</span>\n<span class=\"token keyword\">const</span> lastIndex <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">findLastIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> value <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>lastIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\n</code></pre></div>\n<h3>Emulate Chrome 100 in the UA string</h3>\n<p>あと数ヶ月で Chrome のバージョンは 3 桁となる 100 に到達します。\nバージョンや UA 文字列をパースするコードがある場合は 3 桁でも動くかどうか確認しましょう。</p>\n<p>現在のバージョンを 100 にする<a href=\"https://developer.chrome.com/blog/force-major-version-to-100/\">#force-major-version-to-100</a>フラグを使って、既存のコードが正しく動くか確認することができます。</p>\n<h3>And more!</h3>\n<p>上記以外のようなアップデートがあります。</p>\n<ul>\n<li>フォーム入力の改行が Gecko や WebKit と同じ方法で正規化されるようになりました。\n<ul>\n<li>これによりブラウザ間の相互運用性が向上しました。</li>\n</ul>\n</li>\n<li><code>client hint</code>のプレフィクスを<code>sec-ch</code>にするように標準化を進めています。\n<ul>\n<li>例えば<code>dpr</code>は<code>sec-ch-dpr</code>のようになります。</li>\n<li>以前の仕様も当分の間サポートを続けますが、いずれは非推奨となり削除されることを想定しましょう。</li>\n</ul>\n</li>\n<li>閉じている<code>&#x3C;detail></code>要素が検索可能になり、閉じている<code>&#x3C;detail></code>要素内の element にスクロールしようとした際は閉じられている<code>&#x3C;detail></code>要素を自動的に開くようになりました。</li>\n</ul>\n<h3>What's New In DevTools (Chrome 97)</h3>\n<p>DevTools についてはこちらの日本語訳を参照ください。</p>\n<p><a href=\"https://developer.chrome.com/ja/blog/new-in-devtools-97/\">https://developer.chrome.com/ja/blog/new-in-devtools-97/</a></p>\n<h3>Deprecations and removals in Chrome 97</h3>\n<p>Chrome97 で非推奨になったもの、もしくは削除されたものです</p>\n<p><a href=\"https://developer.chrome.com/blog/deps-rems-97/\">https://developer.chrome.com/blog/deps-rems-97/</a></p>\n<h3>Remove SDES key exchange for WebRTC</h3>\n<p>WebRTC の SDES 鍵交換の仕様は 2013 年以降、関連する IETF の標準仕様では MUST NOT となっており、近年では Chrome での使用率も大幅に低下しているので Chrome97 で廃止されました。</p>\n<p>参考:</p>\n<p><a href=\"https://webrtc-security.github.io/report_ja/\">https://webrtc-security.github.io/report_ja/</a></p>\n<h3>Remove WebSQL in third-party contexts</h3>\n<p>サードパーティ製の WebSQL が廃止されました。W3C では代わりに Web Storage と Indexed Database を推奨しています。</p>\n<h3>Remove SDP Plan B</h3>\n<p>WebRTC でセッションを確立するために使用される SDP に非標準の実装であった<code>Plan B</code>が削除されました。</p>\n<p>参考: SDP の Unified Plan と Plan B</p>\n<p><a href=\"https://blog.jxck.io/entries/2018-01-05/sdp-unified-plan.html\">https://blog.jxck.io/entries/2018-01-05/sdp-unified-plan.html</a></p>\n<h2>その他 Chrome Platform Status に記載されていたもの</h2>\n<p><a href=\"https://www.chromestatus.com/features#milestone%3D97\">https://www.chromestatus.com/features#milestone%3D97</a></p>\n<h3>Feature policy for Keyboard API</h3>\n<p>各言語に対応した keybord レイアウト情報を返す<code>getLayoutMap()</code>メソッドは全てのコンテキスト(iframe 内など)では利用できないという問題点がありました。今回のアップデートで iframe の allow 属性に<code>keyboard-map</code>を追加することでこの問題を解決することができるようになりました。</p>\n<p><a href=\"https://chromestatus.com/features/5657965899022336\">https://chromestatus.com/features/5657965899022336</a></p>\n<h3><code>PermissionStatus.prototype.name</code></h3>\n<p><code>PermissionStatus</code> インターフェースに読み取り専用の属性 <code>\"name\"</code> を追加し、<code>PermissionStatus</code> が作成された後、パーミッションの名前が取得できるようになりました。</p>\n<p>今までは<code>Permissions API</code> を使って複数のパーミッションを同時に問い合わせた際、どの PermissionStatus がどのパーミッションに対応しているのかを識別する方法がありませんでした。</p>\n<p><a href=\"https://chromestatus.com/features/5651653697994752\">https://chromestatus.com/features/5651653697994752</a></p>\n<h3>Propagate request origin and redirect chain in passthrough service workers.</h3>\n<p><code>fetch(evt.request)</code>メソッドで navigation requests を発行する ServiceWorker が<code>FetchEvent.request</code> からのオリジンとリダイレクトチェーンを使用するようになります。</p>\n<p>今までは常に ServiceWorker のオリジンが設定され、リダイレクトチェーンを使用することはありませんでした。</p>\n<p><a href=\"https://chromestatus.com/features/5752539724120064\">https://chromestatus.com/features/5752539724120064</a></p>\n<h3>Support calc(<code>&#x3C;number></code>) where only accepts <code>&#x3C;integer></code></h3>\n<p><a href=\"https://cybozu.github.io/frontend-expert/posts/release-chrome-96\">Chrome 96 リリースノートまとめ</a>にも記載したものが、Chrome97 で追加されました。</p>\n<blockquote>\n<p>css の calc()関数で integer しか受け取らないような場所でも number を指定できるようになりました。 もっとも近い整数に丸められます。</p>\n</blockquote>\n<p><a href=\"https://chromestatus.com/features/5656451751084032\">https://chromestatus.com/features/5656451751084032</a></p>\n<h3>transform: perspective(none)</h3>\n<p>CSS transform プロパティ内で利用できる、<code>perspective()</code>関数への引数として'none'を実装としてサポートしました。<code>perspective(0)</code>と<code>perspective(none)</code>では挙動が変わるため、変形をしないことを意図する場合(単位行列として扱いたい場合)は<code>perspective(none)</code>を利用するようにしましょう。</p>\n<p><a href=\"https://chromestatus.com/features/5687325523705856\">https://chromestatus.com/features/5687325523705856</a></p>\n","metaData":{"title":"Web Transportのサポートなど、Chrome 97 リリースノートまとめ","author":"Saji","editor":"nus3","createdAt":"2022-01-21","summary":"Chrome 97 のリリースノートの要約です","tags":["Releasenote","Browser"],"updatedAt":"2022-01-21"}},{"slug":"release-firefox-96","content":"<ul>\n<li><a href=\"https://www.mozilla.org/en-US/firefox/96.0/releasenotes/\">https://www.mozilla.org/en-US/firefox/96.0/releasenotes/</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Releases/96\">https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Releases/96</a></li>\n</ul>\n<p>Firefox 96 がリリースされました！\n全体的に性能面での改善が多くを占めるアップデートでした。\n本リリースでは Cookie Policy がデフォルトで <code>SameSite=lax</code>を指定するようになりました。\nまた、<code>color-scheme</code>プロパティが追加され、IE 以外の主要なブラウザで利用可能になりました。</p>\n<h2>New</h2>\n<ul>\n<li>ノイズ抑制やオートゲインコントロールの大きな改善とエコーキャンセレーションの若干の改善がされました</li>\n<li>メインスレッドの負荷が大きく軽減されました</li>\n<li>Cookie Policy をデフォルトで <code>SameSite=lax</code> に強制するようになりました</li>\n</ul>\n<h2>Fixed</h2>\n<ul>\n<li>macOS で Gmail のリンクをコマンドクリックした際、正常に新しいタブが開くようになりました\n<ul>\n<li>Firefox95 で unresolved になっていた問題の解決</li>\n</ul>\n</li>\n<li>ビデオの SSRC(RTP セッションでの参加者の識別子) が断続的にドロップする問題が修正されました</li>\n<li>特定のサイトでビデオの画質が劣化する問題が修正されました</li>\n<li>macOS でいくつかの問題を回避するためにフルスクリーンでのビデオが無効化されています</li>\n</ul>\n<h2>Developer</h2>\n<ul>\n<li>Linux にて <code>Select All</code> のショートカットキーが <code>Alt-A</code> から <code>Ctrl-A</code> に変更されました\n<ul>\n<li>web-compatibility の確保やアクセスキーとの衝突回避のため</li>\n</ul>\n</li>\n</ul>\n<h2>Web Platform</h2>\n<ul>\n<li>Web Lock API が実装されました。\n<ul>\n<li>異なる ServiceWorker やタブで実行されているスクリプトを相互連携させることが可能になります</li>\n</ul>\n</li>\n<li>WebRTC ライブラリが更新されたことで Web 会議アプリでの音声やビデオ機能が改善されました</li>\n<li>CSS にて <code>color-scheme</code> がサポートされ、Web ページがどのカラースキームでレンダリング可能かを指定できるようになりました</li>\n</ul>\n<h2>開発者向けの変更</h2>\n<h3>for web developers</h3>\n<h4>CSS</h4>\n<ul>\n<li>CSS で色の値として利用される <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hwb()\"><code>hwb()</code></a> 関数が実装されました</li>\n<li><a href=\"https://developer.mozilla.org/ja/docs/Web/CSS/color-scheme\"><code>color-scheme</code></a>プロパティがサポートされました</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/counter-reset\"><code>counter-reset</code></a> プロパティにて逆順の CSS カウンターを生成する <code>reversed()</code> 関数がサポートされました</li>\n</ul>\n<h4>HTTP</h4>\n<ul>\n<li>同じドメインから送信された Cookie でも異なるスキームを使用されているものは Cookie SameSite ディレクティブについて別サイトから送信されたものと見なすようになりました</li>\n<li>SameSite 属性が指定されていない Cookie は暗黙的に <code>SameSite=lax</code> が指定されるようになりました</li>\n<li><code>SameSite=none</code> を指定した Cookie はセキュアなコンテキストが必要になりました</li>\n<li>Cookie の SameSite についてはこちらをお読みください\n<ul>\n<li><a href=\"https://blog.cybozu.io/entry/2020/05/07/080000\">Cookie の SameSite 属性について - Cybozu Inside Out | サイボウズエンジニアのブログ</a></li>\n</ul>\n</li>\n</ul>\n<h4>APIs</h4>\n<ul>\n<li>Android において <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Navigator/canShare\"><code>navigator.canShare()</code></a> がサポートされました</li>\n<li>デフォルトで <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Locks_API\">Web Locks API</a> が有効になりました</li>\n</ul>\n<h4>Canvas</h4>\n<ul>\n<li>WebP の画像エンコーダーをサポートしました</li>\n</ul>\n<h4>DOM</h4>\n<ul>\n<li><a href=\"https://developer.mozilla.org/ja/docs/Web/API/IntersectionObserver\"><code>IntersectionObserver()</code></a> のコンストラクターが関連付けられたパラメータオプションにから文字が渡された場合に例外発生ではなく <code>rootMargin</code> を設定するようになりました</li>\n</ul>\n<h4>Media, WebRTC, and Web Audio</h4>\n<ul>\n<li>いくつかの非標準な静的フィールドが <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_Statistics_API\">WebRTC Statistics API</a> から削除されました</li>\n</ul>\n<h4>WebDriver conformance (Marionette)</h4>\n<ul>\n<li><code>WebDriver:GetElementShadowRoot</code> コマンドが追加されました\n<ul>\n<li>指定された要素が持っている shadow root を取り出す</li>\n</ul>\n</li>\n<li><code>WebDriver:ExecuteScript</code> 及び <code>WebDriver:ExecuteAsyncScript</code>にて要素の <code>ShadowRoot</code> を返す際に <code>cyclic object error</code> が発生する問題が解決されました</li>\n<li><code>WebDriver:Print</code> が PDF にプリントする際のページ範囲をサポートするように拡張されました</li>\n</ul>\n","metaData":{"title":"CSS color-scheme サポート追加等 Firefox 96.0 リリースノートまとめ","author":"BaHo","editor":"shisama","createdAt":"2022-01-20","summary":"Firefox 96.0 のリリースノートの日本語まとめです","tags":["Releasenote","Browser"],"updatedAt":"2022-01-20"}},{"slug":"turborepo","content":"<p>今年からフロントエンドエキスパートチームでは活動内容の一つである<strong>探求</strong>の一環として、メンバーが気になった技術に対して、気軽に触ってみる会をしています。次の画像は筆者が Slack で、気軽に触ってみる会の開催を宣言してる時のものです。</p>\n<p><img src=\"/frontend-expert/image/turborepo/slack.png\" alt=\"slackで気軽に触ってみる会を宣言してる\" width=\"718\" height=\"152.15061295971978\" ></p>\n<p>今回は<a href=\"https://vercel.com/blog/vercel-acquires-turborepo\">去年の 12 月に Vercel に買収されたニュース</a>があった Turborepo を気軽に触ってみました。\n個人的には 1 人で調べるときよりも複数人でわいわい調べた方が、その技術や関連する周辺知識の話を色んな人の観点で深掘ってできて、とても有意義な時間でした。</p>\n<h2>概要</h2>\n<p>Turborepo はモノレポのためのビルドシステムで次のような特徴があります。</p>\n<ul>\n<li>Yarn, npm, pnpm の workspaces に対応してるリポジトリに対して簡単に導入できる</li>\n<li>workspace 内のコマンドの依存関係をシンプルに設定してくれる</li>\n<li>Turborepo で実行するコマンドがない package はスルーしてくれる(npm workspace の<code>--if-present</code>に相当)</li>\n<li>ローカルキャッシュ、リモートキャッシュを生成・利用できる</li>\n</ul>\n<h3>サンプルで作ったモノレポ構成</h3>\n<p>今回は Yarn v1 の workspace を使ってます。<br>\n<a href=\"https://github.com/nus3/p-turborepo/tree/main/yarn\">https://github.com/nus3/p-turborepo/tree/main/yarn</a></p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">├── apps\n│   └── nus3-a: Next.js\n└── packages:\n    ├── nus3-button2: Reactのコンポーネント + ViteのLibrary Modeでビルド\n    ├── nus3-config: tsconfig + eslintのconfig\n    └── nus3-ui: Reactのコンポーネント(ビルドせずに使う)</code></pre></div>\n<p>サンプルで作ったモノレポ内の package たちは次のような依存関係になっています。<br>\n(色々試してたので適当な命名になってます。すんません)</p>\n<ul>\n<li><code>nus3-a</code>は<code>nus3-ui</code>と<code>nus3-button2</code>に依存している</li>\n<li><code>nus3-ui</code>は<code>nus3-button2</code>に依存している</li>\n</ul>\n<p><img src=\"/frontend-expert/image/turborepo/dependencies.png\" alt=\"サンプルリポジトリの依存関係\" width=\"577\" height=\"314\" ></p>\n<h3>使い方</h3>\n<ol>\n<li>使っているパッケージマネージャーで(Yarn, npm, pnpm)で workspace の設定</li>\n<li><code>turbo</code>のインストール</li>\n<li>package.json に<code>pipeline</code>の設定</li>\n</ol>\n<h4>1. 使っているパッケージマネージャーで(Yarn, npm, pnpm)で workspace の設定</h4>\n<p>workspace の設定については割愛します。各パッケージマネージャーのドキュメントをご覧ください。</p>\n<ul>\n<li><a href=\"https://classic.yarnpkg.com/lang/en/docs/workspaces/\">Yarn</a></li>\n<li><a href=\"https://docs.npmjs.com/cli/v8/using-npm/workspaces\">npm</a></li>\n<li><a href=\"https://pnpm.io/workspaces\">pnpm</a></li>\n</ul>\n<h4>2. <code>turbo</code>のインストール</h4>\n<p><code>yarn add turbo -W --dev</code>で Turborepo を追加します。</p>\n<h4>3. package.json に<code>pipeline</code>の設定</h4>\n<p><code>package.json</code>に<code>turbo.pipeline</code>を追加し、そこで<code>turbo run {command}</code>で実行する command の依存関係やキャッシュの設定をします。この<code>pipeline</code>で定義した command しか<code>turbo run {command}</code>では実行できません。</p>\n<p>実際に定義したものが次の json になります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"turbo\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"pipeline\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"dependsOn\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"^build\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"outputs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"dist/**\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".next/**\"</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"dependsOn\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"build\"</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"deploy\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"dependsOn\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"build\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lint\"</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>dependsOn</code>で依存関係を、<code>outputs</code>でキャッシュするものを指定します。</p>\n<p>定義したコマンドを一つずつ見ていきましょう。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"dependsOn\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"^build\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n</code></pre></div>\n<p>dependOn に<code>^</code>を追加したコマンド(<code>^build</code>)を指定することで workspace 内の各 package の指定したコマンド(<code>build</code>)を package 間の依存関係を考慮した順番で実行してくれます。</p>\n<p>実際に実行してみると、サンプルで作った各 package の依存関係を考慮した順番(<code>@nus3/example-button2</code> → <code>nus3-ui</code> → <code>nus3-a</code>)でビルドされていることがわかります。<br>\n(※今回サンプルで作った構成では<code>nus3-ui</code>はビルドの必要がないですが、依存関係を考慮した順番を表すのにあえて build コマンドを追加しています)</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">$ turbo run build\n• Packages in scope: @nus3/example-button2, nus3-a, nus3-config, nus3-ui\n• Running build in 4 packages\n@nus3/example-button2:build: cache miss, executing a161062b16a0be35\n@nus3/example-button2:build: $ vite build &#x26;amp;&#x26;amp; tsc -p ./tsconfig.build.json\n...\n@nus3/example-button2:build: dist/nus3-example-button2.es.js   3.30 KiB / gzip: 1.39 KiB\nnus3-ui:build: cache miss, executing b32d4fb848c8658f\nnus3-ui:build: $ echo &#x26;#39;build nus3-ui&#x26;#39;\n...\nnus3-a:build: cache miss, executing a80d8842624981a8\nnus3-a:build: $ next build\n...\n\n Tasks:    3 successful, 3 total\nCached:    0 cached, 3 total\n  Time:    5.702s</code></pre></div>\n<p>次の<code>outputs</code>はコマンドを実行した際に、<code>dist</code>と<code>.next</code>配下にあるファイル群をキャッシュする設定です。<code>node_modules/.cache/turbo</code>にキャッシュしたファイルが出力されます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"outputs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"dist/**\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".next/**\"</span><span class=\"token punctuation\">]</span>\n</code></pre></div>\n<p>先程の build コマンドをもう一度実行すると cache が使われ、前回より早く実行されているのがわかります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">$ turbo run build\n• Packages in scope: @nus3/example-button2, nus3-a, nus3-config, nus3-ui\n• Running build in 4 packages\n@nus3/example-button2:build: cache hit, replaying output a161062b16a0be35\n...\nnus3-ui:build: cache hit, replaying output b32d4fb848c8658f\n...\nnus3-a:build: cache hit, replaying output a80d8842624981a8\n...\n\n Tasks:    3 successful, 3 total\nCached:    3 cached, 3 total\n  Time:    221ms &#x26;gt;&#x26;gt;&#x26;gt; FULL TURBO\n\n✨  Done in 0.57s.\n</code></pre></div>\n<p>次のように何も指定しない場合、依存関係がないものとして認識され並列に実行されます</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre></div>\n<p>次の deploy コマンドの<code>dependsOn</code>では pipeline で定義した<code>build</code>, <code>test</code>, <code>lint</code>(順不同)を実行し、終了した時点で workspace 内の各 package の<code>deploy</code>コマンドを実行します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"deploy\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"dependsOn\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"build\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lint\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre></div>\n<p>今回定義したものの場合、Turborepo は次のようなことを考慮しながら各々の package のコマンドを実行します。</p>\n<ul>\n<li><code>build</code>: モノレポ内の各 package の依存関係を考慮しつつ build</li>\n<li><code>test</code>: <code>pipeline</code>で定義した<code>build</code>が実行された後に実行</li>\n<li><code>lint</code>: 他のコマンドの順番を気にせず、並列で実行</li>\n</ul>\n<p>deploy コマンドを実行した結果が次になります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">$ turbo run deploy\n• Packages in scope: @nus3/example-button2, nus3-a, nus3-config, nus3-ui\n• Running deploy in 4 packages\nnus3-a:lint: $ next lint\n@nus3/example-button2:build: $ vite build &#x26;amp;amp;&#x26;amp;amp; tsc -p ./tsconfig.build.json\n...\nnus3-ui:build: $ echo &#x26;#39;build nus3-ui&#x26;#39;\n...\nnus3-a:build: $ next build\n...\nnus3-a:test: $ echo &#x26;#39;test nus3-a&#x26;#39;\n...\nnus3-a:deploy: $ echo &#x26;#39;deploy nus3-a&#x26;#39;</code></pre></div>\n<p>実際に上記を考慮しつつ各 package のコマンドが実行された後に、最後に deploy コマンドが実行されているのがわかると思います。</p>\n<p>また、今回はローカルキャッシュの話のみでしたが、Turborepo には<a href=\"https://turborepo.org/docs/features/remote-caching#vercel\">Vercel</a>や<a href=\"https://turborepo.org/docs/features/remote-caching#custom-remote-caches\">独自</a>にキャッシュを配置することで、同じハッシュのキャッシュがあった場合にそのキャッシュを使ってくれる<strong>リモートキャッシュ</strong>といった機能も Beta で用意されています。</p>\n<p>今のプロジェクトが Yarn や npm の workspace を使っているのであれば、Turborepo を試しに入れてみてもいいかもしれません。</p>\n","metaData":{"title":"workspaceを使ったコマンドを最適化して実行するTurborepoについて","author":"nus3","createdAt":"2022-01-17","summary":"Turborepoの機能について","tags":["Turborepo","Monorepo"],"updatedAt":"2022-01-17"}},{"slug":"release-firefox-95","content":"<ul>\n<li><a href=\"https://www.mozilla.org/en-US/firefox/95.0/releasenotes/\">https://www.mozilla.org/en-US/firefox/95.0/releasenotes/</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Releases/95\">https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Releases/95</a></li>\n</ul>\n<p>Firefox 95 がリリースされました。\n本アップデートでは RLBox という新しいコードサンドボックス機能が導入されて信頼できないコードに対する安全性が向上しました。\nまた、Firefox App から Slack.com の Huddle や Call 機能が利用できるようになったのは嬉しいですね。</p>\n<h2>New</h2>\n<ul>\n<li><a href=\"https://hacks.mozilla.org/2021/12/webassembly-and-back-again-fine-grained-sandboxing-in-firefox-95/\">RLBox</a>が全てのプラットフォームで有効になりました\n<ul>\n<li>信頼できないコードを WebAssembly を用いてネイティブコードへコンパイルすることで意図しない領域外へのメモリアクセスを防止する機能のようです</li>\n<li><a href=\"https://hacks.mozilla.org/2021/12/webassembly-and-back-again-fine-grained-sandboxing-in-firefox-95/\">mozilla hacks</a>によれば、従来のプロセスを分割する手法における非同期化のオーバーヘッドやメモリフットプリントの増加を懸念した手法だと記載されていました。</li>\n</ul>\n</li>\n<li>Windows 10 及び Windows 11 において Firefox App を Microsoft Store からダウンロードできるようになりました</li>\n<li>ブラウザクロームとツールバースクリーンショットがシンプルになりました</li>\n<li>macOS において WindowsServer イベントの処理時の CPU 使用量が削減されました</li>\n<li>macOS において主にフルスクリーン時のソフトウェアでコードされたビデオコンテンツの使用電力が削減されました</li>\n<li>PiP のトグルボタンをビデオウィンドウの反対側にへ移動できるようになりました</li>\n<li>Site Isolation が有効化されました。</li>\n</ul>\n<h2>Fixed</h2>\n<ul>\n<li>Firefox を起動した際、JAWS や ZoomText が Firefox をフォーカスするようになりました</li>\n<li>VoiceOver が ARIA の switch ロールの状態を正しく報告するようになりました</li>\n<li>macOS でコンテンツプロセスの起動速度が速くなりました</li>\n<li>メモリアロケータが改善されました</li>\n<li>JavaScript を先行してコンパイルするようになり、ページロード時のパフォーマンスが改善されました</li>\n</ul>\n<h2>Changed</h2>\n<ul>\n<li>Slack.com で Call や Huddles へアクセスできるように User Agent オーバーライドが追加されました</li>\n</ul>\n<h2>Developer</h2>\n<h3>For web developers</h3>\n<h4>HTML</h4>\n<ul>\n<li>グローバル属性 <code>inputmode</code> が全てのプラットフォームでサポートされるようになりました</li>\n</ul>\n<h4>CSS</h4>\n<ul>\n<li>Android 版 Firefox で cursor プロパティがサポートされました</li>\n</ul>\n<h4>APIs</h4>\n<ul>\n<li><code>Crypt.randomUUID()</code> 関数がサポートされました</li>\n</ul>\n<h4>Media, WebRTC, and Web Audio</h4>\n<ul>\n<li><code>SpeechSynthesisEvent.elapseTime</code> がミリ秒ではなく秒単位の経過時間を返すようになりました</li>\n</ul>\n<h4>WebDriver Conformance (Marionette)</h4>\n<ul>\n<li>Marionette が使用しているポートがプロファイルディレクトリにある <code>MarionetteActivePort</code> ファイルに書き込まれるようになりました</li>\n<li><code>WebDriver:NewSession</code> が最初のタブのロードが完了するまで待機するようになりました</li>\n</ul>\n<h3>For add-on developers</h3>\n<ul>\n<li>browserSettings に <code>overrideContentColorScheme</code> が追加され、<code>.css.prefers-color-scheme.content.override</code> という環境設定を制御することでブラウザのテーマとは独立したページ単位の優先的な配色を設定する機能が追加されました</li>\n</ul>\n<h2>unresolved</h2>\n<ul>\n<li>Gmail のリンクをコマンドクリックしても新しいタブが開かない問題がありました\n<ul>\n<li>回避策: Gmail のリンクをコマンドキーを利用せずにクリックすると新しいタブが開きます</li>\n</ul>\n</li>\n</ul>\n","metaData":{"title":"新しいコードサンドボックス機能 RLBox の追加など Firefox 95.0 リリースノートまとめ","author":"BaHo","createdAt":"2021-12-20","summary":"Firefox 95.0 のリリースノートの日本語まとめです","tags":["Releasenote","Browser"],"updatedAt":"2021-12-20"}},{"slug":"team-activity-logs-2021","content":"<p>この記事は<a href=\"https://adventar.org/calendars/6823\">Cybozu Advent Calendar 2021</a>の18日目の記事です（業務なので前日に出してます🍀）。</p>\n<p>サイボウズには 10 年以上運用が続いているプロダクトがいくつかあります。フロントエンドエキスパートチームは、そんなプロダクトや開発メンバーへの支援を横断的に行うチームです。</p>\n<p>フロントエンドエキスパートチームの今年の取り組みを紹介します。</p>\n<h2>フロントエンドエキスパートチームの立ち位置とミッション</h2>\n<p>フロントエンドエキスパートチームは特定のプロダクトなどに属さない、独立した横断的な支援チームです。活動内容についてはすべてチームに裁量があり、何をどうしていくかは自律的に決めて動く必要があります。</p>\n<p>フロントエンドエキスパートチームでは「サイボウズのフロントエンドを最高にする」というミッションを掲げています。このミッションを達成するための活動を日々考えながら活動しています。</p>\n<p>日々の活動は次の 4 つの内容を軸に行なっています。</p>\n<ul>\n<li>支援: プロダクトやチームへの支援</li>\n<li>発信: Cybozu やメンバーのプレゼンス向上のための情報発信</li>\n<li>啓蒙: 社内メンバーのフロントエンドの技術力向上のための啓蒙活動</li>\n<li>探究: プロダクトの可能性を広げるための調査検証</li>\n</ul>\n<p>これら 4 つを軸に、<code>支援:5</code> <code>発信&#x26;啓蒙:2</code> <code>探究:3</code> の割合を目安にメンバー個々人が裁量を持って活動しています。</p>\n<p>チームは今月で 4 歳 2 ヶ月になります。</p>\n<h2>活動内容まとめ</h2>\n<p>今年は大小さまざまな取り組みを行いました。次のリストはフロントエンドエキスパートチームが行なった今年の活動内容のざっくりとしたまとめです。これらの活動はチームで自発的に始めた取り組みと、相談きっかけで行なったものがあります。割合としては自発的なものが 9 割、相談きっかけが 1 割程度です。</p>\n<ul>\n<li>プロダクトのフロントエンドリアーキテクチャ支援</li>\n<li>プロダクトのマイクロサービス化を検証</li>\n<li>プロダクトのライブラリアップデート支援</li>\n<li>プロダクトへのフロントエンドのテスト環境整備支援</li>\n<li><a href=\"https://cybozu.github.io/frontend-monthly/\">サイボウズフロントエンドマンスリー</a>の開催</li>\n<li>登壇\n<ul>\n<li><a href=\"https://nodejs.connpass.com/event/221358/\">Node 学園 37 時限目 オンライン</a></li>\n<li><a href=\"https://web-study.connpass.com/event/213676/\">tc39_study</a></li>\n<li><a href=\"https://jsconf.jp/2021/\">JSConf JP 2021</a></li>\n</ul>\n</li>\n<li><a href=\"https://cybozu.connpass.com/event/212572/\">Meetup の開催</a></li>\n<li>OSS へのコントリビューション</li>\n<li>社内向けフロントエンド研修の開催</li>\n<li>フロントエンドウィークリーの開催（社内向け勉強会）</li>\n<li>エンジニアインターンの開催</li>\n<li><a href=\"https://blog.cybozu.io/search?q=%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89%E3%82%A8%E3%82%AD%E3%82%B9%E3%83%91%E3%83%BC%E3%83%88\">エンジニアブログへの記事投稿</a></li>\n<li><a href=\"https://cybozu.github.io/frontend-expert/posts\">チームの web サイトへの記事投稿</a></li>\n<li>デザインシステムの探究</li>\n</ul>\n<p>プロダクトの現状を見て、プロダクトや会社の今後の方向性などを加味した上で、取り組みの内容や注力する割合をコントロールしています。</p>\n<p>その中からいくつかをピックアップして詳細を紹介します。</p>\n<h2>プロダクトのフロントエンドリアーキテクチャをプロジェクト化するまで</h2>\n<p>サイボウズでは現在、kinotne のフロントエンドのリアーキテクチャプロジェクトが進行中です。kintone の脱レガシーの取り組み自体は 2019 年ごろから開始されていましたが、1 つのプロジェクトとして動くようになったのは今年からです。</p>\n<p><div class=\"hatena-link\"><iframe class=\"hatena-link-frame\" src=\"https://hatenablog-parts.com/embed?url=https://blog.cybozu.io/entry/2021/07/20/170000\" style=\"border: none;\"></iframe></div></p>\n<h3>少数チームでやれることに限界を感じた</h3>\n<p>リアーキテクチャがプロジェクトになる前、kintone の脱レガシーはもともとフロントエンドエキスパートチームが主導・先行する形で調査検討を行っていました。Closure Tools というフレームワークに依存している現状に対して、脱 Closure Tools のロードマップを作成したり、Closure Tools を使い続けた場合の影響と今後の見通しについて社内各所に警鐘を鳴らすとともに、別のフレームワークへの置き換え方法についての PoC などを行なっていました。</p>\n<ul>\n<li><a href=\"https://blog.cybozu.io/entry/2020/04/07/110126\">フロントエンドの開発体験向上と脱レガシー</a></li>\n<li><a href=\"https://blog.cybozu.io/entry/about-clutz\">Closure Library から TypeScript の型定義を生成する</a></li>\n<li><a href=\"https://blog.cybozu.io/entry/2020/06/25/105457\">styled-components の採用と既存資産を捨てた理由</a></li>\n</ul>\n<p>そこから kintone の開発メンバーの一部とともに少しずつ React への置き換えを進めるようになりましたが、リソース的にできる範囲とスピードに課題感を抱えており、このままでは 5 年かかっても完了しないのではないかという不安がありました。</p>\n<p>この不安をどうやれば解消できるか、どうすればスピードアップできるかをチーム内で定期的に議論していろんな案を考えていました。</p>\n<h3>プロダクトの課題を組織の課題にする</h3>\n<p>kintone はサイボウズにとって大事なプロダクトで、そのプロダクトの内部の経年劣化は間違いなく組織にとっても課題です。10 年以上使い続けているフレームワークによる開発は限界に近づいてきていますが、この課題に対しての温度感がフロントエンドエキスパートとその他で大きな差がありました。</p>\n<p>プロダクト側からすると新規機能の開発やバグ修正などの優先度が高くなりがちなので、脱レガシーにリソースを注力すると決めるのは難しいことだと理解はできます。また、プロダクトより上の層（サイボウズでは本部長などの経営に近い層）からするとゆっくりながらも進んでいるという事実からか、そこまで危機感は持っていないように感じられました。</p>\n<p>そんな状況もあり、フロントエンドエキスパートチームとしては脱レガシーを組織の課題として、トップダウン的な動きで会社として注力する形でやっていきたいと考えました。しかしながらことはそう簡単ではなく、サイボウズは上長やマネージャーがいないという組織構造から、そういった大きな活動を起こすのに気力とコストを大いに必要としました。（現在この課題に対していろいろなトライを実施しており、解消に向かって進んでいます）</p>\n<p>フロントエンドエキスパートチームからの問題提起を根気強く続けながら、プロダクトのメンバーや本部長を交えてどういったチーム構成でどうリリースまで持っていくかなどさまざまな議論を重ねました。その結果、リアーキテクチャプロジェクトとして発足するに至り、組織の課題として取り組める状況まで持っていくことができました。</p>\n<h2>横断的な支援チームで難しいと感じるところ</h2>\n<p>支援チームで活動していく上で何度か感じた難しいところがあります。それは、外側からの働きかけだけではやれることが多くないということです。外側からいくら熱心に働きかけても支援先のプロダクトなりチームなりが自分ごととして動いてくれない限りは、その場限りの活動になりがちで支援の効果も一時的なものになってしまいます。</p>\n<p>こういった実感からフロントエンドエキスパートチームでは、短中期で支援先の内部に入って活動するという方法を取ることが多くなりました。その場限りの支援にならないように仕組みを整えたり、初期段階のブースター役としてがっちりプロダクトチームに寄り添そうような形で支援できるように心がけています。支援したい対象はいくつもありますが、焦らずに 1 つずつ集中して解決していくのが支援チームとしてうまく動いていくのには重要だと思います。</p>\n<p>また、支援が一方的な押し付けにならないように、関わるメンバーにその支援活動の意味や意義を共感してもらうことに対して手を抜かないことも大事だと感じています。</p>\n<h2>継続的な社内啓蒙と社外発信</h2>\n<p>啓蒙・発信をチームの取り組みとして行なっています。社内勉強会として Frontend Weekly を、社外イベントとして Cybozu Frontend Monthly を継続して開催しています。</p>\n<p><div class=\"hatena-link\"><iframe class=\"hatena-link-frame\" src=\"https://hatenablog-parts.com/embed?url=https://cybozu.github.io/frontend-expert/posts/frontendWeekly-And-Monthly\" style=\"border: none;\"></iframe></div></p>\n<p>どちらも意識しているのは開催のコストを下げることです。司会を交代制にしたり、録画での開催を試したりと、常にコストを下げる工夫を行なっています。その結果、Frontend Weekly は 5 周年、Cybozu Frontend Monthly は 17 ヶ月連続で開催しています。</p>\n<p>Cybozu Frontend Monthly は多くの人に視聴してもらえており、中途入社のきっかけになったり、学生への認知向上といった効果も出ています。これからも無理しない範囲で続けていければと思います。</p>\n<h3>社外発信のコストと心理的障壁を減らす</h3>\n<p>今年はフロントエンドエキスパートチームの web サイト(このサイト)を作成して、そこでの情報発信をはじめました。サイボウズの技術ブログは他にもありますが、あちらはプロダクトでの知見を共有する場という側面が強かったり、ちゃんとしたものをそこそこのボリュームで出さなければという意識が働くといった意見がチーム内で出たりと、若干のハードルを感じる場所になっています。</p>\n<p>チームの web サイトであれば、フロントエンドの情報に偏っていても問題なく、プロダクトに依存しない内容を気軽に発信できる場所として機能すると考えました。</p>\n<p>記事の執筆は一見コストが高そうですが、フロントエンドエキスパートチームではもともと社内 SNS(kintone)に web の最新情報などを共有する活動を行なっていました。この情報を外向けに少し整える手間さえかければアウトプットが行えるので、記事作成のコストが低めで継続が見込めます。</p>\n<p>今年の 10 月にサイトを開設してから 3 ヶ月で記事を 10 本投稿できていることから、今の所うまくいっているように思います。</p>\n<h2>おわりに</h2>\n<p>2021 年はフロントエンドエキスパートチームとして存在感と価値を発揮できた年だと感じています。地道な草の根活動からプロジェクト化へこぎつけたり、継続的な発信が行えていたりと、エキスパートチームらしい働きができたのかなと思います。</p>\n<p>フロントエンドエキスパートチームの活動はチームメンバーだけでなく、プロダクトチームなどの協力があってこその活動も多いです。来年も関係各所と連携を取りつつ、着々と成果が出せるように取り組んで行きたいと思います。</p>\n<p>フロントエンドの横断的支援チーム、フロントエンドのリアーキテクチャなどに興味がある方はカジュアル面談からでもぜひお願いします。</p>\n<p><div class=\"hatena-link\"><iframe class=\"hatena-link-frame\" src=\"https://hatenablog-parts.com/embed?url=https://meety.net/matches/TgEdHofmrGjd\" style=\"border: none;\"></iframe></div></p>\n<p><div class=\"hatena-link\"><iframe class=\"hatena-link-frame\" src=\"https://hatenablog-parts.com/embed?url=https://meety.net/matches/arWAMFBPtzsm\" style=\"border: none;\"></iframe></div></p>\n<p><div class=\"hatena-link\"><iframe class=\"hatena-link-frame\" src=\"https://hatenablog-parts.com/embed?url=https://meety.net/matches/phQxpBZQLDBO\" style=\"border: none;\"></iframe></div></p>\n<p>応募もお待ちしております。</p>\n<p><div class=\"hatena-link\"><iframe class=\"hatena-link-frame\" src=\"https://hatenablog-parts.com/embed?url=https://cybozu.co.jp/company/job/recruitment/list/front_end_expert.html\" style=\"border: none;\"></iframe></div></p>\n<p><div class=\"hatena-link\"><iframe class=\"hatena-link-frame\" src=\"https://hatenablog-parts.com/embed?url=https://cybozu.co.jp/company/job/recruitment/list/front_end_engineer_kintone.html\" style=\"border: none;\"></iframe></div></p>\n","metaData":{"title":"長期運用プロダクトを抱える組織で横断的なフロントエンド支援チームが1年で行なったこと","author":"nakajmg","createdAt":"2021-12-18","summary":"サイボウズのフロントエンドエキスパートチームの2021年の活動内容を紹介します。","tags":["Cybozu","FrontendExpert"],"updatedAt":"2021-12-18"}},{"slug":"frontendWeekly-And-Monthly","content":"<p>この記事は、<a href=\"https://adventar.org/calendars/6823\">Cybozu Advent Calendar 2021</a>の9日目の記事です。</p>\n<hr>\n<p>フロントエンドエキスパートチームでは、社内向けフロントエンド勉強会の「Frontend Weekly」と、社外向けフロントエンド情報発信イベントの「Cybozu Frontend Monthly」を運営しています。</p>\n<p>この度、Frontend Weeklyが5周年、Cybozu Frontend Monthlyが1周年を迎えました🎉</p>\n<p>今回はそれぞれの各勉強会の内容と継続して開催してきた所感について紹介します。</p>\n<h2>Frontend Weeklyとは？</h2>\n<p>Frontend Weeklyは社内の有志が週ごとにフロントエンドの情報を持ち寄り、共有し合う会です。</p>\n<p>次のように社内の<a href=\"https://kintone.cybozu.co.jp/\">kintone</a>上で情報が共有されています。</p>\n<p><img src=\"/frontend-expert/image/frontendWeekly-And-Monthly/frontendWeekly.png\" alt=\"kintone上で情報が共有されている様子\" width=\"718\" height=\"640.4116638078901\" ></p>\n<p>各々が持ち寄った記事の他に、<a href=\"https://twitter.com/azu_re\">azuさん</a>が運営している<a href=\"https://jser.info/\">JSer.info</a>を読む時間を設けています。</p>\n<p>Frontend Weeklyは、2016年3月にFrontend Weekly Lunchとしてスタートしました。その後、ランチの時間では社内メンバーの予定が合わなくなり、Frontend Weeklyとして毎週火曜日の夕方に開催されるようになりました。</p>\n<p>上記のように開催形態が変わりつつも、2021年まで約5年間継続しています。</p>\n<p>稀にゲスト招待も行っています。</p>\n<h2>社内勉強会を継続開催してみた感想とメリット</h2>\n<p>Frontend Weeklyは所属する組織・チームに関わらず、フロントエンドに興味ある社内メンバーが情報をキャッチアップできるきっかけの場になっています。ときには、社内の事情や歴史的経緯にも触れられ、情報に対する理解度が深まることもありました。</p>\n<p>フロントエンドエキスパートチームは社内のフロントエンドを横断的に支援することが1つの役割になっています。この会を通して、チームと社内メンバーが繋がり、横断的な支援へのきっかけづくりになっています。</p>\n<h2>Cybozu Frontend Monthlyとは？</h2>\n<p><img src=\"/frontend-expert/image/frontendWeekly-And-Monthly/cybozuFrontendMonthly-ogp.png\" alt=\"Cybozu Frontend Monthlyのアイキャッチ画像\" width=\"659\" height=\"229\" ></p>\n<p>Cybozu Frontend Monthlyは、フロントエンドエキスパートチームが月末にフロントエンド情報を発信するオンラインイベントです。</p>\n<p>*YouTubeの<a href=\"https://www.youtube.com/watch?v=gujWyAmtzys&#x26;list=PLPTndynQK4dxLZFEZgOZjt_zKG-0JWoWy\">アーカイブ一覧</a></p>\n<p>コロナ禍によりフロントエンドエキスパートチームの社外発信が激減したことが、Cybozu Frontend Monthlyを開催するきっかけでした。</p>\n<p>2020年7月に第1回目を開催し、2021年まで約1年間毎月開催することができています。</p>\n<h3>社外勉強会を継続開催してみた感想とメリット</h3>\n<p>Cybozu Frontend Monthlyはオンライン開催なので、オフラインでは獲得できないフロントエンドエキスパートチームの認知を得ることができました。実際に、コロナ禍の影響でオフラインでの関わりを作ることが難しかったインターン応募者の方達から「Cybozu Frontend Monthlyがきっかけでチームを知った」と声を聞くこともありました\nまた、フロントエンドエキスパートチームに中途入社するきっかけがCybozu Frontend Monthlyだったこともあります。</p>\n<p>*<a href=\"https://nus3.com/fee-team/\">サイボウズのフロントエンドエキスパートチームに入った話</a></p>\n<p>2021年の途中からは他社のゲストの方を招いて開催もしました。\n社外のフロントエンドエンジニアと交流のきっかけになり、オンライン放送後の雑談会では、情報交換を行うことができました。</p>\n<p>これまでに公開した動画の再生回数は平均約500回程度と、多くの方に観ていただくことができました。</p>\n<h2>勉強会を継続開催していくために工夫してきたこと</h2>\n<p>勉強会を開催してきた中で一番大事だったことは、「継続すること」でした。\n社内勉強会の参加人数が少ないときは3人だったこともありますが、会を閉じずに開催することで、興味ある人が戻ってきました。継続していなければ、社内の場がなくなってしまい、機会がなくなるところでした。</p>\n<p>継続開催するために、定期的に振り返りを行い、運営のコストを下げ、継続しやすい環境にする工夫をしてきました。\n具体的には次のような改善がありました。</p>\n<ul>\n<li>司会を運営メンバーでローテーションする</li>\n<li>準備を運営メンバーで分担する</li>\n<li>開催時間を参加者しやすい時間にする</li>\n</ul>\n<p>また、サイボウズには社外発信などのイベントをサポートしてくれる<a href=\"https://blog.cybozu.io/entry/2020/12/24/110000\">コネクト支援</a>チームがいます。このチームがCybozu Frontend Monthlyの配信周りをサポートしてくれたので、フロントエンドエキスパートチームはコンテンツ準備と当日オンライン上で話すことに集中することができました。</p>\n<h2>おわりに</h2>\n<p><a href=\"https://jser.info/\">JSer.info</a>、技術記事をアウトプットしてくれている方、Frontend WeeklyとCybozu Frontend Monthlyのゲストに参加してくれた方、視聴者の方、多くの方達のおかげで継続ができています。ありがとうございます！</p>\n<p>これからも継続的に情報発信を続けていきます。</p>\n","metaData":{"title":"Frontend Weekly5周年&Cybozu Frontend Monthly1周年🎉 〜続けてみてのアレコレ〜","author":"sakito","createdAt":"2021-12-09","summary":"社内と社外向けのフロントエンド勉強会について","tags":["Announcement"],"updatedAt":"2021-12-09"}},{"slug":"strings-as-import-export","content":"<p>11 月 11 日に、以前から一部で注目されていた<a href=\"https://github.com/tc39/ecma262/pull/2154\">ある Pull Request</a> が <a href=\"https://github.com/tc39/ecma262\">tc39/ecma262</a> にマージされました。</p>\n<p>この Pull Request がマージされたことで、識別子ではなく文字列リテラルを使った import/export が可能になりました。</p>\n<p>この仕様変更はプロポーザルという形で扱われてはいませんが、構文上の影響があるので、JavaScript ユーザーとして知っておくに越したことはないものになります。</p>\n<h2>概要</h2>\n<p>まず具体例を示します。</p>\n<p>今回の変更によって、次のように import/export する際の名前として文字列リテラルを使えるようになります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">export</span> <span class=\"token punctuation\">{</span> foo <span class=\"token keyword module\">as</span> <span class=\"token string\">\"😃 hey hey\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"😃 hey hey\"</span> <span class=\"token keyword module\">as</span> foo <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./module.js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// foo</span>\n</code></pre></div>\n<p>基本的にはこれだけです。</p>\n<h2>詳解</h2>\n<p>ここからは仕様上の用語を使って解説をします。</p>\n<p>この変更が入る前の ECMAScript では <a href=\"https://tc39.es/ecma262/#prod-ImportSpecifier\"><code>ImportSpecifier</code></a> で <code>as</code> を使う場合 <code>as</code> の左側は <a href=\"https://tc39.es/ecma262/#prod-IdentifierName\"><code>IdentifierName</code></a> でなければいけませんでした。\nまた <a href=\"https://tc39.es/ecma262/#prod-ExportSpecifier\"><code>ExportSpecifier</code></a> は、単一の <code>IdentifierName</code> もしくは、<code>as</code> を使う場合は <code>as</code> の左側と右側は両方とも <code>IdentifierName</code> でなければいけませんでした。</p>\n<p>今回の変更によって、新たに <a href=\"https://tc39.es/ecma262/#prod-ModuleExportName\"><code>ModuleExportName</code></a> という構文が追加されました。<code>ModuleExportName</code> は、<code>IdentifierName</code> もしくは <a href=\"https://tc39.es/ecma262/#prod-StringLiteral\"><code>StringLiteral</code></a> の形をとります。\nたとえば、識別子 <code>foo</code> や 文字列リテラル <code>\"😃 hey hey\"</code> は <code>ModuleExportName</code> です。</p>\n<p>そして、<code>ImportSpecifier</code> で <code>as</code> を使う場合 <code>as</code> の左側は <code>ModuleExportName</code> の形をとるようになりました。したがって、次の例の <code>import</code> 文はすべて構文として妥当です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> foo <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"mod\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> foo <span class=\"token keyword module\">as</span> bar <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"mod\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"😃 hey hey\"</span> <span class=\"token keyword module\">as</span> baz <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"mod\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>ExportSpecifier</code> は、単一の <code>ModuleExportName</code> もしくは、 <code>as</code> を使う場合 <code>as</code> の左側と右側は両方とも <code>ModuleExportName</code> の形をとるようになりました。したがって、次の例の <code>export</code> 文はすべて構文として妥当です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">export</span> <span class=\"token exports\"><span class=\"token punctuation\">{</span> foo <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"mod\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">export</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"😃 hey hey\"</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"mod\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">export</span> <span class=\"token exports\"><span class=\"token punctuation\">{</span> foo <span class=\"token keyword module\">as</span> foo <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"mod\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">export</span> <span class=\"token punctuation\">{</span> foo <span class=\"token keyword module\">as</span> <span class=\"token string\">\"😃 hey hey\"</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"mod\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">export</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"😃 hey hey\"</span> <span class=\"token keyword module\">as</span> foo <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"mod\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">export</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"😃 hey hey\"</span> <span class=\"token keyword module\">as</span> <span class=\"token string\">\"😃 hey hey\"</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"mod\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>ただし <code>ExportSpecifier</code> の <code>ModuleExportName</code> を <code>StringLiteral</code> にできるのは、その <code>ExportSpecifier</code> を含む <a href=\"https://tc39.es/ecma262/#prod-ExportDeclaration\"><code>ExportDeclaration</code></a> に <a href=\"https://tc39.es/ecma262/#prod-FromClause\"><code>FromClause</code></a> が存在する場合のみです。</p>\n<p>たとえば、次のコードは <code>ExportDeclaration</code> に <code>FromClause</code> が存在しないので <code>ExportSpecifier</code> で <code>StringLiteral</code> を使うことはできません。</p>\n<!-- prettier-ignore -->\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// できない</span>\n<span class=\"token keyword module\">export</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"😃 hey hey\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>一方で、次のコードは <code>FromClause</code> が存在するので、<code>ExportSpecifier</code> で <code>StringLiteral</code> を使うことができます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// できる</span>\n<span class=\"token keyword module\">export</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"😃 hey hey\"</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"mod\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h2>文字列の制約</h2>\n<p><code>StringLiteral</code> は通常の JavaScript の文字列リテラルです。たとえば <code>\"foo\"</code> とか <code>\"bar\"</code> みたいな形をしたものです。</p>\n<p><code>ModuleExportName</code> は <code>StringLiteral</code> を含むので、全ての文字列リテラルを <code>ModuleExportName</code> として使えるようにみえますが、実際には少々異なります。<code>ModuleExportName</code> として使える <code>StringLiteral</code> には制限があります。</p>\n<p><strong><code>ModuleExportName</code> として使える <code>StringLiteral</code> は、<a href=\"https://www.unicode.org/glossary/#well_formed_code_unit_sequence\">Well-Formed Code Unit Sequence</a> でなければいけません。</strong>\nこのことは、<a href=\"https://tc39.es/ecma262/#sec-module-semantics\">Module Semantics</a> の Eary Errros 内の <a href=\"https://tc39.es/ecma262/#_ref_6583\">https://tc39.es/ecma262/#_ref_6583</a> に記載されています。</p>\n<h3>Well-Formed Code Unit Sequence とは</h3>\n<p>JavaScript の文字列は UTF-16 でエンコードされます。そのため、実際には JavaScript の文字列というのは 16 ビットの整数で表現される Unicode のコードユニットの並びでしかありません。</p>\n<p>UTF-16 では基本的に 1 文字につき 16 ビットで表現されます。しかし、Unicode の BMP(基本多言語面)に収まらない文字は 16 ビットのコードユニットを二つ並べたペアで表現します。</p>\n<p>たとえば、ひらがなの <code>あ</code> は BMP に含まれており、一つのコードユニット(<code>0x3042</code>)で表されます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\u3042\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// あ</span>\n</code></pre></div>\n<p>一方で、<code>𠮟</code>(<code>叱</code> ではないことに注意) は BMP に含まれないので、二つのコードユニット(<code>0xD842</code> と <code>0xDF9F</code>)で表されます。このようなコードユニットのペアを、サロゲートペアといいます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\uD842\\uDF9F\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 𠮟</span>\n</code></pre></div>\n<p>前述のとおり、JavaScript の文字列は 16 ビットの整数で表現されるコードユニットの並びでしかありません。したがって、<code>𠮟</code> を構成する二つのコードユニットである <code>0xD842</code> と <code>0xDF9F</code> のうち一つだけを含む文字列も作ることができます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"\\uD842\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>しかし、<code>0xD842</code> 単体に対応する文字は Unicode には存在しません。</p>\n<p>このような、<strong>対になっていないサロゲートペアを含むような文字列は Well-Formed Code Unit Sequence ではありません。</strong></p>\n<p>逆に、対になっていないサロゲートペアを許容しないような文字列を <strong>Well-Formed Code Unit Sequence</strong> といいます。つまり、大雑把にいえば「ちゃんと文字になっているコードユニットで構成された文字列」ということです。</p>\n<p>ちなみに、このような Well-Formed な文字列は WebIDL では <a href=\"https://developer.mozilla.org/ja/docs/Web/API/USVString\">USVString</a> と呼ばれています。</p>\n<h3>新しい Abstract Operation <code>IsStringWellFormedUnicode</code></h3>\n<p>この仕様の変更に伴って、<a href=\"https://tc39.es/ecma262/#sec-isstringwellformedunicode\"><code>IsStringWellFormedUnicode</code></a> という新しい Abstract Operation が追加されました。</p>\n<p>この Abstract Operation は、引数の文字列が Well-Formed Code Unit Sequence かどうかを判定します。</p>\n<p>前述した <code>ModuleExportName</code> のための Early Errors では、この <code>IsStringWellFormedUnicode</code> Abstract Operation を使って <code>StringLiteral</code> が Well-Formed Code Unit Sequence かどうかの判定を行います。そしてもし Well-Formed Code Unit Sequence でなければ Syntax Error になります。</p>\n<h2>仕様変更のモチベーション</h2>\n<p>実はこの仕様の変更は、今の Web の仕様ではほとんど役に立つことはありません。</p>\n<p>この変更が行われたモチベーションは、<strong>将来的に</strong> WebAssembly の Module との相互運用性を向上させるためです。</p>\n<p>この背景を理解するために、おさえておくべき前提が二つあります。</p>\n<p>１つ目は、WebAssembly の Module では関数を export するときに文字列で名前をつけるということです。\nたとえば次の例では <code>$add</code> という関数を <code>\"add\"</code> という名前で export しています。</p>\n<div class=\"remark-highlight\"><pre class=\"language-wasm\"><code class=\"language-wasm\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token variable\">$add</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">param</span> <span class=\"token variable\">$lhs</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">param</span> <span class=\"token variable\">$rhs</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">result</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">local</span>.get <span class=\"token variable\">$lhs</span>\n    <span class=\"token keyword\">local</span>.get <span class=\"token variable\">$rhs</span>\n    <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>add</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">export</span> <span class=\"token string\">\"add\"</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token variable\">$add</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>２つ目は、WebAssembly の Module を JavaScript から import できるようにしたい、という動きがあるということです。<a href=\"https://github.com/WebAssembly/esm-integration\">WebAsembly/esm-integration</a> などで、その動きを見ることができます。</p>\n<p>簡単にいえば、次のようにして簡単に WebAssembly の Module を JavaScript から扱えるようにしたいということです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> add <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"foo.wasm\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n</code></pre></div>\n<p>現在の WebAssembly および ECMAScript の仕様では、このような形で JavaScript 側から WebAssembly の Module を読み込むことはできません。</p>\n<p>これらを前提として上で、次の例について考えます。</p>\n<p>この例は前述したものとほとんど変わりませんが、<code>export</code> の後ろが <code>\"add\"</code> ではなく <code>\"+\"</code> になっています。<code>export</code> の後ろには文字列を置くことができるので、これは妥当な Module です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-wasm\"><code class=\"language-wasm\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token variable\">$add</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">param</span> <span class=\"token variable\">$lhs</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">param</span> <span class=\"token variable\">$rhs</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">result</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">local</span>.get <span class=\"token variable\">$lhs</span>\n    <span class=\"token keyword\">local</span>.get <span class=\"token variable\">$rhs</span>\n    <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>add</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">export</span> <span class=\"token string\">\"+\"</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token variable\">$add</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>将来、WebAssembly の Module を JavaScript から import できるようになったときに、このモジュールから <code>+</code> 関数を named import したいとします。\n<strong>しかし、<code>+</code> は <code>IdentifierName</code> ではないので、今までの ECMAScript の仕様では named import できませんでした。</strong></p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// できない</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"foo.wasm\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// できない</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token operator\">+</span> <span class=\"token keyword module\">as</span> add <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"foo.wasm\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>今回の変更によって <code>ImportSpecifier</code> の <code>as</code> の左側に <code>StringLiteral</code> を置けるようになったことで、次のように書るようになりました。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ES2022 でできる</span>\n<span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"+\"</span> <span class=\"token keyword module\">as</span> add <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"foo.wasm\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n</code></pre></div>\n<p>このような書き方は ES2022 では構文上は妥当ですが、実際にはまだ WebAssembly の import はできません。</p>\n<p>また、<code>ModuleExportName</code> の <code>StringLiteral</code> が Well-Formed Code Unit Sequence でなければならないという制約が存在するのも、WebAssembly との相互運用のためです。\nWebAssembly のテキストフォーマットで <code>export</code> の後に続く文字列は Well-Formed Code Unit Sequence でなければいけないので、それと統一させたのでしょう。</p>\n<h2>参考リンク</h2>\n<ul>\n<li>TC39\n<ul>\n<li><a href=\"https://github.com/tc39/ecma262/pull/2154\">Normative: Arbitrary module namespace identifier names by bmeck · Pull Request #2154 · tc39/ecma262</a></li>\n<li><a href=\"https://github.com/tc39/notes/blob/master/meetings/2020-09/sept-21.md#arbitrary-strings-as-exportimport-names\">Arbitrary module namespace identifier names · tc39/notes/notes/sept-21.md</a></li>\n<li><a href=\"https://github.com/tc39/proposal-import-reflection\">tc39/proposal-import-reflection</a></li>\n</ul>\n</li>\n<li>Babel\n<ul>\n<li><a href=\"https://github.com/babel/babel/pull/13195\">Parse string export names by default (<code>moduleStringNames</code>) by nicolo-ribaudo · Pull Request #13195 · babel/babel</a></li>\n<li><a href=\"https://babeljs.io/blog/2020/10/15/7.12.0#imports-and-exports-with-string-names-12091httpsgithubcombabelbabelpull12091\">7.12.0 Released: TypeScript 4.1, strings as import/export names, and class static blocks · Babel</a></li>\n</ul>\n</li>\n<li>MDN\n<ul>\n<li><a href=\"https://developer.mozilla.org/ja/docs/Glossary/Identifier\">Identifier (識別子) - MDN Web Docs 用語集: ウェブ関連用語の定義</a></li>\n<li><a href=\"https://developer.mozilla.org/ja/docs/Web/API/USVString\">USVString - Web API | MDN</a></li>\n</ul>\n</li>\n<li>ECMA262\n<ul>\n<li><a href=\"https://tc39.es/ecma262/#prod-ImportSpecifier\">ImportSpecifier · ECMAScript® 2022 Language Specification</a></li>\n<li><a href=\"https://tc39.es/ecma262/#prod-ExportSpecifier\">ExportSpecifier · ECMAScript® 2022 Language Specification</a></li>\n<li><a href=\"https://tc39.es/ecma262/#prod-ModuleExportName\">ModuleExportName · ECMAScript® 2022 Language Specification</a></li>\n<li><a href=\"https://tc39.es/ecma262/#sec-isstringwellformedunicode\">IsStringWellFormedUnicode · ECMAScript® 2022 Language Specification</a></li>\n</ul>\n</li>\n<li>Unicode\n<ul>\n<li><a href=\"https://www.unicode.org/glossary/#well_formed_code_unit_sequence\">Well-Formed Code Unit Sequence · Glossary of Unicode Terms</a></li>\n</ul>\n</li>\n<li>WebAssembly\n<ul>\n<li><a href=\"https://github.com/WebAssembly/esm-integration\">WebAssembly/esm-integration: ECMAScript module integration</a></li>\n<li><a href=\"https://webassembly.github.io/spec/core/text/values.html#names\">Values — WebAssembly 1.1 (Draft 2021-12-02)</a></li>\n<li><a href=\"https://github.com/WebAssembly/esm-integration/issues/39\">ESM isn't suited for importing objects containing non-JavaScript identifiers · Issue #39 · WebAssembly/esm-integration</a></li>\n</ul>\n</li>\n</ul>\n","metaData":{"title":"なぜ ES2022 で文字列リテラルを使った import/export ができるようになるのか","author":"sosukesuzuki","createdAt":"2021-12-06","summary":"ES2022 に含まれる予定の、識別子ではなく文字列リテラルを使って import/export できるようになる ECMAScript の仕様変更について解説します","tags":["ECMAScript"],"updatedAt":"2021-12-06"}},{"slug":"release-chrome-96","content":"<p>Chrome 96 のリリースノート関連の情報をまとめました。</p>\n<ul>\n<li><a href=\"https://developer.chrome.com/blog/new-in-chrome-96/\">https://developer.chrome.com/blog/new-in-chrome-96/</a></li>\n<li><a href=\"https://developer.chrome.com/blog/new-in-devtools-96/\">https://developer.chrome.com/blog/new-in-devtools-96/</a></li>\n<li><a href=\"https://developer.chrome.com/blog/deps-rems-96/\">https://developer.chrome.com/blog/deps-rems-96/</a></li>\n<li><a href=\"https://www.chromestatus.com/features#milestone%3D96\">https://www.chromestatus.com/features#milestone%3D96</a></li>\n<li><a href=\"https://v8.dev/blog/v8-release-96\">https://v8.dev/blog/v8-release-96</a></li>\n</ul>\n<h2>New In Chrome (Chrome 96)</h2>\n<p>Chrome 96で新しく追加された機能です。</p>\n<h3>Manifest id for PWAs</h3>\n<p>今まではPWAをインストールする際、ブラウザ側でPWAを一意に識別するための明確な方法が存在しておらず、ブラウザの判断に委ねられていました。(実際ブラウザによってPWAマニフェストファイルの<code>start_url</code>が利用されていたり、マニフェストファイル自体のパスなどが利用されたりしています)</p>\n<p>今回のアップデートにより、マニフェストファイル内でPWAの識別子を<code>id</code>プロパティとして明示的に定義できるようになりました。</p>\n<p>マニフェストに<code>id</code>プロパティを追加すると、マニフェストファイルの<code>start_url</code>プロパティやマニフェストファイル場所へ依存がなくなり、これらのフィールドを更新することが容易になります。</p>\n<h4>サポート状況と予定</h4>\n<p>デスクトップのChromium搭載ブラウザ</p>\n<ul>\n<li>Chrome 96からidプロパティがサポートされます。</li>\n</ul>\n<p>モバイルブラウザ(マニフェストファイルのURLをユニークIDとして使用しているもの)</p>\n<ul>\n<li>2022年前半にサポートが開始される予定です。</li>\n</ul>\n<h4>idプロパティの追加について</h4>\n<p>すでに運用しているPWAのマニフェストファイルにidを追加する場合</p>\n<ul>\n<li>ブラウザから割り当てられたIDを使用する必要があります。</li>\n<li>割り当てられているID は、Dev Tools の <code>Application</code> パネルの <code>Manifest</code> ペインで確認できます。</li>\n</ul>\n<p>新しくPWAを作成する場合</p>\n<ul>\n<li>idプロパティに好きな文字列を設定することができますが、将来的に変更することはできないので慎重に選んでください。</li>\n</ul>\n<h3>URL protocol handlers for PWAs</h3>\n<p>今までwebページで利用可能だった<code>URL protocol handler</code>の登録がChrome 96からはPWAでもインストール時に行えるようになりました。</p>\n<p>PWAの場合は以下のように<code>protocol_handlers</code>プロパティをマニフェストファイルに記載することで登録できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  ...\n  <span class=\"token property\">\"protocol_handlers\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"protocol\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"web+tea\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/tea?type=%s\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"protocol\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"web+coffee\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/coffee?type=%s\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>それぞれ、<code>protocol</code>には登録したいプロトコル名を、<code>url</code>にはそのプロトコルのURLをクリックしたときに開いてほしいURLを指定します。ただし、これらのプロトコル登録にはいくつかの制限があります。詳細や登録方法などは<a href=\"https://web.dev/url-protocol-handler/\">こちら</a>を参照してください。</p>\n<h3>Priority hints (origin trial)</h3>\n<p>ブラウザがページ内リソース(<code>image</code>,<code>script</code>,<code>CSS</code>)を読み込む際の優先度ヒントを追加できる機能がOrigin Trialsとして実験的に利用できるようになりました。</p>\n<p>具体的には以下のような形で対象となるリソースに<code>importance</code>属性で優先度(<code>high</code>,<code>low</code>,<code>auto</code>から選択)を指定します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&#x3C;!-- We don't want a high priority for this above-the-fold image --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/not-important.svg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">importance</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>low<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">&#x3C;!-- Initiate an early fetch for a resource, but de-prioritize it --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>preload<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/script.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">as</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>script<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">importance</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>low<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://example.com/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>importance<span class=\"token operator\">:</span> <span class=\"token string\">'high'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Trigger a high priority fetch</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>script</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<p>今回のリリースノートでは Google Flights ページで、<code>Priority hitns</code> の有無におけるLCP(最大視覚コンテンツの表示時間)の比較を行った結果を紹介しています。この比較では背景画像の<code>img</code>タグに対して<code>importance=\"high\"</code>を指定することでLCPが 2.6s から 1.9s に向上したとしています。</p>\n<p>機能詳細やOrigin Trialとして登録する方法、サンプルなどについては<a href=\"https://web.dev/priority-hints/\">Optimizing resource loading with Priority Hints</a>を参考にしてください。</p>\n<h3>Emulate Chrome 100 in the UA string</h3>\n<p>来年の早い段階でChromeはバージョン100がリリースされる予定であり、これ以降３桁のバージョン番号に突入します。そのため、バージョン番号を利用しているコードや<code>UserAgent</code>をパースしているコードが３桁のバージョン番号でも正しく動作することを保証する必要があります。</p>\n<p>これらを検証するためChrome 96では<code>#force-major-version-to-100</code>というフラグが追加されました。このフラグを有効にするとChromeのバージョンだけが100になった状態をシミュレートすることができ、バージョン番号を扱う動作に問題がないかの検証を行うことができます。</p>\n<p>詳しくは <a href=\"https://developer.chrome.com/blog/force-major-version-to-100/\">Force Chrome major version to 100 in the User-Agent string.</a> を参照してください。</p>\n<h3>Chrome Dev Summit</h3>\n<p>Chrome Dev Summitにおけるすべての動画やコンテンツはオンラインで視聴可能です。詳しくは <a href=\"https://developer.chrome.com/devsummit/\">Chrome Dev Summit site</a> をご覧ください。またkeynoteや配信を見逃した方はChrome Developers YouTube Channelの <a href=\"https://www.youtube.com/playlist?list=PLNYkxOF6rcIBju4hD9ed1pt6YO20LgLWg\">CDS Playlist</a> を合わせて参照してください。</p>\n<h3>その他</h3>\n<p><code>Back/forward cache</code>の機能が<code>stable</code>になりました。</p>\n<ul>\n<li>これによりFireFoxやSafariと挙動を揃えることができるようになりました。</li>\n</ul>\n<h2>What's New In DevTools (Chrome 96)</h2>\n<p>DevTools についてはこちらの日本語訳を参照ください。</p>\n<p><a href=\"https://developer.chrome.com/ja/blog/new-in-devtools-96/\">https://developer.chrome.com/ja/blog/new-in-devtools-96/</a></p>\n<h2>Deprecations and removals in Chrome 96</h2>\n<p>Chrome96で非推奨になったもの、もしくは削除されたものです<br>\n<a href=\"https://developer.chrome.com/blog/deps-rems-96/\">https://developer.chrome.com/blog/deps-rems-96/</a></p>\n<h3>The \"basic-card\" method of PaymentRequest API</h3>\n<p>PaymentRequestを呼び出すときに指定できる<code>basic card</code>method(ブラウザで保存されているカード情報を使う方法)が非推奨になります。</p>\n<p>Chrome 96では<code>basic card</code>を使っているとDevToolsのConsoleにwarningメッセージが表示されます。また、Chrome 100では利用できなくなります。<code>basic card</code>を使っている場合は別のmethodに変更するように早めに対応したほうが良さそうです。</p>\n<p><a href=\"https://blog.chromium.org/2021/10/sunsetting-basic-card-payment-method-in.html\">https://blog.chromium.org/2021/10/sunsetting-basic-card-payment-method-in.html</a></p>\n<h2>その他Chrome Platform Statusに記載されていたもの</h2>\n<p><a href=\"https://www.chromestatus.com/features#milestone%3D96\">https://www.chromestatus.com/features#milestone%3D96</a></p>\n<h3>Adding captureTimestamp and senderCaptureTimeOffset to RTCRtpContributingSource.</h3>\n<p>WebRTC APIの一つである<code>RTCRtpContributingSource</code>にオーディオとビデオフレームの同期やend-to-endの遅延が測定できる<code>captureTimestamp</code>と<code>senderCaptureTimeOffset</code>プロパティが追加されます。</p>\n<p><a href=\"https://www.chromestatus.com/feature/5728533701722112\">https://www.chromestatus.com/feature/5728533701722112</a></p>\n<h3>CSS @counter-style descriptor 'speak-as'</h3>\n<p><code>@counter-style</code>を使った際にカウンターが音声形式でどのように表されるかを指定できるプロパティ<code>speak-as</code>が追加予定で、現状は<code>In developer trial</code>で試験運用中です。</p>\n<p><a href=\"https://www.chromestatus.com/feature/5687059677184000\">https://www.chromestatus.com/feature/5687059677184000</a>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@counter-style/speak-as\">https://developer.mozilla.org/en-US/docs/Web/CSS/@counter-style/speak-as</a></p>\n<h3>Clipboard: Preserve PNG metadata</h3>\n<p>クリップボードからPNGを読み込む際にサニタイズされなくなります。\n(前まではメタデータを削除していました)</p>\n<p><a href=\"https://www.chromestatus.com/feature/5629962485760000\">https://www.chromestatus.com/feature/5629962485760000</a></p>\n<h3>Cross-Origin-Embedder-Policy: credentialless</h3>\n<p>COEPに<code>credentialless</code>が追加できるようになりました。\n<code>credentialless</code>を指定するとサーバーへのリクエスト時に認証方法(CookieやAuthorizationヘッダなど)が省かれるようになります。</p>\n<p><a href=\"https://www.chromestatus.com/feature/4918234241302528\">https://www.chromestatus.com/feature/4918234241302528</a></p>\n<p>参考: SharedArrayBuffer と過渡期な cross-origin isolation の話\n<a href=\"https://blog.agektmr.com/2021/11/cross-origin-isolation.html\">https://blog.agektmr.com/2021/11/cross-origin-isolation.html</a></p>\n<h3>Disable propagation of body style to viewport when contained</h3>\n<p>ルートやbody要素に<code>contain: none</code>以外の値を使用するとbodyからのCSSプロパティの伝搬が無効になります。\n<a href=\"https://www.chromestatus.com/feature/5663240823504896\">https://www.chromestatus.com/feature/5663240823504896</a></p>\n<h3>EME MediaKeySession Closed Reason</h3>\n<p>MediaKeySessionのcloseメソッドが<code>MediaKeySessionClosedReason</code>を返すようになります。\nsessionが閉じられた理由(<code>internal-error</code>, <code>closed-by-application</code>など)を取得してハンドリングできるようになります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> keySystemAccess <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token dom variable\">navigator</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">requestMediaKeySystemAccess</span><span class=\"token punctuation\">(</span>\n<span class=\"token comment\">//   ...</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Create media keys.</span>\n<span class=\"token keyword\">const</span> mediaKeys <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> keySystemAccess<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createMediaKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Create a key session.</span>\nkeySession <span class=\"token operator\">=</span> mediaKeys<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Generate a fake license request.</span>\n<span class=\"token keyword control-flow\">await</span> keySession<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">generateRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"webm\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nkeySession<span class=\"token punctuation\">.</span><span class=\"token property-access\">closed</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// Reason is either undefined if not supported, \"internal-error\",</span>\n<span class=\"token comment\">// \"closed-by-application\", \"release-acknowledged\",</span>\n<span class=\"token comment\">// \"hardware-context-reset\", or \"resource-evicted\".</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Media key session was closed. Reason: \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>reason<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\".</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><a href=\"https://www.chromestatus.com/feature/5632124143009792\">https://www.chromestatus.com/feature/5632124143009792</a></p>\n<p>参考: EME MediaKeySession Closed Reason Sample\n<a href=\"https://googlechrome.github.io/samples/media/key-session-closed-reason.html\">https://googlechrome.github.io/samples/media/key-session-closed-reason.html</a></p>\n<h3>HTTP->HTTPS redirect for HTTPS DNS records</h3>\n<p>DNSのHTTPSレコードを従来のAレコードやAAAAレコードと一緒に照会し、解析するようになります。\nHTTPSレコードを追加し、Chromeがそれを受信するとChromeは常にそのウェブサイトにHTTPSで接続します。</p>\n<p><a href=\"https://www.chromestatus.com/feature/5485544526053376\">https://www.chromestatus.com/feature/5485544526053376</a></p>\n<h3>InteractionID in EventTiming</h3>\n<p>Event Timing APIのPerformanceEventTimingに<code>interactionId</code>が追加されました。\nユーザーの操作に対して関連するイベント(たとえばユーザーがタップした時にはpointerdown→mousedown→pointerup→mouseup→clickのイベントが発生する)は<code>interactionId</code>が同じになります。</p>\n<p><a href=\"https://www.chromestatus.com/feature/5674224959094784\">https://www.chromestatus.com/feature/5674224959094784</a></p>\n<h3>Media Queries: prefers-contrast feature</h3>\n<p>OSが設定している色のコントラスト設定に対応するメディアクエリ<code>prefers-contrast</code>が追加されました。</p>\n<div class=\"remark-highlight\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\"><span class=\"token class\">.contrast</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">prefers-contrast</span><span class=\"token punctuation\">:</span> more<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\"><span class=\"token class\">.contrast</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* OSでコントラストの設定が高い場合に適応される */</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">prefers-contrast</span><span class=\"token punctuation\">:</span> less<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\"><span class=\"token class\">.contrast</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* OSでコントラストの設定が低い場合に適応される */</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><a href=\"https://www.chromestatus.com/feature/5646323212615680\">https://www.chromestatus.com/feature/5646323212615680</a></p>\n<p>参考: prefers-contrast(MDN)<br>\n<a href=\"https://developer.mozilla.org/ja/docs/Web/CSS/@media/prefers-contrast\">https://developer.mozilla.org/ja/docs/Web/CSS/@media/prefers-contrast</a></p>\n<h3>Support calc(<code>&#x3C;number></code>) where only accepts <code>&#x3C;integer></code></h3>\n<p>cssの<code>calc()</code>関数でintegerしか受け取らないような場所でもnumberを指定できるようになりました。\nもっとも近い整数に丸められます。</p>\n<p>例えば、下記はいずれも<code>column-count: 1</code>と同義です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\"><span class=\"token class\">.example</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">column-count</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">column-count</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><a href=\"https://www.chromestatus.com/feature/5656451751084032\">https://www.chromestatus.com/feature/5656451751084032</a></p>\n<p>参考:\n<a href=\"https://drafts.csswg.org/css-values-4/#calc-range\">https://drafts.csswg.org/css-values-4/#calc-range</a></p>\n<h2>V8 release v9.6</h2>\n<p>V8のアップデート情報です。</p>\n<h3>WebAssembly : Reference Types</h3>\n<p>WebWebAssemblyでプロポーザルとして提案されている<a href=\"https://github.com/WebAssembly/reference-types/blob/master/proposals/reference-types/Overview.md\">Reference Type</a>がV8 v9.6からサポートされます。\n現状、WASMの関数は引数や戻り値に、整数や浮動小数点数といったプリミティブな型しか扱えませんが、<code>Reference Types</code>機能はこれに加えて、JavaScriptオブジェクトへの参照を渡せるようにしたものです。</p>\n","metaData":{"title":"Chrome 96 リリースノートまとめ","author":"Saji","editor":"nus3","createdAt":"2021-12-02","summary":"Chrome 96 のリリースノートの要約です","tags":["Releasenote","Browser"],"updatedAt":"2021-12-02"}},{"slug":"storybook-interactive-stories","content":"<p><a href=\"https://github.com/storybookjs/storybook/releases/tag/v6.4.0\">Storybook の 6.4.0 がリリース</a>され、<code>Interactive stories</code>が新機能として追加されました。詳細は<a href=\"https://storybook.js.org/blog/interactive-stories-beta/\">Storybook のブログ</a>でも記載されています。</p>\n<h2>概要</h2>\n<p>Interactive stories の Addon を追加すると、testing-library で定義した操作を Storybook 上で確認することができるようになります。</p>\n<p>次の gif のようにユーザー操作に対するコンポーネントの状態を UI(Addon)からステップごとに確認できます。</p>\n<p><img src=\"/frontend-expert/image/storybook-interactive-stories/capture.gif\" alt=\"Interactive addonを使った例\" width=\"360\" height=\"240\" ></p>\n<h2>導入手順</h2>\n<ol>\n<li>パッケージを追加する</li>\n<li>Storybook の<code>main.js</code>に設定を追加する</li>\n<li>Interactive stories 用の story を<code>stories.tsx</code>に追加する</li>\n</ol>\n<h3>1. パッケージを追加する</h3>\n<p>Interactive addon を利用するには次のパッケージが必要です。<br>\n(今回は React のコンポーネントを対象としています)</p>\n<ul>\n<li>@storybook/addon-interactions</li>\n<li>@storybook/react</li>\n<li>@storybook/testing-library</li>\n</ul>\n<p>次のコマンドを実行してインストールします。</p>\n<p><code>npm i -D @storybook/addon-interactions @storybook/react @storybook/testing-library</code></p>\n<p>今回試したバージョンは次になります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@storybook/addon-interactions\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"6.4.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@storybook/react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"6.4.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@storybook/testing-library\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.7\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>2. Storybook の<code>main.js</code>に設定を追加する</h3>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  stories<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"../src/components/**/**/*.stories.@(js|jsx|ts|tsx)\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  addons<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"@storybook/addon-interactions\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// addonの追加</span>\n  features<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    interactionsDebugger<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Interactive storiesをaddonで1ステップずつ確認できるようにするのに必要</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>3. Interactive stories 用の story を<code>stories.tsx</code>に追加する</h3>\n<p>例えば、次のサンプルコードでは Storybook 上にマウントされたコンポーネントに対して、<code>Add</code>のラベルがついたボタンを 4 回クリックした後に<code>Reset</code>のボタンをクリックする story を<code>@storybook/testing-library</code>を使って追加しています。</p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// Interactive storiesに関係ある部分しか記載してません</span>\n<span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> within<span class=\"token punctuation\">,</span> userEvent <span class=\"token punctuation\">}</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@storybook/testing-library\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">Template</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Story</span><span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">ExampleComponentProps</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">ExampleComponent</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">args</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">Default</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">Template</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token maybe-class-name\">Default</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">play</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> canvasElement <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> canvas <span class=\"token operator\">=</span> <span class=\"token function\">within</span><span class=\"token punctuation\">(</span>canvasElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> userEvent<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">click</span><span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Add\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> userEvent<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">click</span><span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Add\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> userEvent<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">click</span><span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Add\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> userEvent<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">click</span><span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Add\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> userEvent<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">click</span><span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Reset\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>Default.play = async ({ canvasElement }) => {</code>は Storybook6.4 でサポートされる<a href=\"https://storybook.js.org/blog/component-story-format-3-0/\">CSF3</a>の構文です。<br>\nまた、まだ v0.5 ですが Storybook から<a href=\"https://github.com/storybookjs/eslint-plugin-storybook\">eslint-plugin</a>も提供されているので、併せて試してみても良さそうです。</p>\n<p>Interactive stories の addon を追加した Storybook を GitHub Pages でホスティングしたので、実際に触ってみたい方は次のリンクへ。<br>\n<a href=\"https://nus3.github.io/p-storybook/?path=/story/components-examplecomponent--default\">https://nus3.github.io/p-storybook/?path=/story/components-examplecomponent--default</a></p>\n<p>Storybook 上で複雑な操作があるコンポーネントのデバッグや共有がしやすくなりそうですね。</p>\n<h2>参考リンク</h2>\n<ul>\n<li><a href=\"https://storybook.js.org/blog/interactive-stories-beta/\">https://storybook.js.org/blog/interactive-stories-beta/</a></li>\n<li><a href=\"https://storybook.js.org/blog/component-story-format-3-0/\">https://storybook.js.org/blog/component-story-format-3-0/</a></li>\n<li><a href=\"https://github.com/nus3/p-storybook\">実際に実装したリポジトリ</a></li>\n</ul>\n","metaData":{"title":"Interactive storiesを使ってStorybook上でユーザー操作の状態を確認する","author":"nus3","editor":["nakajmg","sakito"],"createdAt":"2021-11-29","summary":"Storybookに新しく追加されたInteractive storiesについて紹介します","tags":["Storybook"],"updatedAt":"2021-11-29"}},{"slug":"release-chrome-95","content":"<p>Chrome 95 のリリースノート関連の情報をまとめました。</p>\n<ul>\n<li><a href=\"https://developer.chrome.com/blog/new-in-chrome-95/\">https://developer.chrome.com/blog/new-in-chrome-95/</a></li>\n<li><a href=\"https://developer.chrome.com/blog/new-in-devtools-95/\">https://developer.chrome.com/blog/new-in-devtools-95/</a></li>\n<li><a href=\"https://developer.chrome.com/blog/deps-rems-95/\">https://developer.chrome.com/blog/deps-rems-95/</a></li>\n<li><a href=\"https://www.chromestatus.com/features#milestone%3D95\">https://www.chromestatus.com/features#milestone%3D95</a></li>\n</ul>\n<h2>Routing with URLPattern</h2>\n<p><code>URLPattern</code>という機能が追加されました。現在は Chrome、Edge の 95 以上に対応しています。</p>\n<p>他のブラウザや Node.js ではまだサポートされていない機能ですが、<a href=\"https://github.com/kenchris/urlpattern-polyfill\">urlpattern-polyfill</a>で polyfill できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> pattern <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLPattern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> pathname<span class=\"token operator\">:</span> <span class=\"token string\">\"/books/:id\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://example.com/books/123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://example.com/books/123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">pathname</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">groups</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { id: '123' }</span>\n\n<span class=\"token comment\">// 引数で渡せる全てのプロパティ</span>\n<span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLPattern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  protocol<span class=\"token operator\">:</span> <span class=\"token string\">\"http{s}?\"</span><span class=\"token punctuation\">,</span>\n  username<span class=\"token operator\">:</span> <span class=\"token string\">\":username\"</span><span class=\"token punctuation\">,</span>\n  password<span class=\"token operator\">:</span> <span class=\"token string\">\":password\"</span><span class=\"token punctuation\">,</span>\n  hostname<span class=\"token operator\">:</span> <span class=\"token string\">\":subdomain.example.com\"</span><span class=\"token punctuation\">,</span>\n  port<span class=\"token operator\">:</span> <span class=\"token string\">\":port(80|443)\"</span><span class=\"token punctuation\">,</span>\n  pathname<span class=\"token operator\">:</span> <span class=\"token string\">\"/:path\"</span><span class=\"token punctuation\">,</span>\n  search<span class=\"token operator\">:</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span>\n  hash<span class=\"token operator\">:</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>詳細はこちら\n<a href=\"https://web.dev/urlpattern/\">https://web.dev/urlpattern/</a></p>\n<h2>Picking colors with the Eye Dropper API</h2>\n<p>カラーを取得する Eye Dropper API が追加されました</p>\n<p>詳細はこちらの記事で解説しています。</p>\n<p><a href=\"https://cybozu.github.io/frontend-expert/posts/eyedropper-api\">Chrome 95 で追加された画面上の色を取得する EyeDropper API について</a></p>\n<h2>PWA Summit</h2>\n<p>10 月 6~7 日に PWA Summit が開催されてました<br>\n見逃した方はアーカイブが下記のリンクに残ってるので、そこから確認できます</p>\n<p><a href=\"https://pwasummit.org/\">https://pwasummit.org/</a><br>\n<a href=\"https://www.youtube.com/channel/UC1j3gvdVISAEO1_2MwA5oQw/videos\">https://www.youtube.com/channel/UC1j3gvdVISAEO1_2MwA5oQw/videos</a></p>\n<h2>User-agent reduction origin trial</h2>\n<p>Origin Trial で実際に User-Agent の文字列が削減された後の挙動が試せます</p>\n<p>参考:</p>\n<ul>\n<li><a href=\"https://web.dev/user-agent-client-hints/\">User-Agent Client Hints によるユーザーのプライバシーと開発者体験の改善</a></li>\n<li><a href=\"https://developers-jp.googleblog.com/2021/09/chrome-user-agent.html\">User-Agent Reduction origin trial(日本語訳)</a></li>\n</ul>\n<h2>And more!</h2>\n<ul>\n<li>Storage Foundation API を origin trial で試せます</li>\n<li>WebAssembly で例外処理のサポートが提供され、例外がスローされたときにコードが中断できるようになります</li>\n<li>Chrome 100 が来年きます。バージョンが 2 桁から 3 桁になるので、自分のコードに何らかの影響があるかどうかを確認するといいかもしれません</li>\n</ul>\n<h2>DevTools</h2>\n<p>DevTools についてはこちらの日本語訳を参照ください。</p>\n<p><a href=\"https://developer.chrome.com/ja/blog/new-in-devtools-95/\">https://developer.chrome.com/ja/blog/new-in-devtools-95/</a></p>\n<h2>Deprecations and removals in Chrome 95</h2>\n<p>Chrome 95 で非推奨になったもの、もしくは削除されたものです。</p>\n<h3>Support for URLs with non-IPv4 hostnames ending in numbers</h3>\n<p>有効な IPv4 アドレスではない、 <code>http://foo.127.1/</code> のような数字で終わる host name を持つ URL が拒否されるようになります。</p>\n<p>社内のプレビュー環境などで IP アドレスをポストフィックスとして利用してたりする場合は影響がでているかもしれません。</p>\n<h3>WebAssembly cross-origin module sharing</h3>\n<p>cross-originでsame-siteな環境間でのWebAssemblyモジュールの共有が非推奨になりました\n<a href=\"https://www.chromestatus.com/feature/5650158039597056\">https://www.chromestatus.com/feature/5650158039597056</a></p>\n<p>合わせてこちらも参考にしてください<br>\n<a href=\"https://developer.chrome.com/blog/wasm-module-sharing-restricted-to-same-origin/\">Restricting Wasm module sharing to same-origin</a></p>\n<h3>Deprecate U2F API (Cryptotoken)</h3>\n<p>U2F API が非推奨になり、Chrome 98 からはデフォルトで無効になります。</p>\n<p>U2F とはなんぞやという人はこちらの記事が参考になります。</p>\n<p><a href=\"https://blog.jxck.io/entries/2018-05-15/webauthentication-api.html\">Web Authentication API で FIDO U2F(YubiKey) 認証 | blog.jxck.io</a></p>\n<h2>その他 Chrome Platform Status に記載されていたもの</h2>\n<blockquote>\n<p><a href=\"https://www.chromestatus.com/features#milestone=95\">https://www.chromestatus.com/features#milestone=95</a></p>\n</blockquote>\n<h3>Back-forward cache for same-site navigations on Android</h3>\n<p>Chrome 86 から origin trial で試せていた Android での戻る/進むのキャッシュが same-site で効くようになりました。<br>\n<a href=\"https://www.chromestatus.com/feature/5694778600587264\">https://www.chromestatus.com/feature/5694778600587264</a></p>\n<p>bfcache(Back/forward cache)については下記に詳細の説明が載っています。<br>\n<a href=\"https://web.dev/bfcache/\">https://web.dev/bfcache/</a></p>\n<h3>CSS @counter-style rules in shadow trees</h3>\n<p>Shadow tree に対してカスタムの counter-style を定義することができるようになりました。<br>\n<a href=\"https://www.chromestatus.com/feature/5716198446596096\">https://www.chromestatus.com/feature/5716198446596096</a></p>\n<p><code>@counter-style</code>については下記を参考ください</p>\n<div class=\"remark-highlight\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@counter-style</span> circled-alpha</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">system</span><span class=\"token punctuation\">:</span> fixed<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">symbols</span><span class=\"token punctuation\">:</span> Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">suffix</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\"><span class=\"token class\">.items</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">list-style</span><span class=\"token punctuation\">:</span> circled-alpha<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>このスタイルを当てた list を作ると次のようなリストができます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">Ⓐ One\nⒷ Two\nⒸ Three\nⒹ Four\nⒺ FIve</code></pre></div>\n<p><a href=\"https://developer.mozilla.org/ja/docs/Web/CSS/@counter-style#specifying_symbols_with_counter-style\">https://developer.mozilla.org/ja/docs/Web/CSS/@counter-style#specifying_symbols_with_counter-style</a></p>\n<h3>Cookie size limits</h3>\n<p>Set-Cookie header、及び、document.cookie、CookieStore で設定される Cookie のサイズが制限されます。\n具体的には Cookie の名前と値の合計が 4096 バイトまでになり、Cookie の各属性値は 1024 バイトに制限する必要があります。</p>\n<p><a href=\"https://www.chromestatus.com/feature/4946713618939904\">https://www.chromestatus.com/feature/4946713618939904</a></p>\n<h3>Logical properties for contain-intrinsic-size</h3>\n<p>contain-intrinsic-size を省略した次の表記が追加されます。</p>\n<ul>\n<li>contain-intrinsic-{width,height}</li>\n<li>contain-intrinsic-{inline,block}-size</li>\n</ul>\n<p><a href=\"https://www.chromestatus.com/feature/5709654999957504\">https://www.chromestatus.com/feature/5709654999957504</a></p>\n<p>参考:</p>\n<p><a href=\"https://drafts.csswg.org/css-sizing-4/#intrinsic-size-override\">https://drafts.csswg.org/css-sizing-4/#intrinsic-size-override</a></p>\n<h3>contain-intrinsic-size</h3>\n<p>content-visibility で指定された要素の自然なサイズを制御するプロパティです。</p>\n<p>次の実装は画面外の section のレンダリングをスキップする例です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n<span class=\"token selector\">section</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">content-visibility</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">contain-intrinsic-size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token number\">500</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>style</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<p>ビューポート外のコンテンツはレンダリングされなくなります。</p>\n<p><a href=\"https://developer.mozilla.org/ja/docs/Web/CSS/content-visibility\">https://developer.mozilla.org/ja/docs/Web/CSS/content-visibility</a></p>\n<h3>New UA platform version source on Windows for User-Agent Client Hints</h3>\n<p>Windows の Sec-CH-UA-Platform-Version(User-Agent Client Hints)で返されるバージョンが Windows プラットフォームの違いを識別できるように更新されました。</p>\n<p><a href=\"https://www.chromestatus.com/feature/5080939765956608\">https://www.chromestatus.com/feature/5080939765956608</a><br>\n<a href=\"https://github.com/WICG/ua-client-hints/issues/220#issuecomment-870858413\">https://github.com/WICG/ua-client-hints/issues/220#issuecomment-870858413</a></p>\n<h3>Note taking new note URL</h3>\n<p>Web Application Manifest が <code>note_taking</code> と <code>new_note_url</code> に対応しました。\nWeb Application 側から新しいメモを書きたい時にユーザーエージェントに読み込ませたい URL を指定できるようになります。</p>\n<p><a href=\"https://www.chromestatus.com/feature/5205972320518144\">https://www.chromestatus.com/feature/5205972320518144</a><br>\n<a href=\"https://wicg.github.io/manifest-incubations/index.html#note_taking-member\">https://wicg.github.io/manifest-incubations/index.html#note_taking-member</a></p>\n<h3>Secure payment confirmation</h3>\n<p>WebAuthn を利用して、Web 上での支払い時の認証を強化することができるようになります。</p>\n<p><a href=\"https://www.chromestatus.com/feature/5702310124584960\">https://www.chromestatus.com/feature/5702310124584960</a></p>\n<p>※ Payment Request API で簡単・高速な決済を実現する\n<a href=\"https://developers.google.com/web/updates/2016/07/payment-request?hl=ja\">https://developers.google.com/web/updates/2016/07/payment-request?hl=ja</a></p>\n<p>※ PaymentRequestAPI で secure-payment-confirmation を使った実装例\n<a href=\"https://www.w3.org/TR/2021/WD-secure-payment-confirmation-20210831/#sctn-sample-authentication\">https://www.w3.org/TR/2021/WD-secure-payment-confirmation-20210831/#sctn-sample-authentication</a></p>\n<h3>droppedEntriesCount in PerformanceObserver callback</h3>\n<p>PerformanceObserver のコールバックに droppedEntriesCount が追加されます。</p>\n<p><a href=\"https://www.chromestatus.com/feature/5320666234486784\">https://www.chromestatus.com/feature/5320666234486784</a></p>\n<p>PerformanceObserver<br>\n<a href=\"https://developer.mozilla.org/ja/docs/Web/API/PerformanceObserver\">https://developer.mozilla.org/ja/docs/Web/API/PerformanceObserver</a></p>\n<h3>self.reportError()</h3>\n<p>キャッチされない例外をレポートする<code>self.reportError()</code>が追加されます。\n<a href=\"https://www.chromestatus.com/feature/5634523220934656\">https://www.chromestatus.com/feature/5634523220934656</a></p>\n<p>以下のコードを実行するとerrorはcatchで握り潰されずに<code>Uncaught Error: foo</code>になります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addition</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    self<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reportError</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">count</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> addition<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>参考:</p>\n<ul>\n<li><a href=\"https://html.spec.whatwg.org/#runtime-script-errors\">https://html.spec.whatwg.org/#runtime-script-errors</a></li>\n</ul>\n","metaData":{"title":"Chrome 95 リリースノートまとめ","author":"nus3","editor":"nakajmg","createdAt":"2021-11-17","summary":"Chrome 95 のリリースノートの要約です","tags":["Releasenote","Browser"],"updatedAt":"2021-11-17"}},{"slug":"release-safari-15","content":"<p>先日 Safari 15 がリリースされました。\n<a href=\"https://webkit.org/blog/11989/new-webkit-features-in-safari-15/\">https://webkit.org/blog/11989/new-webkit-features-in-safari-15/</a></p>\n<p>影響の大きそうな箇所や、知っておいたほうが良さそうな箇所を中心に紹介します。</p>\n<h2>HTML</h2>\n<h3>theme-color</h3>\n<p>meta タグ上での <code>theme-color</code> のサポートが追加されました。\n指定することで、ブラウザのメニューバーやタブバーといった領域のカラーを変更することができます。 <code>prefers-color-scheme</code> と併用することで、ダークモード/ライトモードに応じた色の指定もできます。</p>\n<p><a href=\"https://developer.apple.com/videos/play/wwdc2021/10029/\">Design for Safari 15</a></p>\n<h2>CSS</h2>\n<h3><code>aspect-ratio</code> プロパティのサポート</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio\">aspect-ratio - CSS: Cascading Style Sheets | MDN</a></p>\n<h3><code>lab()</code> <code>lch()</code> <code>hwb()</code> シンタックスのサポート</h3>\n<p><a href=\"https://www.w3.org/TR/css-color-4/\">W3C Color Module Level 4</a>に沿った新しいカラーシンタックス <code>lab()</code> <code>lch()</code> <code>hwb()</code> が利用可能になりました。</p>\n<h3>list-style-type に設定可能な値が追加</h3>\n<p>li 要素など、リストアイテム要素のマーカーを指定するための <code>list-style-type</code> 新たに 12 個の値が設定可能になりました。</p>\n<p>MDN のデモで値に応じた表示を確認することができます。</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type#result_2\">https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type#result_2</a></p>\n<h2>Web Inspector</h2>\n<p>CSS Grid に対応したオーバレイ表示が可能になりました。</p>\n<p><a href=\"https://webkit.org/blog/11588/introducing-css-grid-inspector/\">https://webkit.org/blog/11588/introducing-css-grid-inspector/</a></p>\n<p>デバッグ用のブレークポイント周りなどにも改善が施されています。その他の変更点は WWDC2021 の発表動画に含まれます。</p>\n<p><a href=\"https://developer.apple.com/videos/play/wwdc2021/10031/\">Discover Web Inspector improvements - WWDC21 - Videos - Apple Developer</a></p>\n<h2>JavaScript and WebAssembly</h2>\n<p>Worker や ServiceWorker で ES6 Modules のサポートが追加されました。</p>\n<p>また、JavaScript エンジンで次の機能がサポートされました。</p>\n<ul>\n<li>top-level <code>await</code></li>\n<li><code>Error.cause</code></li>\n<li>プライベートクラスメソッド とアクセサ</li>\n<li><code>BigInt64Array</code> および <code>BigUint64Array</code></li>\n</ul>\n<p>WebAssembly では次のサポートが追加されました。</p>\n<ul>\n<li>streaming compilation</li>\n<li>bulk memory operations</li>\n<li>reference types</li>\n<li>non-trapping conversions from <code>float</code> to <code>int</code></li>\n</ul>\n<p><a href=\"https://github.com/WebAssembly/spec/tree/main/proposals\">WebAssembly/spec - proposals</a>\n<a href=\"https://developer.apple.com/videos/play/wwdc2021/10030\">Develop advanced web content - WWDC21 - Videos - Apple Developer</a></p>\n<h2>Web APIs</h2>\n<h3>WebGL2 に対応</h3>\n<p>WebGL2 に対応し、かつ Apple の グラフィック API の Metal 上で動作するようになり、パフォーマンスが向上しました。</p>\n<h3>Web Share API Level 2 の実装</h3>\n<p>Web Share API Level 2 の実装により、Web ページからアプリへのファイル共有が可能になりました。</p>\n<p><a href=\"https://developer.apple.com/videos/play/wwdc2021/10030\">Develop advanced web content - WWDC21 - Videos - Apple Developer</a></p>\n<h2>Media</h2>\n<ul>\n<li>MediaSession API のサポートの追加</li>\n</ul>\n<p><a href=\"https://developer.apple.com/videos/play/wwdc2021/10189/\">Coordinate media playback in Safari with Group Activities - WWDC21 - Videos - Apple Developer</a></p>\n<h2>Security and Privacy</h2>\n<h3>自動 HTTPS アップグレードのサポート</h3>\n<p>http と https の双方が利用可能なページの場合、自動で https を利用するようになります。</p>\n<h2>所感</h2>\n<p><code>aspect-ratio</code> が 主要 4 ブラウザ(Chrome/Safari/Firefox/Edge)すべてで利用可能になりましたね。今後利用するケースが徐々に増えていきそうです。</p>\n<p>余談ですが、<code>list-style-type</code> に <code>japanese-formal</code> を指定すると <code>壱・弐・参・四・伍…</code> になるのですね。カッコいいです。</p>\n","metaData":{"title":"Safari 15 の新機能とかまとめ","author":"mugi","editor":"nakajmg","createdAt":"2021-11-16","summary":"先日 Safari 15 がリリースされました。影響の大きそうな箇所や、知っておいたほうが良さそうな箇所を中心に紹介します。","tags":["Releasenote","Browser"],"updatedAt":"2021-11-16"}},{"slug":"ergonomic-brand-checks-for-private-fields","content":"<p>2021年7月に行われた TC39 ミーティングで <a href=\"https://github.com/tc39/proposal-private-fields-in-in\">Ergonomic brand checks for Private Fields</a> というプロポーザルが Stage 4 になりました。\nこのプロポーザルは、ES2022 に含まれる予定です。また、<a href=\"https://devblogs.microsoft.com/typescript/announcing-typescript-4-5-rc/#private-field-presence-checks\">TypeScript 4.5 にも含まれる予定です</a>。</p>\n<p>この記事では、Ergonomic brand checks for Private Fields について解説します。</p>\n<h2>概要</h2>\n<p>Ergonomic brand checks for Private Fields は、<code>in</code> 演算子を使ったプライベートフィールドの有無の判定を可能にするプロポーザルです。</p>\n<h3>現在の <code>in</code> 演算子</h3>\n<p><code>in</code> 演算子は、オブジェクトが特定の名前のプロパティを持っているかどうかを判定するための二項演算子です。\n左辺にプロパティの名前、右辺にオブジェクトを受け取ります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> prop1<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prop1\"</span> <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<h3>新しい <code>in</code> 演算子</h3>\n<p>Ergonomic brand checks for Private Fields では、この <code>in</code> 演算子を拡張し、左辺に Private Identifier を取れるようになります。</p>\n<p>Private Identifier は <code>#foo</code> のような形をした特別な識別子で、クラスのプライベートフィールドを表現するのに使われます。</p>\n<p>たとえば、次のコードではクラス <code>Foo</code> は、<code>#prop1</code> というプライベートフィールドを持ちます。\nこのとき <code>#prop1</code> は Private Identifier です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n  #prop1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>拡張された <code>in</code> 演算子では、次のようにしてオブジェクトにプライベートフィールドが含まれるかどうかをチェックできます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">#prop1 <span class=\"token keyword\">in</span> obj\n</code></pre></div>\n<p>しかし、プライベートフィールドはプライベートなので上記のコードはそのフィールドを持つクラスの中でのみ使うことができます。</p>\n<p>つまり、次のようにクラスの外でプライベートフィールドに対して <code>in</code> を使うとエラーになります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n  #prop1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>#prop1 <span class=\"token keyword\">in</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Uncaught SyntaxError: Private field '#prop1' must be declared in an enclosing class</span>\n</code></pre></div>\n<p>しかし、次のようなコードはエラーになりません。メソッド <code>foo</code> はクラス <code>Foo</code> の中にあるので、Private Identifier である <code>#foo</code> を <code>in</code> 演算子の左辺として使うことができます。\nそして、この <code>foo</code> の中で <code>this</code> は <code>Foo</code> のインスタンスであり、それには当然 <code>#prop1</code> というプライベートプロパティが存在するので、<code>#prop1 in this</code> の結果は <code>true</code> になります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n  #prop1<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> #prop1 <span class=\"token keyword\">in</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<h2>モチベーション</h2>\n<p>存在しないプライベートフィールドにアクセスすると、実行時エラーが発生します。</p>\n<p>その挙動と try / catch を組み合わせて、次のようにしてオブジェクトのクラスを判定できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n  #brand<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function\">isFoo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n      obj<span class=\"token punctuation\">.</span><span class=\"token property-access\">#brand</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>obj.#brand</code> にアクセスしたとき、<code>obj</code> が Foo のインスタンスでない場合、実行時エラーが発生し <code>catch</code> に入り <code>false</code> が返されます。\nこのようにして、あるオブジェクトが<code>Foo</code>のインスタンスであるかを検証するスタティックメソッドを作れます。</p>\n<p>ですが、このパターンは冗長です。<code>in</code> 演算子を使えばもっと短く書けます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n  #brand<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function\">isFoo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> #brand <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>これが、このプロポーザルの主なモチベーションです。</p>\n<p><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/instanceof\"><code>instanceof</code> 演算子</a>も基本的にはこの目的のために使えます。しかし <code>instanceof</code> 演算子はプロトタイプに依存するので、プロトタイプを書き換えることでその挙動を変更できます。</p>\n<p>次の例では、 <code>obj</code> は <code>Foo</code> のインスタンスではありませんが、後からプロトタイプを書き換えているので <code>obj instanceof Foo</code> は <code>true</code> になっています。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setPrototypeOf</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<p>なので、より安全にオブジェクトのもとになったクラスを検証したい場合は <code>in</code> 演算子を使うと良いでしょう。</p>\n<h2>参考リンク</h2>\n<ul>\n<li><a href=\"https://tc39.es/ecma262/#prod-RelationalExpression\">https://tc39.es/ecma262/#prod-RelationalExpression</a></li>\n<li><a href=\"https://tc39.es/ecma262/#prod-PrivateIdentifier\">https://tc39.es/ecma262/#prod-PrivateIdentifier</a></li>\n<li><a href=\"https://github.com/tc39/proposal-private-fields-in-in\">https://github.com/tc39/proposal-private-fields-in-in</a></li>\n<li><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/in\">https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/in</a></li>\n</ul>\n","metaData":{"title":"ES2022 と TypeScript 4.5 に入るプライベートフィールドのための in 演算子について","author":"sosukesuzuki","createdAt":"2021-11-11","summary":"ES2022 と TypeScript 4.5 に入る現在 Stage 4 の提案 Ergonomic brand checks for Private Fields についての解説です。","tags":["ECMAScript","TypeScript"],"updatedAt":"2021-11-11"}},{"slug":"eyedropper-api","content":"<p><a href=\"https://developer.chrome.com/blog/new-in-chrome-95/\">Chrome 95 がリリース</a>され、新機能として EyeDropper API が追加されました。(Edge 95 にも追加されました)</p>\n<h2>EyeDropper API とは</h2>\n<p>EyeDropper API は画面上から色情報を取得するスポイトツールをブラウザ上で実現する API です。スポイトツールはデザインツールなどに搭載されていることが多いかと思います。\nChrome の DevTools にも色選択をするときにスポイトアイコンをクリックするとスポイトツールが使えますが、この機能が単体の Web API として実装された形になります。</p>\n<p><img src=\"/frontend-expert/image/eyedropper-api/eyedropper.png\" alt=\"DevToolsのカラーピッカー\" width=\"687\" height=\"307\" ></p>\n<h2>使い方</h2>\n<p>EyeDropper API の使い方は次のようになります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> eyeDropper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EyeDropper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> eyeDropper<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {sRGBHex: '#92d0e1'}</span>\n</code></pre></div>\n<p><code>EyeDropper</code>のインスタンスで<code>open</code>を実行すると色選択の UI が表示されます。</p>\n<h3>セキュリティ上の制約</h3>\n<p>EyeDropper API の <code>open</code> はユーザーの操作なしに実行するとエラーになります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">DOMException: Failed to execute &#x26;#39;open&#x26;#39; on &#x26;#39;EyeDropper&#x26;#39;: EyeDropper::open() requires user gesture.</code></pre></div>\n<p>これはプライバシーやセキュリティを考慮しての制限になります。<code>open</code>はユーザーの操作によってのみスポイトモードに移行し、ユーザーがクリックしたときのみ色の値を返します。\nこれによって悪意のあるサイトがユーザーの画面のピクセル情報を勝手に取得できないようになっています。</p>\n<h3>console からは起動できる</h3>\n<p>ユーザーの操作なしに起動できない API ですが、DevTools の console からはその限りではありません。次のワンライナーのコードを console で実行するとスポイトツールを起動できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword control-flow\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EyeDropper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>覚えておくと便利かもしれません。</p>\n<p>ちなみにですが、Snippets からは起動できませんでした。</p>\n<h2>EyeDropper API を使ったデモサイト</h2>\n<p>EyeDropper API のデモサイトの紹介です。こちらのデモでは EyeDropper API を使った色選択ゲームが遊べます。</p>\n<p><a href=\"https://captainbrosset.github.io/eyedropper-demos/color-game.html\">eyedropper-demos/color-game</a></p>\n<p>Play ボタンをクリックするとカウントダウンが開始されます。時間内に左のマスに表示された色と同じ色を選択すると勝ちです。</p>\n<p><img src=\"/frontend-expert/image/eyedropper-api/demo.png\" alt=\"EyeDropper APIのデモ\" width=\"704\" height=\"491\" ></p>\n<p>一部ブラウザでは <code>input</code>タグで<code>type=\"color\"</code>とすることで似たようなピッカーを使用できましたが、UI なしに実行できるようになったことでいろいろな使い道が考えられそうですね。</p>\n<h2>参考リンク</h2>\n<ul>\n<li><a href=\"https://wicg.github.io/eyedropper-api/\">https://wicg.github.io/eyedropper-api/</a></li>\n<li><a href=\"https://web.dev/eyedropper/\">https://web.dev/eyedropper/</a></li>\n</ul>\n","metaData":{"title":"Chrome 95 で追加された画面上の色を取得するEyeDropper APIについて","author":"nakajmg","createdAt":"2021-11-02","summary":"Chromiumベースのブラウザーに追加されたEyeDropper APIについて紹介します","tags":["Web API","Browser"],"updatedAt":"2021-11-02"}},{"slug":"tc39-meeting-2021-10","content":"<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">※ 旧タイトル: TC39 meeting 86th の概要とステージの移動</code></pre></div>\n<p>TC39 の 86 回目のミーティングが 10/25 ~ 10/28 に開催されました。\nこのミーティングで議題に上がった提案と、そのステージの移動について紹介します。</p>\n<ul>\n<li><a href=\"https://github.com/tc39/agendas/blob/master/2021/10.md\">agendas/10.md at master · tc39/agendas</a></li>\n<li><a href=\"https://github.com/babel/proposals/issues/77\">Oct 2021 · Issue #77 · babel/proposals</a></li>\n</ul>\n<h2>for Stage 4</h2>\n<h3><a href=\"https://github.com/tc39/proposal-error-cause\">Error Cause</a></h3>\n<p><strong>Stage 4 になりました。ECMAScript 2022 に入ります</strong></p>\n<p>Error Cause は、<code>Error</code> コンストラクタの第 2 引数に <code>cause</code> という値で原因となったエラーを渡すことができるようにする提案です。\nキャッチする側では、<code>error.cause</code> で、そのエラーを取得できます。</p>\n<p>例を示します。</p>\n<p><code>doUploadJob</code> 関数は <code>fetch</code> を実行して失敗したときに新しいエラーをスローします。そのエラーの第 2 引数に <code>{ cause: err }</code> というオブジェクトを渡しています。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">doUploadJob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://example.com/upload\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Upload job result failed\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> cause<span class=\"token operator\">:</span> err <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">doJob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Caused by\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span><span class=\"token property-access\">cause</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Error: Upload job result failed</span>\n<span class=\"token comment\">// Caused by TypeError: Failed to fetch</span>\n</code></pre></div>\n<p><code>doUploadJob</code> がスローしているエラーメッセージは <code>\"Upload job result failed\"</code> ですが、その原因となったエラーを <code>cause</code> として渡すことで、キャッチする側でどのエラーが原因で失敗したのかを取得できます。</p>\n<p>この例では、<code>doUploadJob</code> が失敗した原因が <code>TypeError: Failed to fetch</code> であったことがわかります。</p>\n<h2>for Stage 3</h2>\n<p>今回は、for Stage 3 の提案はありませんでした。</p>\n<h2>for Stage 2</h2>\n<h3><a href=\"https://github.com/tc39/proposal-array-grouping\">Array Grouping</a></h3>\n<p><strong>Stage 2 になりました</strong></p>\n<p>Array Grouping は、<code>Array</code> に <code>groupBy</code> というインスタンスメソッドを追加する提案です。</p>\n<p>ユースケースは<a href=\"https://lodash.com/docs/4.17.15#groupBy\">Lodash の <code>groupBy</code></a> と同様です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narray<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">groupBy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"even\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"odd\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// =>  { odd: [1, 3, 5], even: [2, 4] }</span>\n</code></pre></div>\n<h3><a href=\"https://github.com/tc39/proposal-partial-application\">Partial Application</a></h3>\n<p><strong>Stage 2 になりませんでした</strong></p>\n<p>Partial Application は、関数の部分適用のための構文を導入します。</p>\n<p>例を示します。</p>\n<p><code>add</code> は 2 つの引数を受け取り、その 2 つを足し合わせて返すだけの単純な関数です。\nそして、Partial Application を使って <code>addOne</code> という新しい関数を作っています。<code>addOne</code> は、1 つの引数を受け取り、それに<code>1</code>を足して返す関数です。\nつまり、既存の関数の一部の引数だけ渡して、残りの引数を受け取るような関数を作ることができます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> addOne <span class=\"token operator\">=</span> add<span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">addOne</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n</code></pre></div>\n<p>現在の JavaScript で表現すると、次のようになります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">y</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> addOne <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">addOne</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n</code></pre></div>\n<p>Haskell のような関数型プログラミング言語では標準で備わっている機能です。</p>\n<h2>for Stage 1</h2>\n<h3><a href=\"https://github.com/bathos/proposal-string-cooked\"><code>String.cooked</code></a></h3>\n<p><strong>Stage 1 になりました</strong></p>\n<p><code>String.cooked</code> は <code>String</code> に新しいスタティックメソッド <code>cooked</code> を追加する提案です。\n<code>String.cooked</code> は <a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/String/raw\"><code>String.raw</code></a> と逆のことをします。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">raw</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">mmm ... \\u0064elicious cooked string</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// mmm ... \\u0064elicious cooked string</span>\n<span class=\"token known-class-name class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">cooked</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">mmm ... \\u0064elicious cooked string</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// \"mmm ... delicious cooked string\"</span>\n</code></pre></div>\n<p>つまり、通常のテンプレートリテラルとおなじ挙動です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">mmm ... \\u0064elicious cooked string</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// \"mmm ... delicious cooked string\"</span>\n</code></pre></div>\n<p>この機能がタグ付きテンプレートリテラルとして存在することで、これを用いて新しいタグ付きテンプレートリテラルを作るときに役にたちます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">myTag</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">strings<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>values</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">cooked</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>values<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token arrow operator\">=></span> <span class=\"token known-class-name class-name\">String</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nmyTag<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token string\">'world'</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token comment\">// \"hello WORLD\"</span>\n</code></pre></div>\n<h3><a href=\"https://github.com/jridgewell/proposal-destructuring-private\">Destructure Private Fields</a></h3>\n<p><strong>Stage 1 を飛ばして、Stage 2 になりました</strong></p>\n<p>Destructure Private Fields は、プライベートフィールドの分割代入のための構文を導入します。</p>\n<p><code>#</code> からはじまる識別子は通常であれば存在できないので、別の名前にリネームする必要があります。次の例では <code>this.#x</code> を <code>x</code> という名前にリネームしています。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n  #x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">#x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 1</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> #x<span class=\"token operator\">:</span> x <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 1</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3><a href=\"https://github.com/js-choi/proposal-bind-this\">Bind-this operator</a></h3>\n<p><strong>Stage 1 になりました</strong></p>\n<p>Bind this operator は、<a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\">Function.prototype.bind</a> と同様の方法で関数をバインドするための二項演算子を導入する提案です。</p>\n<p>以前から存在する Stage 0 の <a href=\"https://github.com/tc39/proposal-bind-operator\">Bind Operator</a> の後継であり、Stage 1 の <a href=\"https://github.com/tc39/proposal-extensions\">Extensions</a> の競合です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">hasOwnProperty</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> foo<span class=\"token operator\">:</span> <span class=\"token string\">\"foo\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> foo<span class=\"token operator\">:</span> <span class=\"token string\">\"foo\"</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<h3><a href=\"https://github.com/js-choi/proposal-function-helpers\">Function helpers</a></h3>\n<p><strong>Stage 1 になりませんでした。この提案に含まれる関数は個別の提案として再度提出されるかもしれません。</strong></p>\n<p>Function helpers は、<code>Function</code> のスタティックメソッドとして便利なヘルパー関数を追加する提案です。</p>\n<p><code>Function.flow</code> は引数に与えられた関数を合成した新しい関数を返します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> f <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Function</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">flow</span><span class=\"token punctuation\">(</span>f0<span class=\"token punctuation\">,</span> f1<span class=\"token punctuation\">,</span> f2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// f2(f1(f0(5, 7))).</span>\n</code></pre></div>\n<p><code>Function.pipe</code> は第 1 引数の値を、それ移行の引数として渡された関数を合成した関数に渡した結果を返します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Function</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> f0<span class=\"token punctuation\">,</span> f1<span class=\"token punctuation\">,</span> f2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// f2(f1(f0(5))).</span>\n</code></pre></div>\n<p><code>Function.constant</code> は、第 1 引数として渡された値を返し続ける関数を返します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> f <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Function</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">constant</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fooo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">3009</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> foo<span class=\"token operator\">:</span> <span class=\"token string\">\"foo\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n</code></pre></div>\n<p><code>Function.identifiy</code> は、第 1 引数に与えられた値をそのまま返します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Function</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">identity</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n<span class=\"token known-class-name class-name\">Function</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">identity</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\n</code></pre></div>\n<p><code>Function.tap</code> はコールバック関数を引数として受け取り、関数を返します。\n<code>Function.tape</code> が返した関数に引数を渡すと、それをコールバック関数に渡して実行し、その上でその引数をそのまま返します。\n言葉で説明すると難しいですが、例を見れば簡単だと思います。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> f <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Function</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">tap</span><span class=\"token punctuation\">(</span><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">log</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5 を出力して、5 を返す</span>\n</code></pre></div>\n<h3><a href=\"https://github.com/lucacasonato/proposal-evaluator-attributes\">Evaluator Attributes</a></h3>\n<p><strong>Stage 1 になりました</strong></p>\n<p>Evaluator Attributes は、インポートされたモジュールの評価方法を処理系に伝えるための構文を導入します。</p>\n<p>例にある通り、提案された目的は WebAssembly のモジュールを JavaScript の Import 文で読み込むためです。しかし、提案の仕様としては WebAssembly には限られていません。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">mod</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./foo.wasm\"</span> <span class=\"token keyword module\">as</span> <span class=\"token string\">\"wasm-module\"</span><span class=\"token punctuation\">;</span>\nmod <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">WebAssembly<span class=\"token punctuation\">.</span>Module</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<p>現在 Stage 3 の <a href=\"https://github.com/tc39/proposal-import-assertions\">Import Assertions</a> に似ていますが、Import Assertions はモジュールの評価方法に影響を与えることはできません。</p>\n<h3>RegExp Features</h3>\n<p>前回のミーティングで提案された<a href=\"https://github.com/rbuckton/proposal-regexp-features\">RegExp Features</a>が機能ごとに別々の提案に分割されました。</p>\n<h4><a href=\"https://github.com/rbuckton/proposal-regexp-modifiers\">RegExp Modifiers</a></h4>\n<p><strong>Stage 1 になりました</strong></p>\n<h4><a href=\"https://github.com/rbuckton/proposal-regexp-x-mode\">RegExp Extended Mode and Comments</a></h4>\n<p><strong>Stage 1 になりました</strong></p>\n<h4><a href=\"https://github.com/rbuckton/proposal-regexp-atomic-operators\">RegExp Atomic Operators</a></h4>\n<p><strong>Stage 1 になりませんでした</strong></p>\n<h4><a href=\"https://github.com/rbuckton/proposal-regexp-r-escape\">RegExp <code>\\R</code> Escape</a></h4>\n<p><strong>Stage 1 になりました</strong></p>\n<h4><a href=\"https://github.com/rbuckton/proposal-regexp-buffer-boundaries\">RegExp Buffer Boundaries</a></h4>\n<p><strong>Stage 1 になりました</strong></p>\n<h3>Updates</h3>\n<p>ステージの移動はないものの、アップデートがあった提案です。</p>\n<ul>\n<li><a href=\"https://github.com/tc39/proposal-change-array-by-copy\">Change Array by Copy</a></li>\n<li><a href=\"https://github.com/tc39/proposal-json-parse-with-source\">JSON.parse sourct text access</a></li>\n<li><a href=\"https://github.com/tc39/proposal-record-tuple/\">Records &#x26; Tuples</a></li>\n<li><a href=\"https://github.com/tc39/proposal-explicit-resource-management\">Explicit Resource Management</a></li>\n<li><a href=\"https://github.com/tc39/proposal-js-module-blocks\">JS Module Blocks</a></li>\n<li><a href=\"https://github.com/js-choi/proposal-array-from-async\">Array.fromAsync</a></li>\n</ul>\n<h2>その他</h2>\n<p>提案ではなく、仕様書の変更として扱われているものです。</p>\n<h3><a href=\"https://github.com/tc39/ecma262/pull/1321\">Extending null</a></h3>\n<p><strong>合意は得られませんでした</strong></p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">null</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</code></pre></div>\n","metaData":{"title":"ECMAScriptの最新動向 2021年11月版","author":"sosukesuzuki","editor":"nakajmg","createdAt":"2021-11-02","summary":"2021年10月25日~28日に開催された TC39 meeting 86th の内容を紹介します","tags":["TC39","ECMAScript"],"updatedAt":"2021-11-02"}},{"slug":"release-firefox-93","content":"<p>Firefox 93 がリリースされました！</p>\n<ul>\n<li><a href=\"https://www.mozilla.org/en-US/firefox/93.0/releasenotes/\">https://www.mozilla.org/en-US/firefox/93.0/releasenotes/</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Releases/93\">https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Releases/93</a></li>\n</ul>\n<p>今回のリリースから AVIF 画像フォーマットがデフォルトで有効化されます。</p>\n<p>クライアント側の使用感が変わるわけではありませんが、今後こういった高圧縮可能な形式がスタンダードになることでよりリッチな Web コンテンツを多く提供できるようになるかもしれませんね。</p>\n<p>また、クラスの <code>static</code> 初期化ブロックをはじめとして、多くのイベントハンドラやプロパティの追加が盛り込まれているため、開発者視点では重要なアップデートではないかと思われます。</p>\n<h2>New</h2>\n<ul>\n<li>AV1 形式の画像フォーマットに対応</li>\n<li>PDF ビューアーがより詳細なフォームに対応(複数の政府や銀行が使用している XFA ベースフォーム)</li>\n<li>Windows 版にて、利用可能メモリが極端に少ない場合に利用状況や属性に基づいてタブを自動的にアンロードするようになった</li>\n<li>macOS 版にて、.dmg ファイルからマウントされた Firefox を実行している時、セッションを失わないためにインストールを完了するかどうかプロンプトが表示されるようになった</li>\n<li>安全でない接続に依存している、もしくは安全でない可能性のあるダウンロードをブロックするようになった</li>\n<li>Smart Block 3.0 (プライバシー保護機能)の互換性向上</li>\n<li>新しい referrer tracking protection を Strick Tracking Protection と Private Browsing に導入</li>\n<li>Firefox Suggest(Web ナビゲーター) の導入</li>\n</ul>\n<h2>Fixed</h2>\n<ul>\n<li>VoiceOver がアクセス可能なツリーコントロール内にあるチェック可能アイテムのチェック状態を正しく判別するようになった</li>\n<li>Orca スクリーンリーダーが Firefox で正しく動作するようになった</li>\n<li>その他セキュリティ修正</li>\n</ul>\n<h2>Changed</h2>\n<ul>\n<li>3DES を使用する TLS 暗号スイートが無効化\n<ul>\n<li>非推奨バージョンの TLS を有効化する設定により利用は可能</li>\n</ul>\n</li>\n<li>ダウンロードパネルが Firefox のビジュアルスタイルに沿うようになった</li>\n</ul>\n<h2>for web developer</h2>\n<h3>HTML</h3>\n<ul>\n<li>ARIA <code>meter</code> ロールを実装</li>\n<li><code>&#x3C;input type=\"datetime-local\"></code> の UI を実装</li>\n</ul>\n<h3>CSS</h3>\n<ul>\n<li><code>font-synthesis</code> に <code>small-caps</code> キーワードを追加</li>\n</ul>\n<h3>JavaScript</h3>\n<ul>\n<li>クラスの <code>static</code> 初期化ブロックをサポート</li>\n<li><code>createImageBitmap()</code> にて option オブジェクトを用いて <code>imageOrientation</code> 及び <code>premultiplyAlpha</code> プロパティを渡せるようになった</li>\n<li><code>Intl.supportedValueOf()</code> をサポート\n<ul>\n<li>実装でサポートされている値をコードで列挙できるようになった</li>\n</ul>\n</li>\n</ul>\n<h3>HTTP</h3>\n<ul>\n<li>ダイジェストを用いた HTTP 認証で SHA-256 アルゴリズムをサポート</li>\n<li>画像のデフォルト HTTP ACCEPT ヘッダーが <code>image/avif,image/webp,*/*</code> に変更\n<ul>\n<li>AV1 フォーマット対応によるものだと思われます</li>\n</ul>\n</li>\n</ul>\n<h3>APIs</h3>\n<ul>\n<li><code>ElementInternals.shadowRoot</code> 及び <code>HTMLElement.attachInternals</code> をサポート</li>\n<li><code>ResizeObserver.Observe()</code> にて <code>device-pixel-content-box</code> 値をサポート</li>\n<li>グローバル関数 <code>reportError()</code> をサポート\n<ul>\n<li>スクリプトがコンソールやグローバルイベントハンドラに対してエラーを報告できるようになった</li>\n</ul>\n</li>\n</ul>\n<h3>Events</h3>\n<ul>\n<li>グローバルイベントハンドラプロパティ <code>onsecuritypolicyviolation</code> をサポート\n<ul>\n<li>コンテンツセキュリティポリシー違反時に発生する <code>securitypolicyviolation</code> イベントを処理するハンドラを割り当てることが可能になった</li>\n</ul>\n</li>\n<li><code>GlobalEventHandlers</code> 及び <code>ShadowRoot</code> にて <code>onslotchange</code> イベントハンドラプロパティをサポート\n<ul>\n<li>スロットに含まれるノードが変更された際に <code>&#x3C;slot></code> 要素で発生する <code>slotchange</code> イベントを処理するハンドラを割り当てることが可能になった</li>\n</ul>\n</li>\n</ul>\n<h3>Removals</h3>\n<ul>\n<li><code>KeyboardEvent.initKeyEvent()</code> が <code>dom.keyboardevent.init_key_event.enabled</code> によって実行可否が制御されるようになり、デフォルトで無効になった</li>\n</ul>\n<h3>WebDerive conformance (Marionette)</h3>\n<ul>\n<li>大きなドキュメントに対して <code>WebDriver:Print</code> が失敗する原因になっているバグを修正</li>\n</ul>\n<h3>for add-on developers</h3>\n<ul>\n<li><code>windowId</code> が指定されている場合、サイドバーが <code>extension.getViews</code> に包含されるようになった</li>\n</ul>\n<h3>Other</h3>\n<ul>\n<li>AVIF 画像のサポートがデフォルトで有効になった\n<ul>\n<li><code>image.avif.compliance_strictness</code> を用いて仕様準拠の厳密生を調節できる</li>\n<li>アニメーション画像には非対応</li>\n</ul>\n</li>\n</ul>\n<h2>Web Platform</h2>\n<ul>\n<li><code>&#x3C;input type=\"datetime-local\"></code> の UI を実装</li>\n</ul>\n","metaData":{"title":"Firefox 93.0 リリースノート要約","author":"BaHo","editor":"nakajmg","createdAt":"2021-10-21","summary":"Firefox 93.0 のリリースノートの要約です","tags":["Releasenote","Browser"],"updatedAt":"2021-10-21"}},{"slug":"first-post","content":"<p>こんにちは、サイボウズフロントエンドエキスパートチームの<a href=\"https://twitter.com/__sosukesuzuki\">@__sosukesuzuki</a>です。</p>\n<p>サイボウズには<a href=\"https://blog.cybozu.io/\">Cybozu Inside Out</a>という技術ブログがあります。\nそれとは別に、この度フロントエンドエキスパートチームとしてウェブサイトを開設することにしました。</p>\n<p>この記事では、このウェブサイトを開設することになった経緯と目的、使用した技術について説明します。</p>\n<h2>経緯</h2>\n<p>フロントエンドエキスパートチームでは、チームでのコミュニケーションの促進を主な目的としてハッカソンを開催することがあります。\n(チームでのハッカソンについては<a href=\"https://blog.cybozu.io/entry/2021/02/25/133039\">Cybozu Inside Out に投稿されている記事</a>をご覧ください)</p>\n<p>そのようなハッカソンで、フリーテーマの回がありました。\nそこで、<a href=\"https://twitter.com/__sakito__\">Sakito</a>さんと<a href=\"https://twitter.com/b4h0_c4t\">BaHo</a>さんと<a href=\"https://twitter.com/__sosukesuzuki\">sosukesuzuki</a>(私)のチームでは、フロントエンドエキスパートチームのウェブサイトを作ってみることにしました。</p>\n<p>ハッカソンの期間内に完成することはありませんでしたが、チームとしてウェブサイトを持っていた方が良いということで合意が得られたので、ハッカソン終了後も開発を継続することにしました。</p>\n<h2>目的</h2>\n<p>フロントエンドエキスパートチームの活動を多くの人に知ってもらうためです。</p>\n<p>フロントエンドエキスパートチームでは、日頃から様々なフロントエンド技術の啓蒙活動を行っています。\nそれらの多くはクローズドな場所で行われています。しかし基本的にその内容はサイボウズ特有のものではなく、一般的に有用な情報です。</p>\n<p>そこで、フロントエンドエキスパートチームとしてウェブサイトを開設し、公開できる有用な情報は公開することにしました。</p>\n<p>このウェブサイトを通して、フロントエンドエキスパートチームに興味を持ってくれたら嬉しいです。</p>\n<h2>技術</h2>\n<p>次の要件を満たす技術として、<a href=\"https://github.com/vercel/next.js\">Next.js</a> を採用しました。</p>\n<ul>\n<li>環境構築が簡単である\n<ul>\n<li>もともとハッカソンで開発していたので、環境構築に多くの時間を割けないという事情がありました。</li>\n</ul>\n</li>\n<li>SSG の機能を備えている\n<ul>\n<li>すべてのコンテンツは静的なものと決まっていたので、SSG ができると嬉しい</li>\n</ul>\n</li>\n<li>TypeScript との相性が良い</li>\n</ul>\n<p>記事は Markdown として管理して Next.js の <code>getStaticProps</code> のタイミングで <a href=\"https://github.com/remarkjs/remark\">remark</a> を使って HTML に変換しています。</p>\n<p>また、ブログの機能を持つので、feed の生成と記事ごとの OGP 画像の生成をのためのスクリプトをそれぞれ用意しました。feed 生成スクリプトは、記事データの Markdown からメタデータを取得し、XML ファイルを書き出します。\nOGP 画像生成スクリプトは、記事データの Markdown からタイトルを取得し、<a href=\"https://github.com/puppeteer/puppeteer\">Puppeteer</a> で画像を生成します。</p>\n<p>ホスティングには GitHub Pages を使っています。GitHub で管理している HTML をホストする先としてはやはり楽です。</p>\n<p>実装はすべて <a href=\"https://github.com/cybozu/frontend-expert\">https://github.com/cybozu/frontend-expert</a> で公開しています。</p>\n<h2>おわりに</h2>\n<p>これから、不定期ではありますが、当サイトにてフロントエンドに関連する情報を発信していく予定です。ぜひ読んでみてくださいね。</p>\n","metaData":{"title":"サイボウズフロントエンドエキスパートチームのウェブサイトを作りました","author":"sosukesuzuki","createdAt":"2021-10-14","summary":"このウェブサイトを開設することになった経緯と目的、使用した技術について説明します。","tags":["Announcement"],"updatedAt":"2021-10-14"}}]},"__N_SSG":true}
{"pageProps":{"posts":[{"type":"markdown","href":"/posts/release-chrome-99","slug":"release-chrome-99","content":"<p>Chrome 99 のリリースノート関連の情報をまとめました。</p>\n<ul>\n<li><a href=\"https://developer.chrome.com/blog/new-in-chrome-99/\">https://developer.chrome.com/blog/new-in-chrome-99/</a></li>\n<li><a href=\"https://developer.chrome.com/blog/new-in-devtools-99/\">https://developer.chrome.com/blog/new-in-devtools-99/</a></li>\n<li><a href=\"https://developer.chrome.com/blog/deps-rems-99/\">https://developer.chrome.com/blog/deps-rems-99/</a></li>\n<li><a href=\"https://www.chromestatus.com/features#milestone%3D99\">https://www.chromestatus.com/features#milestone%3D99</a></li>\n<li><a href=\"https://v8.dev/blog/v8-release-99\">https://v8.dev/blog/v8-release-99</a></li>\n</ul>\n<h2>New In Chrome (Chrome 99)</h2>\n<p>Chrome99 で新しく追加された機能です。</p>\n<h3>Chrome 100 and Firefox 100</h3>\n<p>Chrome 100 は今年の 3 月下旬、Firefox100 は 5 月上旬にリリースされます。 これらは両方ともメジャーバージョン番号が 3 桁にロールオーバーするアップデートです。 UserAgent をパースしたバージョン番号を２桁として解釈しているコードがある場合、新しいバージョン番号によって問題が発生する可能性があります。</p>\n<p>Chrome では、<code>＃force-major-version-to-100</code> フラグを有効にすることで現在のバージョンを 100 に上書きし、挙動を確認することができます。</p>\n<p>また、Firefox Nightly では「設定」メニューで、「Firefox100 ユーザーエージェント文字列」オプションを有効にすることで同様の確認が可能です。 両ブラウザでバージョン番号の解釈が期待どおりに機能することを確認できるように、サイトをテストすることをお勧めします。</p>\n<h3>CSS Cascasde Layers</h3>\n<p>CSS Cascade Layers が Chrome99、Firefox 97、Safari 15.4 Beta でサポートされました！</p>\n<p>CSS セレクタの詳細度を上回るルールを<code>@layer</code>で定義することができるようになります。</p>\n<p>詳細は <a href=\"https://twitter.com/nus3_\">@nus3</a> が別途記事を書いたので次のリンクをご参考ください。</p>\n<p><a href=\"https://cybozu.github.io/frontend-expert/posts/css-cascade-layers\">https://cybozu.github.io/frontend-expert/posts/css-cascade-layers</a></p>\n<h3>showPicker() for input elements</h3>\n<p>HTML InputElements に新しく<code>showPicker（）</code>メソッドが実装されました。</p>\n<p>これにより、日付だけでなく、時間、色、その他の<code>&#x3C;input></code>要素でブラウザーピッカーを表示するための標準的な方法が整備されました。</p>\n<p>利用する場合は、以下のように<code>&#x3C;input></code>要素で<code>showPicker（）</code>を呼び出します。また<code>try…catch</code>ブロックでこれらの処理を囲う事で、ブラウザーが<code>showPicker()</code>の API をサポートしていない場合、またはピッカーを表示できない場合のフォールバックを提供できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> dateInput <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbutton<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n    dateInput<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">showPicker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Dateピッカーの表示.</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ピッカーを表示できない場合のフォールバック</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>参考:</p>\n<p><a href=\"https://developer.chrome.com/blog/new-in-chrome-99/#:~:text=Show%20a%20browser%20picker%20for%20date%2C%20time%2C%20color%2C%20and%20files\">Show a browser picker for date, time, color, and files</a></p>\n<h3>And more!</h3>\n<p><code>CanvasRenderingContext2D</code>に次の機能が追加されました。</p>\n<ul>\n<li>Context がロストした時や復元した時のイベントハンドリングができるように(<code>ContextLost</code>, <code>ContextRestored</code>)</li>\n<li><code>willReadFrequently</code>オプションの追加</li>\n<li><code>letter-spacing</code>など Canvas でサポートされていなかったテキストを修飾するプロパティの追加</li>\n<li>Canvas の状態をリセットする<code>reset()</code>など</li>\n</ul>\n<p>PWA のマニフェストにダークテーマに対応する設定が追加できる<a href=\"https://developer.chrome.com/origintrials/#/view_trial/4239013149262479361\">オリジントライアル</a>が開始されたました。</p>\n<p>また詳細はこの記事の後半に記載しますが、Handwriting Recognition API が使えるようになります。</p>\n<h2>What's New In DevTools (Chrome 98)</h2>\n<p>DevTools についてはこちらの日本語訳を参照ください。</p>\n<p><a href=\"https://developer.chrome.com/ja/blog/new-in-devtools-99/\">https://developer.chrome.com/ja/blog/new-in-devtools-99/</a></p>\n<p>書いてるうちにでなかったら、気になるものがあれば記載する</p>\n<h2>Deprecations and removals in Chrome 99</h2>\n<h3>Remove Battery Status API on insecure origins</h3>\n<p><code>Battery Status API</code>は、HTTP ページや HTTP ページに埋め込まれた HTTPS の iframe などの安全でないオリジンでサポートされなくなりました。</p>\n<h3>Remove font-family -webkit-standard</h3>\n<p><code>font-family</code>の値として<code>-webkit-standard</code>が削除されました。</p>\n<h3>Remove GamepadList</h3>\n<p>接続しているゲームパッドを取得できる<code>navigator.getGamepads()</code>の返り値が<code>GamepadlList</code>から<code>Gamepad</code>のオブジェクトの配列を返すようになりました。</p>\n<p>この変更により、Gecko と Webkit と同じく仕様と一致するようになります。</p>\n<p>参考:</p>\n<p><a href=\"https://web.dev/gamepad/\">Chrome でゲームパッドを使う方法</a></p>\n<h3>Update WebCodecs to match the specification</h3>\n<p>WebCodecs 仕様変更により、仕様に反していた以下の 2 つの部分について修正しました。</p>\n<ul>\n<li><code>EncodeVideoChunkMetadata</code>オブジェクト内の<code>temporalLayerId</code>の場所</li>\n<li><code>VideoFrame()</code> コンストラクタでタイムスタンプ引数を指定しなかった際の挙動変更</li>\n</ul>\n<p>詳しくは<a href=\"https://chromestatus.com/feature/5667793157488640\">こちら</a>を参照してください。</p>\n<h2>その他 Chrome Platform Status に記載されていたもの</h2>\n<h3>Feature: \"paintworklet\" destination for PaintWorklet</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/Houdini\">CSS Houdini</a>の一部である<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CSS_Painting_API\">CSS Painting API</a>で使われる PaintWorklet のリクエストの送り先が<code>script</code>から<code>paintworklet</code>になりました。</p>\n<p><code>Sec-Fetch-Dest</code>HTTP リクエストヘッダと<code>FetchEvent.request.destination</code>で適用されます。</p>\n<h3>Feature: \"audioworklet\" destination for AudioWorklet</h3>\n<p><code>Web Audio API</code>のオーディオ処理を別スレッドで実行する仕組みである、<code>AudioWorklet</code>のリクエストの送り先が<code>script</code>から<code>audioworklet</code>になりました。</p>\n<p><code>Sec-Fetch-Dest</code>HTTP リクエストヘッダと<code>FetchEvent.request.destination</code>で適用されます。</p>\n<h3>Feature: Allow infinity, -infinity and NaN in CSS calc()</h3>\n<p>CSS の<code>calc()</code>関数で<code>infinity</code>, <code>-infinity</code>, <code>NaN</code> などのキーワード、及び<code>calc(1/0)</code> のように<code>infinity</code>や<code>NaN</code>に評価される式による値を許容するようになりました。</p>\n<h3>Autofill in ShadowDOM</h3>\n<p><code>autofill</code>が<code>form</code> 要素内のフォームコントロールを収集する際に、<code>ShadowDOM</code>も参照するようになります。これにより<code>Shadow DOM</code>内部の入力フォームでも<code>autofill</code>が効くようになります。</p>\n<p>Web コンポーネントを採用する際、<code>input</code>要素のようなフォームコントロールを<code>ShadowDOM</code>で包むことが一般的になっていることを受けての改善となります。</p>\n<h3>Convert adoptedStyleSheets to use ObservableArray</h3>\n<p>document や shadowRoot に<a href=\"https://developer.mozilla.org/ja/docs/Web/API/CSSStyleSheet\">CSSStyleSheet</a>を追加できる<code>adoptedStyleShetts</code>で ObservableArray が使えるようになります。</p>\n<p>今回から push などの通常の配列操作ができるようになります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">adoptedStyleSheets</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>adoptedStyleSheets<span class=\"token punctuation\">,</span> newSheet<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// これまで</span>\n<span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">adoptedStyleSheets</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>newSheet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// これから</span>\n</code></pre></div>\n<h3>Handwriting Recognition API</h3>\n<p>OS などにある既存の手書きの文字認識機能を web 上で扱えるようにするための API が追加されました。</p>\n<p>※現状この API が利用できるのは ChromeOS のみで対応言語も英語に限られています。</p>\n<p>参考:</p>\n<p><a href=\"https://chromestatus.com/feature/5263213807534080\">Feature: Handwriting Recognition API</a></p>\n<h3>Unprefixed text-emphasis properties</h3>\n<p>CSS の text-emphasis プロパティが<code>-webkit</code>なしで使えるようになります。</p>\n<p>参考:</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-emphasis\">https://developer.mozilla.org/en-US/docs/Web/CSS/text-emphasis</a></p>\n<h2>V8 release v9.9</h2>\n<h3>Intl.Locale extensions</h3>\n<p>Intl.Local オブジェクトに 7 つの新しいプロパティが追加されました。</p>\n<p><code>calendars</code>, <code>collations</code>, <code>hourCycles</code>, <code>numberingSystems</code>, <code>timeZones</code>では他の Intl API で使用する好ましい識別子を返します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> jaLocal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Intl<span class=\"token punctuation\">.</span>Locale</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ja\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>jaLocal<span class=\"token punctuation\">.</span><span class=\"token property-access\">calendars</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['gregory', 'japanese']</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>jaLocal<span class=\"token punctuation\">.</span><span class=\"token property-access\">collations</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['unihan', 'emoji', 'eor']</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>jaLocal<span class=\"token punctuation\">.</span><span class=\"token property-access\">hourCycles</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['h23']</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>jaLocal<span class=\"token punctuation\">.</span><span class=\"token property-access\">numberingSystems</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['latn']</span>\n</code></pre></div>\n<p><code>textInfo</code>はテキストに関連する情報をオブジェクトで返します。現状では CSS の direction プロパティで使用するような文字の並び順の値を返します。\n(rtl が右から左へ、ltr が左から右へ)</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">arabicEgyptLocale<span class=\"token punctuation\">.</span><span class=\"token property-access\">textInfo</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// { direction: 'rtl' }</span>\njapaneseLocale<span class=\"token punctuation\">.</span><span class=\"token property-access\">textInfo</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// { direction: 'ltr' }</span>\nchineseTaiwanLocale<span class=\"token punctuation\">.</span><span class=\"token property-access\">textInfo</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// { direction: 'ltr' }</span>\n</code></pre></div>\n<p><code>weekInfo</code>は週に関連する情報を返します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> jaLocal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Intl<span class=\"token punctuation\">.</span>Local</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ja\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>jaLocal<span class=\"token punctuation\">.</span><span class=\"token property-access\">weekInfo</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 返される数字は 1 が月曜日、7 が日曜日</span>\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">//   firstDay: 7,</span>\n<span class=\"token comment\">//   weekend: [6, 7],</span>\n<span class=\"token comment\">//   minimalDays: 1,</span>\n<span class=\"token comment\">// }</span>\n</code></pre></div>\n<h3>Intl Enumeration</h3>\n<p>v8 でサポートされている識別子の配列を返す<code>Intl.supportedValuesOf(code)</code>という新しい関数が追加されました。\nサポートされるコード値は以下の 6 つです。</p>\n<p>calendar</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Intl</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">supportedValuesOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"calendar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ['buddhist', 'chinese', 'coptic', 'dangi', ...]</span>\n</code></pre></div>\n<p>collation</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Intl</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">supportedValuesOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"collation\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ['big5han', 'compat', 'dict', 'emoji', ...]</span>\n</code></pre></div>\n<p>currency</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Intl</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">supportedValuesOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"currency\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ['ADP', 'AED', 'AFA', 'AFN', 'ALK', 'ALL', 'AMD', ...]</span>\n</code></pre></div>\n<p>numberingSystem</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Intl</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">supportedValuesOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"numberingSystem\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ['adlm', 'ahom', 'arab', 'arabext', 'bali', ...]</span>\n</code></pre></div>\n<p>timeZone</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Intl</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">supportedValuesOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timeZone\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ['Africa/Abidjan', 'Africa/Accra', 'Africa/Addis_Ababa', 'Africa/Algiers', ...]</span>\n</code></pre></div>\n<p>unit</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Intl</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">supportedValuesOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ['acre', 'bit', 'byte', 'celsius', 'centimeter', ...]</span>\n</code></pre></div>\n<p>この新しいメソッドによって、Web 開発者はどの値が実装でサポートされているかを簡単に発見できるようになります。</p>\n","metaData":{"title":"CSS Cascasde Layersの追加など、Chrome 99 リリースノートまとめ","author":"Saji","editor":"nus3","createdAt":"2022-03-24","summary":"Chrome 99 のリリースノートの要約です","tags":["Releasenote","Browser"],"updatedAt":"2022-03-24"}},{"type":"markdown","href":"/posts/css-cascade-layers","slug":"css-cascade-layers","content":"<p><a href=\"https://developer.chrome.com/blog/new-in-chrome-99/\">Chrome99</a>に新機能として CSS Cascade Layers が実装され、Firefox、Edge、Safari といった主要ブラウザで CSS Cascade Layers が使えるようになりました。</p>\n<h2>CSS Cascade Layers とは</h2>\n<p>CSS の仕様において、要素にどのスタイルを適用するかはざっくりと次のような優先順位で決定されていました。(カスケード順を省いて簡略的に記述しています)</p>\n<ol>\n<li><code>!important</code></li>\n<li>インラインスタイル</li>\n<li>セレクターの詳細度</li>\n<li>同じ詳細度であれば最後に宣言されたもの</li>\n</ol>\n<p>ここに CSS Cascade Layers が導入されると次のように変わります。</p>\n<ol>\n<li><code>!important</code></li>\n<li>インラインスタイル</li>\n<li><strong>Cascade Layers</strong></li>\n<li>セレクターの詳細度</li>\n<li>同じ詳細度であれば最後に宣言されたもの</li>\n</ol>\n<h2>従来の CSS が抱える複雑な詳細度の管理</h2>\n<p>どのスタイルを適用するか判断するのにセレクターの詳細度を用いる場合は、詳細度がより高いものが適用されます。</p>\n<p>セレクターの詳細度は、高い順に次のような順番になります。</p>\n<ol>\n<li>ID セレクター: <code>#example</code></li>\n<li>クラスセレクター: <code>.example</code>, 属性セレクター: <code>[type=\"radio\"]</code>, 疑似クラス: <code>:hover</code></li>\n<li>要素型セレクター: <code>h1</code>, 擬似要素: <code>::before</code></li>\n</ol>\n<p>また、単純にセレクターの種類だけでなく、セレクターの数も詳細度に影響します。</p>\n<p>参考: <a href=\"https://specifishity.com/\">https://specifishity.com/</a></p>\n<p>CSS の記述量が増えていくにつれ、この詳細度をうまく管理できず意図しないスタイルが適用されることがままあります。意図しないスタイルが適用されないために、セレクターの命名規則を厳格にする<a href=\"http://getbem.com/naming/\">BEM</a>などの設計手法を取り入れて対応することもあります。</p>\n<p>しかし、命名規則をベースとした設計手法では、サードパーティの CSS ライブラリを使用する場合や、コントロールが難しいくらい多い記述量の CSS になってしまった場合、全体の詳細度を把握して管理することはなかなか大変です。</p>\n<h2>Cascade Layers によってどう変わるか</h2>\n<p>Cascade Layers を使うと、セレクターの詳細度よりも優先してスタイルが適用されるレイヤーを定義できるようになります。</p>\n<p>実際にコードで見てみましょう。</p>\n<h3>通常の詳細度を使ったスタイルの適用</h3>\n<p>Cascade Layers を使わない場合、同じ詳細度のセレクターは属性値での記述順に関わらず、スタイルシート内で最後に宣言されたスタイルが適用されます。</p>\n<p>次の場合、<code>.base</code> と <code>.nus3</code> は同一の詳細度です。また、1 つ目の <code>.base</code> は最後に記述されている <code>.base</code> によって上書きされます。このボタンには<code>style</code>内で一番最後に記述されている <code>.base</code> のスタイルが適用され、背景色が <code>royalblue</code> になります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\"><span class=\"token class\">.base</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">crimson</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\"><span class=\"token class\">.nus3</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">white</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\"><span class=\"token class\">.base</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">royalblue</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* このスタイルが適用される */</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>base nus3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>royalblueになる<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<p>また、セレクターの詳細度は種類によって異なり、要素セレクター &#x3C; クラスセレクター &#x3C; ID セレクター の順に高くなります。</p>\n<p>次の場合、ID セレクター(<code>#btn</code>)のほうがクラスセレクター(<code>.nus3</code>) や要素セレクター(<code>button</code>)よりも詳細度が高いので、<code>#btn</code> のスタイルが適用されます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\">button</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">coral</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\"><span class=\"token id\">#btn</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">crimson</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* このスタイルが適用される */</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\"><span class=\"token class\">.nus3</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">black</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>btn<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nus3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>crimsonになる<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<h3>Cascade Layers を使ったスタイルの適用</h3>\n<p>Cascade Layers では、まず<code>@layer</code>構文を使ってレイヤーを定義します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-css\"><code class=\"language-css\">`<span class=\"token atrule\"><span class=\"token rule\">@layer</span> base<span class=\"token punctuation\">,</span> page<span class=\"token punctuation\">,</span> utilities<span class=\"token punctuation\">;</span></span>`\n</code></pre></div>\n<p>このとき、base、page、utilities の 3 つのレイヤーを定義するとともに、レイヤーの優先順位を定義しています。</p>\n<p>この場合、各レイヤーのスタイルは後ろに定義したものほど優先度が高く、次のような優先度でスタイルが適用されます。</p>\n<ol>\n<li>utilities</li>\n<li>page</li>\n<li>base</li>\n</ol>\n<p>ここではレイヤーの定義と優先度を同時に定義していますが、この記述を省略した場合、あとに定義したレイヤーの優先度が高くなります。</p>\n<p>レイヤーの動作についてサンプルコードで詳しく見てみましょう。</p>\n<p>次のコードは、前述したコードをベースに <code>@layer</code> を追加したものです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token atrule\"><span class=\"token rule\">@layer</span> base<span class=\"token punctuation\">,</span> page<span class=\"token punctuation\">,</span> utilities<span class=\"token punctuation\">;</span></span>\n\n  <span class=\"token atrule\"><span class=\"token rule\">@layer</span> utilities</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token selector\"><span class=\"token class\">.shiny</span></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">gold</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token atrule\"><span class=\"token rule\">@layer</span> page</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token selector\"><span class=\"token id\">#btn</span></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">crimson</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token atrule\"><span class=\"token rule\">@layer</span> base</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token selector\"><span class=\"token class\">.base</span></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">crimson</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token selector\"><span class=\"token class\">.nus3</span></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">white</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shiny base nus3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>goldになる<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>btn<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shiny<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>goldになる<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<p>１つ目のボタンはレイヤーがない場合には最後に宣言されている <code>.nus3</code> の <code>white</code> が適用されていましたが、優先度の高い utilities レイヤーに定義した <code>.shiny</code> の <code>gold</code> が適用されます。</p>\n<p>２つ目のボタンはレイヤーがない場合には ID セレクターの <code>#btn</code> のスタイルが適用されていましたが、この場合も utilities レイヤーに定義した <code>.shiny</code> のほうが優先度が高いため、 <code>gold</code> が適用されます。</p>\n<p>次のサンプルページを開いて、DevTools で対象の要素をみると Cascade Layers が適用されているのがわかります。</p>\n<p><a href=\"https://c1r38o.csb.app/\">サンプルページ</a></p>\n<p><img src=\"/frontend-expert/image/css-cascade-layers/devtools.png\" alt=\"DevToolsで確認すると実際にCascade Layersが適用されている\" width=\"337\" height=\"400\" ></p>\n<p>レイヤーの適用順が utilities > page > base になってるのがわかります。</p>\n<p>このように、Cascade Layers を使うことで、詳細度ではなくレイヤーでスタイルをコントロールできるようになります。</p>\n<h3>Cascade Layers 内で<code>!important</code>を使った際のスタイルの優先順位</h3>\n<p><code>!important</code>を使っていない場合、Cascade Layers で定義したレイヤー外のスタイルが優先して適用されます。</p>\n<p>これはカスケード順が、レイヤー内 &#x3C; レイヤー外 の順に高くなっているからです。</p>\n<p>次のコードでは、レイヤー外のスタイルが適用され、ボタンの背景色が<code>white</code>になります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token atrule\"><span class=\"token rule\">@layer</span> base</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token selector\"><span class=\"token class\">.nus3</span></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">gold</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token selector\"><span class=\"token class\">.nus3</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">white</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* このスタイルが適用される */</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nus3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>whiteになる<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<p>しかし、<code>!important</code>を使ったスタイルの場合、このカスケード順が変わるので注意が必要です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token atrule\"><span class=\"token rule\">@layer</span> base</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token selector\"><span class=\"token class\">.nus3</span></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">gold</span> <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* このスタイルが適用される */</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token selector\"><span class=\"token class\">.nus3</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">white</span> <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nus3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>goldになる<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<h2>CSS フレームワークにも Cascade Layers は使える</h2>\n<p>Bootstrap や Materialize CSS、Bulma といった CSS フレームワークにも Cascade Layers を使ってレイヤーを定義できます。</p>\n<p>CSS フレームワークの一つである<a href=\"https://bulma.io/\">Bulma</a>を使って試してみましょう。</p>\n<p>本来、次のようなクラスをボタンに付与すると、Bulma で元から定義されている<code>.button.is-primary</code>が、後に追加した<code>.button-nus3</code>より詳細度が高くなり、<code>.button-nus3</code>のスタイルは適用されません。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button is-primary button-nus3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>ボタン<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@import</span> <span class=\"token string\">\"https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token atrule\"><span class=\"token rule\">@import</span> <span class=\"token string\">\"styles/page.css\"</span><span class=\"token punctuation\">;</span></span>\n\n<span class=\"token comment\">/* styles/page.cssで定義されているスタイル */</span>\n<span class=\"token selector\"><span class=\"token class\">.button-nus3</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">gold</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>しかし次のように Cascade Layers を使い、<a href=\"https://bulma.io/\">Bulma</a>の CSS を<code>base</code>のレイヤーにしつつ、画面特有のスタイルを<code>styles/page.css</code>に定義することで、詳細度の影響を気にすることなく Bulma のスタイルを上書きすることができます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@layer</span> base<span class=\"token punctuation\">,</span> page<span class=\"token punctuation\">;</span></span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@import</span> <span class=\"token string\">\"https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css\"</span> <span class=\"token function\">layer</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token atrule\"><span class=\"token rule\">@import</span> <span class=\"token string\">\"styles/page.css\"</span> <span class=\"token function\">layer</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n</code></pre></div>\n<p>対象ブラウザのサポート状況は考慮する必要がありますが、CSS の記述量が増えることが想定されるプロジェクトには、Cascade Layers をベースにした設計を検討してみてはいかがでしょうか。</p>\n<h2>参考リンクなど</h2>\n<ul>\n<li><a href=\"https://www.w3.org/TR/css-cascade-5/\">https://www.w3.org/TR/css-cascade-5/</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@layer\">https://developer.mozilla.org/en-US/docs/Web/CSS/@layer</a></li>\n<li><a href=\"https://developer.chrome.com/blog/cascade-layers/\">https://developer.chrome.com/blog/cascade-layers/</a></li>\n<li><a href=\"https://github.com/nus3/p-css-cascade-layers\">サンプル実装したリポジトリ</a></li>\n</ul>\n","metaData":{"title":"主要ブラウザで使える！CSS Cascade Layers で新しいCSS設計の手法を考える","author":"nus3","editor":["nakajmg"],"createdAt":"2022-03-22","summary":"CSS Cascade Layersを使ったスタイルの管理方法について紹介します","tags":["CSS"],"updatedAt":"2022-03-22"}},{"type":"markdown","href":"/posts/tc39-meeting-2022-01","slug":"tc39-meeting-2022-01","content":"<p>この記事では2021年01月24日~27日に開催された TC39 meeting 88th で議題に上がったプロポーザルについて紹介します。</p>\n<h2>For Stage 4</h2>\n<p>For Stage 4 の提案はありませんでした。</p>\n<h2>For Stage 3</h2>\n<h3><a href=\"https://github.com/tc39/proposal-array-from-async/\">Array.fromAsync</a></h3>\n<p><strong>Stage 3 にはなりませんでした。</strong></p>\n<p><code>Array.fromAsync</code> は次のようにして非同期イテラブルから配列を生成するスタティックメソッドを追加するプロポーザルです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token operator\">*</span> <span class=\"token function\">asyncGen</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword control-flow\">yield</span> i <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fromAsync</span><span class=\"token punctuation\">(</span><span class=\"token function\">asyncGen</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><a href=\"https://github.com/tc39/proposal-array-from-async/issues/19\">https://github.com/tc39/proposal-array-from-async/issues/19</a> で指摘された問題のため、Stage 3 にはなりませんでした。</p>\n<h2>For Stage 2</h2>\n<h3><a href=\"https://github.com/tc39/proposal-class-brand-check\">Class brand checks</a></h3>\n<p><strong>Stage 2 にはなりませんでした</strong></p>\n<p>Class brand checks は brand check のための新しい構文を導入するプロポーザルです。</p>\n<p>brand check は TC39 内で使われる用語で、<a href=\"https://github.com/tc39/how-we-work/blob/master/terminology.md#brand-check\">https://github.com/tc39/how-we-work/blob/master/terminology.md#brand-check</a> で説明されています。</p>\n<p>brand check とは、雑に言えば「ある値があるデータ型であることを検証すること」です。たとえば <code>Array.isArray</code> は brand check です(<a href=\"https://zenn.dev/sosukesuzuki/articles/e0516a3d4c424e\"><code>instanceof</code> は厳密ではない</a>ため brand check ではありません)。</p>\n<p>以前 brand check の方法の一つである <a href=\"https://github.com/tc39/proposal-private-fields-in-in\">Ergonomic brand checks for private fields</a> についての記事を書いたので興味のある方はそちらもご覧ください。</p>\n<p><div class=\"hatena-link\"><iframe class=\"hatena-link-frame\" src=\"https://hatenablog-parts.com/embed?url=https://cybozu.github.io/frontend-expert/posts/ergonomic-brand-checks-for-private-fields\" style=\"border: none;\"></iframe></div></p>\n<p>Class branc check プロポーザルでは <code>class.hasInstance(x)</code> という新しい Meta Property を追加します。これはクラスの中でのみ使うことができ、引数として渡された値が今いるクラスのインスタンスかどうかをチェックします。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function\">isFoo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">hasInstance</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Foo</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isFoo</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Foo</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isFoo</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n</code></pre></div>\n<h2>For Stage 1</h2>\n<h3><a href=\"https://github.com/rbuckton/proposal-enum\">enum</a></h3>\n<p><strong>Stage 1 にはなりませんでした。</strong></p>\n<p>enum は列挙型を実現するためのプロポーザルです。このプロポーザルは 4 年ほど前から存在していましたがまた動き出したようです。</p>\n<p>enum プロポーザルでは次のような構文を導入します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">enum</span> <span class=\"token maybe-class-name\">SyntaxKind</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">A</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">B</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">C</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>他のプログラミング言語の enum と構文上は似ています。</p>\n<p>しかし細部の仕様について検討すべき事項が多く、今回のミーティングでは Stage 1 に到達することはありませんでした。<a href=\"https://docs.google.com/presentation/d/14WtGmdWjEYXIXZVWJWpERF98D90_BytceAu7b7DKr5Q/edit#slide=id.g10effb28f4f_0_273\">このスライド</a>に詳しくまとまっているので興味のある方はご覧ください。</p>\n<h3><a href=\"https://github.com/tc39/proposal-reversible-string-split\">Reversible string split</a></h3>\n<p><strong>Stage 1 になりました。</strong></p>\n<p>Reversible string split は可逆(Reversible)の文字列分割のための方法を導入するプロポーザルです。</p>\n<p>JavaScript では <code>String.prototype.split</code> を使って文字列を分割できます。</p>\n<p><div class=\"hatena-link\"><iframe class=\"hatena-link-frame\" src=\"https://hatenablog-parts.com/embed?url=https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/String/split\" style=\"border: none;\"></iframe></div></p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> splitted <span class=\"token operator\">=</span> <span class=\"token string\">\"A,B,C,D,E\"</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>splitted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 'A', 'B', 'C', 'D', 'E' ]</span>\n</code></pre></div>\n<p><code>String.prototype.split</code> は第2引数として非負の整数を渡すことで、分割する数を制限できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> splitted1 <span class=\"token operator\">=</span> <span class=\"token string\">\"A,B,C,D,E\"</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>splitted1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 'A' ]</span>\n\n<span class=\"token keyword\">const</span> splitted2 <span class=\"token operator\">=</span> <span class=\"token string\">\"A,B,C,D,E\"</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>splitted2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 'A', 'B' ]</span>\n\n<span class=\"token keyword\">const</span> splitted3 <span class=\"token operator\">=</span> <span class=\"token string\">\"A,B,C,D,E\"</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>splitted3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 'A', 'B', 'C' ]</span>\n</code></pre></div>\n<p>JavaScript 以外のいくつかの言語(Perl、PHP、Ruby、Go、Rust、Java など)では第2引数を受け取った <code>String.prototype.split</code> に相当する機能は、次のように文字列の分割を行います。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> splitted2 <span class=\"token operator\">=</span> <span class=\"token string\">\"A,B,C,D,E\"</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>splitted2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 'A', 'B,C,D,E' ]</span>\n</code></pre></div>\n<p>N-1 回分割され、残りの部分が戻り値の配列の末尾に含まれています(戻り値の配列の要素数が N)。</p>\n<p>Reversible string split プロポーザルでは、このような振る舞いを持つ新しいメソッド <code>String.prototype.splitN</code> を導入します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> splitted2 <span class=\"token operator\">=</span> <span class=\"token string\">\"A,B,C,D,E\"</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">splitN</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>splitted2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 'A', 'B,C,D,E' ]</span>\n</code></pre></div>\n<p>このような文字列分割メソッドを使うと、次のようにして分割する前の文字列を取得できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token string\">\"A,B,C,D,E\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> separator <span class=\"token operator\">=</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> n <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">splitN</span><span class=\"token punctuation\">(</span>separator<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>separator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<p>提案の名前に含まれている Reversible というのはこのような可逆性のことを指しているようです。</p>\n<h2>Updates</h2>\n<h3><a href=\"https://github.com/tc39/proposal-symbols-as-weakmap-keys\">Symbols as WeakMap keys</a></h3>\n<p>Symbols as WeakMap keys は Symbol を WeakMap のキーとして使えるようにするためのプロポーザルです。</p>\n<p>現在では一部情報が古くなっていますが以前このプロポーザルについて解説する記事を書いたので興味がある方はそちらもご覧ください。</p>\n<p><div class=\"hatena-link\"><iframe class=\"hatena-link-frame\" src=\"https://hatenablog-parts.com/embed?url=https://sosukesuzuki.dev/posts/symbols-as-weakmap-keys\" style=\"border: none;\"></iframe></div></p>\n<p>以前から Symbols as WeakMap keys プロポーザルのモチベーションや基本的な振る舞いについては概ね合意がとれていました。しかし、Well-knwon Symbols やグローバルシンボルレジストリに登録された Symbol (Eternal Symbol と呼ばれている)についてはどのように扱うべきかという点で TC39 メンバー内でも意見が分かれていました。</p>\n<p>今回のミーティングで Symbols as WeakMap keys チャンピョングループは、Eternal Symbol を WeakMap のキーとして使おうとするとエラーが throw されるという振る舞いを選択したことを発表しました。それにともなって、<code>WeakMap.isValidKey(x)</code>、<code>WeakSet.isValidValue(x)</code>、<code>WeakRef.isValidTarget(x)</code>、<code>FinalizationRegistry.isValidTarget(x)</code> などのいくつかのスタティックメソッドが追加される可能性があります。</p>\n<p>しかし議事録によればまだ TC39 メンバーの中で意見が分かれているため仕様の決定には時間がかかりそうです。</p>\n<h2>参考リンク</h2>\n<ul>\n<li>TC39\n<ul>\n<li><a href=\"https://github.com/tc39/agendas/blob/main/2022/01.md\">agendas/01.md at main · tc39/agendas</a></li>\n<li><a href=\"https://github.com/tc39/notes/blob/main/meetings/2022-01/jan-24.md\">notes/jan-24.md at main · tc39/notes</a></li>\n<li><a href=\"https://github.com/tc39/notes/blob/main/meetings/2022-01/jan-25.md\">notes/jan-25.md at main · tc39/notes</a></li>\n<li><a href=\"https://github.com/tc39/notes/blob/main/meetings/2022-01/jan-26.md\">notes/jan-26.md at main · tc39/notes</a></li>\n<li><a href=\"https://github.com/tc39/proposal-array-from-async/\">Proposal Array.fromAsync</a></li>\n<li><a href=\"https://github.com/tc39/proposal-symbols-as-weakmap-keys\">Proposal Symbols as WeakMap keys</a></li>\n<li><a href=\"https://github.com/tc39/proposal-class-brand-check\">Proposal <code>class.hasInstance()</code></a></li>\n<li><a href=\"https://github.com/rbuckton/proposal-enum\">Proposal enum</a></li>\n<li><a href=\"https://github.com/tc39/proposal-reversible-string-split\">Proposal Reversible string split</a></li>\n</ul>\n</li>\n<li>Babel\n<ul>\n<li><a href=\"https://github.com/babel/proposals/issues/80\">Jan 2022 · Issue #80 · babel/proposals</a></li>\n</ul>\n</li>\n</ul>\n","metaData":{"title":"ECMAScriptの最新動向 2022年01月版","author":"sosukesuzuki","createdAt":"2022-03-09","summary":"2021年01月24日~27日に開催された TC39 meeting 88th の内容を紹介します","tags":["TC39","ECMAScript"],"updatedAt":"2022-03-09"}},{"type":"markdown","href":"/posts/release-chrome-98","slug":"release-chrome-98","content":"<p>Chrome 98 のリリースノート関連の情報をまとめました。</p>\n<ul>\n<li><a href=\"https://developer.chrome.com/blog/new-in-chrome-98/\">https://developer.chrome.com/blog/new-in-chrome-98/</a></li>\n<li><a href=\"https://developer.chrome.com/blog/new-in-devtools-98/\">https://developer.chrome.com/blog/new-in-devtools-98/</a></li>\n<li><a href=\"https://developer.chrome.com/blog/deps-rems-98/\">https://developer.chrome.com/blog/deps-rems-98/</a></li>\n<li><a href=\"https://www.chromestatus.com/features#milestone%3D98\">https://www.chromestatus.com/features#milestone%3D98</a></li>\n</ul>\n<h2>New In Chrome (Chrome 98)</h2>\n<p>Chrome98 で新しく追加された機能です。</p>\n<h3>Opting out of auto-dark themes on Android</h3>\n<p>Chrome96 から、Android では OriginTrial として「<a href=\"https://developer.chrome.com/blog/auto-dark-theme/\">Auto Dark Themes</a>」という機能を追加しています。</p>\n<p>この機能はユーザーの OS がダークモードである場合、明るいテーマのサイトに対しブラウザが自動的に生成したダークテーマを適用するものです。</p>\n<p>今回のアップデートでは OriginTrial に登録したサイトのうち、特定のページで自動生成されるダークテーマを無効にする方法が追加されました。</p>\n<p>具体的には以下のように<code>meta</code>タグを利用して無効化することが出来ます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>color-scheme<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>only light<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n</code></pre></div>\n<p>また以下のように<code>color-scheme: only light</code>というスタイルを<code>:root</code>要素にあてることでも無効化できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\"><span class=\"token pseudo-class\">:root</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color-scheme</span><span class=\"token punctuation\">:</span> only light<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>CSS スタイルを利用する方法の優れた点として、以下のように要素ごとに自動生成されるダークテーマを無効にできる点が挙げられます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\"><span class=\"token class\">.only-light</span><span class=\"token punctuation\">,</span>\n<span class=\"token id\">#my-element</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color-scheme</span><span class=\"token punctuation\">:</span> only light<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>詳しくは<a href=\"https://developer.chrome.com/blog/auto-dark-theme/\">Auto Dark Themes on Android</a>における<a href=\"https://developer.chrome.com/blog/auto-dark-theme/#per-element-opt-out\">How to opt-out of Auto Dark Theme</a>の章を参照してください。</p>\n<h3>COLRv1 font support</h3>\n<p>COLRv1 フォントがサポートされました。</p>\n<p>COLRv1 では COLRv0 と比べて、新たにフォントのグラデーションや合成などに対応しています。また、フォントが鮮明なまま圧縮率が高いのも特徴の一つです。</p>\n<p>次の参考記事では実際にグラデーションを導入したカラーフォントや COLRv1 と Bitmap を比較してどれほど鮮明なのかを確認することができます。</p>\n<p>お使いの Chrome のバージョンを 98 にアップデートした上で、ぜひ見てみてください！</p>\n<p>参考:</p>\n<p><a href=\"https://developer.chrome.com/blog/colrv1-fonts/\">https://developer.chrome.com/blog/colrv1-fonts/</a></p>\n<h3>Emulate Chrome 100 in the UA string</h3>\n<p>ここ何回かのリリースには必ず含まれている内容ですね。</p>\n<p>Chrome のバージョンがもうすぐ 100 になるので、Chrome のバージョンを使っているような実装がある場合はバージョン番号が 3 桁になっても正しく動くかどうか確認しましょう。現在のバージョンを 100 にする<a href=\"https://developer.chrome.com/blog/force-major-version-to-100/\">#force-major-version-to-100</a>フラグを使って、既存のコードが正しく動くか確認することができます。</p>\n<h3>And more!</h3>\n<h2>What's New In DevTools (Chrome 98)</h2>\n<p>DevTools についてはこちらの日本語訳を参照ください。</p>\n<p><a href=\"https://developer.chrome.com/ja/blog/new-in-devtools-97/\">https://developer.chrome.com/ja/blog/new-in-devtools-97/</a></p>\n<h2>Deprecations and removals in Chrome 98</h2>\n<h3>Remove SDES key exchange for WebRTC</h3>\n<p>Chrome97 で記載があったものですが、98 で Shipping になりました。</p>\n<p>詳細は<a href=\"https://cybozu.github.io/frontend-expert/posts/release-chrome-97\">前回のリリースノートのまとめ</a>でも記載したので、そちらをご覧ください。</p>\n<h2>その他 Chrome Platform Status に記載されていたもの</h2>\n<h3>Add support for Promise to Blobs in clipboard item</h3>\n<p><code>ClipboardItem</code>オブジェクトに対して Promise をサポートしました。</p>\n<p>今まで、Chrome では<code>ClipboardItem</code>コンストラクターの引数として「文字列または blob に解決される Promise」を受け取ることが出来ませんでした。</p>\n<p>今回のアップデートにより<code>clipboard.write</code>API が呼ばれた時に、一旦クリップボードに書き込む Blob データを同期的に取得する必要がなくなり、ブロックすることなく非同期的に write メソッドを呼び出すことができるようになります。</p>\n<h3>CSS Color Adjust: 'only' keyword for color-scheme</h3>\n<p><code>color-scheme</code>プロパティの<code>only</code>キーワードがサポートされました。only を指定することでユーザーエージェント(ブラウザ)が要素のカラースキーマを上書きすることを禁止します。</p>\n<p>参考:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/ja/docs/Web/CSS/color-scheme\">https://developer.mozilla.org/ja/docs/Web/CSS/color-scheme</a></li>\n<li><a href=\"https://drafts.csswg.org/css-color-adjust/#color-scheme-prop\">https://drafts.csswg.org/css-color-adjust/#color-scheme-prop</a></li>\n</ul>\n<h3>FileSystemHandle::Remove() method</h3>\n<p>FileSystemHandle に<code>Remove()</code>メソッドを追加しました。</p>\n<p>今ままで<code>FileSystemHandle</code>から直接ファイルやディレクトリを削除することは不可能で、親ディレクトリの<code>FileSystemDirectoryHandle</code>から<code>RemoveEntry</code>を呼ぶ必要がありました。</p>\n<p>今回のアップデートにより「<code>showSaveFilePicker</code>から<code>FileHandle</code>を取得したが、結局保存したくなくなったのでファイルを削除したい」というような、よくあるユースケースに対応できるようになりました。</p>\n<h3>HDR CSS Media Queries: dynamic-range</h3>\n<p>CSS のメディアクエリーに<code>dynamic-range</code>が追加されました。</p>\n<p>次のサンプルコードのように、ディスプレイが HDR をサポートしてるかしていないかを<code>dynamic-range</code>で判別できるようになります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token comment\">/* HDRをサポートしていない */</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">dynamic-range</span><span class=\"token punctuation\">:</span> standard<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\"><span class=\"token class\">.contrast</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">red</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* ディスプレイがHDRをサポートしている */</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">dynamic-range</span><span class=\"token punctuation\">:</span> high<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\"><span class=\"token class\">.contrast</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">green</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>参考:</p>\n<p><a href=\"https://www.w3.org/TR/mediaqueries-5/#dynamic-range\">https://www.w3.org/TR/mediaqueries-5/#dynamic-range</a></p>\n<h3>New window.open() popup vs. window behavior</h3>\n<p><code>window.open()</code>では第 3 引数として<code>windowFeatures</code>という option を DOMString で指定できますが、今バージョンから<code>popup</code>という機能に対応するようになりました。<code> popup=yes</code>または<code>popup=1</code>のように指定することで、ポップアップウィンドウを利用して開くことをブラウザに要求することが出来ます。</p>\n<p>この変更は window.open の新しくリリースされた仕様に合わせて、相互運用性のために行われた変更です。 広報互換性のため、ポップアップやタブ/ウィンドウを開く既存の動作に変更はありません。</p>\n<h3>Private Network Access preflight requests for subresources</h3>\n<p>サブリソースに対するプライベートネットワークリクエストの前に CORS プリフライトリクエストを送信し、ターゲットサーバーからの明示的な許可を求めるようになります。</p>\n<p>プライベートネットワークリクエストとは以下のようなリクエストとのことです。</p>\n<ul>\n<li>パブリック Web サイトからプライベート IP アドレスまたはローカルホストへのリクエスト</li>\n<li>プライベートな Web サイト（イントラネットなど）からローカルホストへのリクエスト</li>\n</ul>\n<p>プライベートネットワーク上のサービスや機器(ネットワーク機器やプリンタなど)は CSRF 対策が不十分なものが多く、今回のアップデートはこれらの攻撃リスクを軽減させるための対策になります。</p>\n<h3>WritableStream controller AbortSignal</h3>\n<p><a href=\"https://developer.mozilla.org/ja/docs/Web/API/WritableStream/abort\">WritableStream.abort()</a>を実行した際に、ストリームへの進行中の書き込みの中止や終了がすぐに実行されるようになりました。</p>\n<h3>self.structuredClone()</h3>\n<p>ディープコピーができる<code>structuredClone()</code>がついに 98 で実装されました。</p>\n<p>お使いの Chrome を 98 にアップデートした上で、DevTools の Console で次のサンプルコードを試しに実行してみると<code>structuredClone()</code>で実際にディープコピーが実行されていることが確認できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> myOriginal <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">someProp</span><span class=\"token operator\">:</span> <span class=\"token string\">\"with a string value\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">anotherProp</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">withAnotherProp</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> myShallowCopy <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token spread operator\">...</span>myOriginal <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nmyShallowCopy<span class=\"token punctuation\">.</span><span class=\"token property-access\">anotherProp</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">withAnotherProp</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"a new value\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>\n  myOriginal<span class=\"token punctuation\">.</span><span class=\"token property-access\">anotherProp</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">withAnotherProp</span><span class=\"token punctuation\">,</span>\n  myShallowCopy<span class=\"token punctuation\">.</span><span class=\"token property-access\">anotherProp</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">withAnotherProp</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> myOriginal <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">someProp</span><span class=\"token operator\">:</span> <span class=\"token string\">\"with a string value\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">anotherProp</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">withAnotherProp</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> myDeepCopy <span class=\"token operator\">=</span> <span class=\"token function\">structuredClone</span><span class=\"token punctuation\">(</span>myOriginal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyDeepCopy<span class=\"token punctuation\">.</span><span class=\"token property-access\">anotherProp</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">withAnotherProp</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"a new value\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>\n  myOriginal<span class=\"token punctuation\">.</span><span class=\"token property-access\">anotherProp</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">withAnotherProp</span><span class=\"token punctuation\">,</span>\n  myDeepCopy<span class=\"token punctuation\">.</span><span class=\"token property-access\">anotherProp</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">withAnotherProp</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>参考:</p>\n<p><a href=\"https://web.dev/structured-clone/\">https://web.dev/structured-clone/</a></p>\n","metaData":{"title":"COLRv1 fontのサポートなど、Chrome 98 リリースノートまとめ","author":"nus3","editor":"Saji","createdAt":"2022-02-18","summary":"Chrome 98 のリリースノートの要約です","tags":["Releasenote","Browser"],"updatedAt":"2022-02-18"}},{"type":"markdown","href":"/posts/considerations-for-monorepo","slug":"considerations-for-monorepo","content":"<p>それっぽいタイトルを付けましたが特に意味はないです。</p>\n<p><a href=\"https://cybozu.github.io/frontend-expert/posts/turborepo\">workspace を使ったコマンドを最適化して実行する Turborepo について</a>のお話で Turborepo を軽く触ってみた際に<code>npx create-turbo@latest</code>で作られる構成がとてもわかりやすく、プロダクトの初期段階からモノレポを採用するのは選択肢の 1 つとしていいのでは、と思い続編を書きました。</p>\n<p>前回と同じくサンプルのリポジトリはこちらになります。<br>\n<a href=\"https://github.com/nus3/p-turborepo/tree/main/yarn\">https://github.com/nus3/p-turborepo/tree/main/yarn</a></p>\n<h2>概要</h2>\n<ul>\n<li>モノレポを採用することで、同一リポジトリ内で自作した汎用的なライブラリやコンポーネントを複数のアプリケーションで使いまわせる</li>\n<li>モノレポの規模が大きくなってきた場合には、モノレポ内のパッケージを npm に公開することでアプリケーションとパッケージを非同期に開発できる</li>\n<li>Yarn や npm の workspace はイイゾ！</li>\n</ul>\n<h2>モノレポとは</h2>\n<p>モノレポとは本記事では npm や Yarn の workspaces 機能を使い、1 つのリポジトリ内で複数の npm パッケージを管理している構成のこととします。</p>\n<h3>npm や Yarn の workspaces</h3>\n<p>npm や Yarn の workspaces は 1 つのリポジトリ内で複数の npm パッケージを管理するための機能です。</p>\n<ul>\n<li><a href=\"https://classic.yarnpkg.com/lang/en/docs/workspaces/\">Yarn(v1)</a></li>\n<li><a href=\"https://yarnpkg.com/features/workspaces\">Yarn(v2 以降)</a></li>\n<li><a href=\"https://docs.npmjs.com/cli/v8/using-npm/workspaces\">npm</a></li>\n</ul>\n<p>workspaces を使うにはリポジトリのルート直下にある<code>package.json</code>に<code>workspaces</code>を追加します。</p>\n<p>例えば<code>apps</code>配下にアプリケーションの npm パッケージを、<code>packages</code>配下に汎用的なコンポーネント、ライブラリなどの npm パッケージを入れる場合、次のようになります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"workspaces\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"apps/*\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"packages/*\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>apps</code> 配下にある<code>nus3-a</code>というアプリケーションから <code>packages</code> 配下にある<code>nus3-ui</code>という名前の npm パッケージを使う場合、それぞれ次のような<code>package.json</code>になります。</p>\n<p><code>apps/nus3-a</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nus3-a\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"nus3-ui\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"*\"</span>\n    <span class=\"token comment\">// Yarnのv2以降であれば`workspace:`構文が使えるようになる</span>\n    <span class=\"token comment\">// REF: (nus3) https://yarnpkg.com/features/workspaces#workspace-ranges-workspace</span>\n    <span class=\"token comment\">// \"nus3-ui\": \"workspace:*\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>packages/nus3-ui</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nus3-ui\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.0\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>workspaces 内にある npm パッケージの名前が npm に公開されているパッケージ名と同じ場合は、 workspace 内の npm パッケージが優先してインストールされます。後々 workspaces 内の npm パッケージを公開する可能性がある場合、パッケージ名は npm で公開されているパッケージ名と被らない名前にした方が良いかもしれません。</p>\n<p>workspace 内の npm パッケージを依存関係に追加すると node_modules にシンボリックリンクが作成されます。次の画像のように node_modules 配下に<code>nus3-ui</code>と<code>nus3-a</code>のシンボリックリンクが追加されていることが確認できます。</p>\n<p><img src=\"/frontend-expert/image/considerations-for-monorepo/symlink.png\" alt=\"node_modulesに作成されたシンボリックリンク\" width=\"340\" height=\"101\" ></p>\n<p>シンボリックリンクにより依存する npm パッケージのコードを直接参照するので、npm に公開しバージョン管理するまでは、version は<code>0.0.0</code>、かつ、使う側は<code>\"nus3-ui\": \"*\"</code>のようにワイルドカードを指定するとバージョンのことを意識せずに管理できます。</p>\n<h3>create-turbo で作られるモノレポ構成</h3>\n<p>create-turbo(<code>npx create-turbo@latest</code>) では作られるモノレポ構成に次のようなものが含まれます。</p>\n<ul>\n<li>npm に公開せずに config をモノレポ内の別パッケージに分けて、複数のパッケージから使用する</li>\n<li>React を使った汎用的なコンポーネント(tsx)を別パッケージに分けて アプリケーション(Next.js)で使用する</li>\n</ul>\n<p>それぞれ見ていきましょう。</p>\n<h4>npm に公開せずに config をモノレポ内の別パッケージに分けて、複数のパッケージから使用する</h4>\n<p>ESLint や Stylelint の config は npm に公開することで、異なるプロジェクトで共通の設定を使えます。サイボウズでは<a href=\"https://github.com/cybozu/eslint-config\">@cybozu/eslint-config</a>や<a href=\"https://github.com/cybozu/stylelint-config\">@cybozu/stylelint-config</a>として npm に公開しています。</p>\n<p>モノレポ内であれば ESLint や Stylelint の設定を npm に公開・管理せずに共有することもできます。</p>\n<p><code>packages/nus3-config</code><br>\nで共通の ESLint や TSConfig を定義して、<code>package.json</code> の<code>files</code> に指定します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nus3-config\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"files\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"eslint-preset.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"tsconfig.base.json\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"tsconfig.nextjs.json\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"tsconfig.react-library.json\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>apps/nus3-a</code>\nで<code>nus3-config</code>を追加し、<code>nus3-config</code>から TSConfig や ESLint のルールを適用します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nus3-a\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"eslint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"8.6.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"nus3-config\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"*\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>apps/nus3-a/tsconfig.json</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nus3-config/tsconfig.nextjs.json\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>apps/nus3-a/.eslintrc</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nus3-config/eslint-preset\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4>React を使った汎用的なコンポーネント(tsx)を別パッケージに分けて アプリケーション(Next.js)で使用する</h4>\n<p>create-turbo では汎用的な React コンポーネントを tsx ファイルのまま <code>packages</code> 配下の npm パッケージで管理し、Next.js の<a href=\"https://github.com/martpie/next-transpile-modules\">plugin</a>を使って アプリケーション 側でトランスパイルしています。</p>\n<p><code>packages/nus3-ui</code><br>\nで React(tsx)のコンポーネントを実装します。実装した tsx ファイルのパスをそのまま<code>main</code>と<code>types</code>に追加します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nus3-ui\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./index.tsx\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"types\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./index.tsx\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@types/react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"17.0.37\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@types/react-dom\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"17.0.11\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"typescript\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"4.5.4\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>packages/nus3-ui/index.tsx</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">VFC</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">Button</span><span class=\"token operator\">:</span> <span class=\"token function-variable function\">VFC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">ボタン</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>apps/nus3-a</code><br>\n<code>nus3-ui</code>の tsx ファイルを<code>nus3-a</code>で<code>next-transpile-modules</code>を使ってトランスパイルします。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nus3-a\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"next-transpile-modules\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"9.0.0\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>apps/nus3-a/next.config.js</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> withTM <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"next-transpile-modules\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"nus3-ui\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token function\">withTM</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h2>フロントエンドのモノレポ戦略</h2>\n<p>筆者のこれまでの経験では、創業して間もない会社やプロダクトの初期フェーズで、複数のアプリケーションの開発が並列して始まることが多くありました。そういった状況では、モノレポを採用しておくと複数のアプリケーションで共通したコンポーネントやライブラリを少ないコストで使用できます。</p>\n<p>また、モノレポ内で共通して使っているパッケージに変更を加える際に、その影響範囲が把握できないくらいモノレポの規模が大きくなった場合には、パッケージを npm に公開してバージョン管理することで、バージョンの変更タイミングを各々のアプリケーションに任せることができ、アプリケーションとパッケージの開発を非同期に行うことができます。</p>\n<p>このように、初期段階では汎用的な npm パッケージをアセットとして複数のアプリケーションに提供することで開発スピードを上げられ、また、規模が大きくなってきた場合はパッケージを npm に公開するといった方針をとることもできます。</p>\n<p>もちろん、1 つのリポジトリですべてのパッケージを管理することやコードベースが大きく複雑になることなどデメリットもあり、モノレポを採用することが適切ではない場合もあります。メリット・デメリットを踏まえつつ、フロントエンドの技術選定の中にモノレポの採用を選択肢の 1 つとして入れてもいいかもしれません。</p>\n","metaData":{"title":"フロントエンドのモノレポ構成はスケーリングの夢を見るか","author":"nus3","editor":["nakajmg"],"createdAt":"2022-01-31","summary":"Turborepoのstarterでできるモノレポ構成からスケーリングするフロントエンドの構成について考える","tags":["Monorepo","Turborepo"],"updatedAt":"2022-01-31"}},{"type":"markdown","href":"/posts/tc39-meeting-2021-12","slug":"tc39-meeting-2021-12","content":"<p>TC39 の 87 回目のミーティングが 12月14日 ~ 12月15日に開催されました。このミーティングで議題に上がった提案とそのステージの移動について紹介します。</p>\n<h2>For Stage 4</h2>\n<p><strong>For Stage 4 の提案はありませんでした</strong></p>\n<h2>For Stage 3</h2>\n<h3><a href=\"https://github.com/tc39/proposal-array-grouping\">Array Grouping</a></h3>\n<p><strong>Stage 3 になりました</strong></p>\n<p>Array Grouping は <code>Array.prototype.groupBy</code> と <code>Array.prototype.groupByToMap</code> を追加するプロポーザルです。</p>\n<p>2021 年 10 月のミーティングで Stage 2 になったばかりですが、今回のミーティングで Stage 3 になりました。</p>\n<p>また、今回から <code>Array.prototype.groupByToMap</code> が追加されています。</p>\n<p>これは <code>groupBy</code> の結果が <code>Map</code> になったものです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> odd  <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">odd</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> even <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">even</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">groupByToMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> num <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> even<span class=\"token operator\">:</span> odd<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Map { {odd: true}: [1, 3, 5], {even: true}: [2, 4] }</span>\n</code></pre></div>\n<h2>For Stage 2</h2>\n<h3><a href=\"https://github.com/tc39/proposal-array-from-async/\">Array.fromAsync</a></h3>\n<p><strong>Stage 2 になりました</strong></p>\n<p><code>Array.fromAsync</code> は非同期イテラブルから配列を生成するためのスタティックメソッドを追加するプロポーザルです。</p>\n<p>JavaScript では <code>Array.from</code> を使ってイテラブルから配列を生成できます。しかし、非同期イテラブルから配列を生成することはできません。</p>\n<p>このプロポーザルによって追加される <code>Array.fromAsync</code> メソッドを使うと次のようにして非同期イテラブルから配列を生成できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token operator\">*</span> <span class=\"token function\">asyncGen</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword control-flow\">yield</span> i <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fromAsync</span><span class=\"token punctuation\">(</span><span class=\"token function\">asyncGen</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3><a href=\"https://github.com/tc39/proposal-regexp-r-escape\">RegExp <code>\\R</code> escape</a></h3>\n<p><strong>Stage 2 になりませんでした</strong></p>\n<p>RegExp <code>\\R</code> escape は以前 <a href=\"https://github.com/rbuckton/proposal-regexp-features\">RegExp Language Features</a> として提案されていた正規表現の機能群の１つで、正規表現内で line terminator とシンプルにマッチングさせるために新しく <code>\\R</code> を導入する提案です。</p>\n<p>この機能は <code>u</code> もしくは <code>v</code> フラグが有効になっているときのみ有効になります。そして、大まかには次のパターンと等価です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token operator\">?</span><span class=\"token operator\">></span>\\r\\n<span class=\"token operator\">?</span><span class=\"token operator\">|</span><span class=\"token punctuation\">[</span>\\x0A<span class=\"token operator\">-</span>\\x0C\\x85\\u<span class=\"token punctuation\">{</span><span class=\"token number\">2028</span><span class=\"token punctuation\">}</span>\\u<span class=\"token punctuation\">{</span><span class=\"token number\">2029</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>この正規表現の機能は Perl をはじめとする多くの正規表現エンジンに実装されていて、TC39 においてもそのユースケースは認められているようです。</p>\n<p>しかし、<a href=\"https://github.com/tc39/proposal-regexp-set-notation\">RegExp Set Notation Proposal</a> の sequece properties によって同等の機能が実現できる可能性があるためその方向で調査しなおすべきだという結論になり Stage 2 には到達しませんでした。</p>\n<h3><a href=\"https://github.com/tc39/proposal-regexp-modifiers\">RegExp Modifiers</a></h3>\n<p><strong>Stage 2 になりました</strong></p>\n<p>RegExp Modifiers は <code>\\R</code> escape と同じようにもともと RegExp Language Features の機能の１つでした。</p>\n<p>この提案は正規表現パターン内でのフラグの変更を可能にします。</p>\n<p>例を示します。</p>\n<p>次の例中の正規表現パターン全体には <code>i</code> フラグが適用されてます。しかし２つめの <code>[a-z]</code> は <code>?-i:</code> という RegExp Modifiers の構文を使って <code>i</code> フラグを無効にしてます。このとき一文字目では大文字小文字が無視されるものの、二文字目では大文字小文字が無視されません。</p>\n<p>したがってこのパターンは <code>\"ab\"</code> や <code>\"Ab\"</code> にはマッチし <code>\"aB\"</code> にはマッチしません。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> re1 <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token anchor function\">^</span><span class=\"token char-class\"><span class=\"token char-class-punctuation punctuation\">[</span><span class=\"token range\">a<span class=\"token range-punctuation operator\">-</span>z</span><span class=\"token char-class-punctuation punctuation\">]</span></span><span class=\"token group punctuation\">(</span><span class=\"token quantifier number\">?</span>-i:<span class=\"token char-class\"><span class=\"token char-class-punctuation punctuation\">[</span><span class=\"token range\">a<span class=\"token range-punctuation operator\">-</span>z</span><span class=\"token char-class-punctuation punctuation\">]</span></span><span class=\"token group punctuation\">)</span><span class=\"token anchor function\">$</span></span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">;</span>\nre1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ab\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nre1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ab\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nre1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n</code></pre></div>\n<h3><a href=\"https://github.com/tc39/proposal-regexp-buffer-boundaries\">RegExp Buffer Boundaries</a></h3>\n<p><strong>Stage 2 になりました</strong></p>\n<p>RegExp Buffer Boundaries も RegExp Language Features の機能の１つでした。</p>\n<p>この提案は、それぞれ入力の最初と最後にマッチする <code>\\A</code> と <code>\\z</code> を導入します。<code>m</code> フラグの影響を受けないことを除けば <code>^</code> と <code>$</code> に似ています。</p>\n<p><code>^</code> と <code>$</code> はそれぞれ最初と最後にマッチしますが、<code>m</code> フラグが有効になっているときは行頭と行末にマッチします。しかし RegExp Buffer Boundaries が導入する <code>\\A</code> と <code>\\z</code> は、たとえ <code>m</code> フラグが有効であっても入力の最初と最後にマッチします。</p>\n<p>例を示します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token anchor function\">\\A</span>foo<span class=\"token alternation keyword\">|</span><span class=\"token anchor function\">^</span>bar</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">um</span></span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>このパターンでは <code>foo</code> に <code>\\A</code> がついています。したがって入力の最初が <code>foo</code> の文字列にマッチします。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">re<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nre<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<p>しかし入力の最初ではなく行頭が <code>foo</code> の文字列にはマッチしません。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">re<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nfoo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n</code></pre></div>\n<p><code>bar</code> には <code>^</code> がついています。パターン全体で <code>m</code> フラグが有効になっているので、入力の先頭と行頭が <code>bar</code> の文字列にマッチします。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">re<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nre<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bar\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nre<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nbar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<h2>For Stage 1</h2>\n<h2>Updates</h2>\n<p>ステージの移動はないものの、アップデートがあった提案です。</p>\n<h3><a href=\"https://github.com/tc39/proposal-temporal\">Temporal</a></h3>\n<p>いくつかの仕様上の軽微な修正がありました。修正箇所について説明した<a href=\"https://ptomato.name/talks/tc39-2021-12/#1\">スライド</a>が公開されています。</p>\n<h3><a href=\"https://github.com/tc39/proposal-decimal\">Decimal</a></h3>\n<p>Decimal は現在 Stage 1 ですが、2022 年に Stage 2 に到達することを目指しているそうです。進捗を共有するための<a href=\"https://drive.google.com/file/d/1qdieei11dZgDY_KnJhSBcFyHTMZOmCJr/view\">スライド</a>が公開されています。</p>\n<h3><a href=\"https://github.com/tc39/proposal-destructuring-private\">Destructuring Private Fields</a></h3>\n<p>Destructuring Private Fields が提案された当初は小さな修正で十分だと考えられていました。しかし真剣に検討してみるといくつかの仕様上の難しい問題が明らかになったそうです。そこで再度レビュワーを募りレビューをやり直すことが決定しました。</p>\n<h3><a href=\"https://github.com/tc39/proposal-shadowrealm\">Shadow Realms</a></h3>\n<p>いくつかの仕様上の重要な変更があったようです。詳しくは<a href=\"https://docs.google.com/presentation/d/12PM5c4_yUnqXHjvACh8HEN5oJwgei-0T0hX_hlqjfDU/edit#slide=id.ge435a9058a_0_0\">スライド</a>に記載されています。</p>\n<h3><a href=\"https://github.com/tc39/proposal-record-tuple/\">Records and Tuples</a></h3>\n<p>Record と Tuple の中で通常のオブジェクトを扱う方法について議論されました。その方法とその懸念についての Decision Tree が<a href=\"https://drive.google.com/file/d/1lVYn8_sHecqxW08vN5Tu7rXZn7GemBqO/view\">スライド</a>として公開されています。</p>\n<h2>Normative Changes</h2>\n<h3><a href=\"https://github.com/tc39/ecma262/pull/2106\"><code>import.meta[Symbol.toStringTag]</code> の追加</a></h3>\n<p><strong>合意は得られませんでした</strong></p>\n<p><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag\"><code>Symbol.toStringTag</code></a> という Well-known Symbol があります。\nこの Symbol は <code>Object.prototype.toString()</code> によって表示される文字列の決定に使われます。</p>\n<p>具体的な例を示します。</p>\n<p>オブジェクト <code>foo</code> の <code>[Symbol.toStringTag]</code> に <code>\"I'm foo\"</code> という文字列をセットしておくと、<code>foo.toString()</code> は <code>[object I'm foo]</code> になります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token known-class-name class-name\">Symbol</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">toStringTag</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token string\">\"I'm foo\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"[object I'm foo]\"</span>\n</code></pre></div>\n<p>今回のミーティングでは <code>import.meta</code> の <code>[Symbol.toStringTag]</code> に <code>\"ImportMeta\"</code> という文字列を設定するという修正について議論されました。</p>\n<p>この挙動についての Issue は <code>import.meta</code> の策定時にも存在しましたが、そのときすでに <code>import.meta</code> が Stage 4 を達成していたことからクローズされました。</p>\n<p>そして今回のミーティングでもこの仕様の修正についての合意は得られませんでした。この修正のための Pull Request が作成された時点で以下のような懸念が公開されていました。</p>\n<ul>\n<li><code>import.meta</code> は、ECMAScript の範囲では <a href=\"https://tc39.es/ecma262/#sec-hostgetimportmetaproperties\"><code>HostGetImportMetaProperties</code></a> というホスト定義の abstract operation によって中身が決定されるオブジェクトであるということしか決まっておらず、ホストにとって必要であればホスト側で <code>import.meta</code> の <code>Symbol.toStringTag</code> を定義できる。</li>\n<li>仕様内で作成される他のオブジェクトとは異なり、<code>import.meta</code> はホストのデータによって生成されるものであり、ECMAScript の範囲でプロパティを生成することを考慮したものではない。</li>\n</ul>\n<h2>参考リンク</h2>\n<ul>\n<li>TC39\n<ul>\n<li><a href=\"https://github.com/tc39/agendas/blob/main/2021/12.md\">Agenda for the 87th meeting of Ecma TC39</a></li>\n<li><a href=\"https://github.com/tc39/ecma262/pull/2106\">Normative: Add import.meta[Symbol.toStringTag]</a></li>\n<li><a href=\"https://github.com/tc39/proposal-array-grouping\">Proposal Array Grouping</a></li>\n<li><a href=\"https://github.com/tc39/proposal-shadowrealm\">Proposal Shadow Realms</a></li>\n<li><a href=\"https://github.com/tc39/proposal-array-from-async/\">Proposal <code>Array.fromAsync</code></a></li>\n<li><a href=\"https://github.com/rbuckton/proposal-regexp-features\">Proposal RegExp Language Features</a></li>\n<li><a href=\"https://github.com/tc39/proposal-regexp-r-escape\">Proposal RegExp <code>\\R</code> escape</a></li>\n<li><a href=\"https://github.com/tc39/proposal-regexp-set-notation\">Proposal RegExp Set Notation</a></li>\n<li><a href=\"https://github.com/tc39/proposal-regexp-buffer-boundaries\">Proposal RegExp Buffer Boundaries</a></li>\n<li><a href=\"https://github.com/tc39/proposal-regexp-modifiers\">Proposal RegExp Modifiers</a></li>\n<li><a href=\"https://github.com/tc39/proposal-temporal\">Proposal Temporal</a></li>\n<li><a href=\"https://github.com/tc39/proposal-shadowrealm\">Proposal Shadow Realms</a></li>\n<li><a href=\"https://github.com/tc39/proposal-record-tuple/\">Proposal Records and Tuples</a></li>\n<li><a href=\"https://github.com/tc39/proposal-destructuring-private\">Proposal Destructuring Private Fields</a></li>\n</ul>\n</li>\n<li>Babel\n<ul>\n<li><a href=\"https://github.com/babel/proposals/issues/78\">Dec 2021 · Issue #78 · babel/proposals</a></li>\n</ul>\n</li>\n<li>ECMA262\n<ul>\n<li><a href=\"https://tc39.es/ecma262/#prod-ImportMeta\"><code>import.meta</code></a></li>\n<li><a href=\"https://tc39.es/ecma262/#sec-hostgetimportmetaproperties\"><code>HostGetImportMetaProperties</code></a></li>\n</ul>\n</li>\n</ul>\n","metaData":{"title":"ECMAScriptの最新動向 2021年12月版","author":"sosukesuzuki","createdAt":"2022-01-24","summary":"2021年12月14日~15日に開催された TC39 meeting 87th の内容を紹介します","tags":["TC39","ECMAScript"],"updatedAt":"2022-01-24"}},{"type":"markdown","href":"/posts/release-chrome-97","slug":"release-chrome-97","content":"<p>Chrome 97 のリリースノート関連の情報をまとめました。</p>\n<ul>\n<li><a href=\"https://developer.chrome.com/blog/new-in-chrome-97/\">https://developer.chrome.com/blog/new-in-chrome-97/</a></li>\n<li><a href=\"https://developer.chrome.com/blog/new-in-devtools-97/\">https://developer.chrome.com/blog/new-in-devtools-97/</a></li>\n<li><a href=\"https://developer.chrome.com/blog/deps-rems-97/\">https://developer.chrome.com/blog/deps-rems-97/</a></li>\n<li><a href=\"https://www.chromestatus.com/features#milestone%3D97\">https://www.chromestatus.com/features#milestone%3D97</a></li>\n<li><a href=\"https://v8.dev/blog/v8-release-97\">https://v8.dev/blog/v8-release-97</a></li>\n</ul>\n<h2>New In Chrome (Chrome 97)</h2>\n<p>Chrome97 で新しく追加された機能です。</p>\n<h3>Web Transport</h3>\n<p>サーバーとクライアントの双方向リアルタイム通信を実現する新しいフレームワークとして提案されている<code>Web Transport</code>が正式にサポートされました。</p>\n<p>Web Transport は既存の代表的手法である<code>Web Sockets</code>や<code>WebRTC</code>と比べ以下のような利点を持っています。</p>\n<ul>\n<li><code>WebSockets</code>よりも低遅延な通信を実現する</li>\n<li>P2P メッセージング用に設計された<code>WebRTC</code>と違い、クライアントサーバーメッセージングを前提として設計されているため扱いやすい</li>\n</ul>\n<p>Web Transport では<code>streams API</code>と<code>datagram API</code>という２種類の通信 API がサポートされており、それぞれ以下のような特徴から使い分けることができます。</p>\n<ul>\n<li>streams API : 信頼性の高い順序付けられたデータ送信に最適</li>\n<li>datagram API : 信頼性や順序がそこまで求められず、より低遅延でベストエフォートなデータ送信に最適</li>\n</ul>\n<p>注意点として、Web Transport を試すためには<code>HTTP/3</code>をサポートしたサーバーが必要となります。</p>\n<p>Web Transport は以下のような形で簡単に利用することができます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'https://example.com:4999/foo/bar'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> transport <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebTransport</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// WebTransportインスタンス生成</span>\n<span class=\"token keyword control-flow\">await</span> transport<span class=\"token punctuation\">.</span><span class=\"token property-access\">ready</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 接続を待つ</span>\n\n<span class=\"token keyword\">const</span> writer <span class=\"token operator\">=</span> transport<span class=\"token punctuation\">.</span><span class=\"token property-access\">datagrams</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">writable</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> data1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">65</span><span class=\"token punctuation\">,</span> <span class=\"token number\">66</span><span class=\"token punctuation\">,</span> <span class=\"token number\">67</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwriter<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">write</span><span class=\"token punctuation\">(</span>data1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>詳しくは<a href=\"https://web.dev/webtransport/\">Experimenting with WebTransport</a>を参照しててください。</p>\n<h3>Script type feature detection</h3>\n<p>ブラウザ側で<code>ES Modules</code>の対応状況を判別する方法として今まで<code>nomodule</code>属性がありましたが、<code>import maps</code>, <code>speculation rules</code>,<code>bundle preloading</code>などの新しく提案されている仕様には対応しきれていませんでした。</p>\n<p>今回サポートされた<code>HTMLScriptElement.supports()</code>を利用することで以下のように JavaScript側でscriptがどの仕様に対応しているかのチェックをすることができるようになります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">HTMLScriptElement</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">supports</span><span class=\"token punctuation\">(</span><span class=\"token string\">'importmap'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Use &#x3C;script type=\"importmap\" ...></span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">HTMLScriptElement</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">supports</span><span class=\"token punctuation\">(</span><span class=\"token string\">'module'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Use &#x3C;script type=\"module\" ...></span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Use classic method...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>New array prototypes</h3>\n<p>Array と TypedArray で<code>findLast()</code>と<code>findLastIndex()</code>が使えるようになりました。\nこの二つの関数は引数で渡された条件に合致する配列内の<strong>最後の要素</strong>の値、位置をそれぞれ返します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">130</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> last <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">findLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> value <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 44</span>\n<span class=\"token keyword\">const</span> lastIndex <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">findLastIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> value <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>lastIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\n</code></pre></div>\n<h3>Emulate Chrome 100 in the UA string</h3>\n<p>あと数ヶ月で Chrome のバージョンは 3 桁となる 100 に到達します。\nバージョンや UA 文字列をパースするコードがある場合は 3 桁でも動くかどうか確認しましょう。</p>\n<p>現在のバージョンを 100 にする<a href=\"https://developer.chrome.com/blog/force-major-version-to-100/\">#force-major-version-to-100</a>フラグを使って、既存のコードが正しく動くか確認することができます。</p>\n<h3>And more!</h3>\n<p>上記以外のようなアップデートがあります。</p>\n<ul>\n<li>フォーム入力の改行が Gecko や WebKit と同じ方法で正規化されるようになりました。\n<ul>\n<li>これによりブラウザ間の相互運用性が向上しました。</li>\n</ul>\n</li>\n<li><code>client hint</code>のプレフィクスを<code>sec-ch</code>にするように標準化を進めています。\n<ul>\n<li>例えば<code>dpr</code>は<code>sec-ch-dpr</code>のようになります。</li>\n<li>以前の仕様も当分の間サポートを続けますが、いずれは非推奨となり削除されることを想定しましょう。</li>\n</ul>\n</li>\n<li>閉じている<code>&#x3C;detail></code>要素が検索可能になり、閉じている<code>&#x3C;detail></code>要素内の element にスクロールしようとした際は閉じられている<code>&#x3C;detail></code>要素を自動的に開くようになりました。</li>\n</ul>\n<h3>What's New In DevTools (Chrome 97)</h3>\n<p>DevTools についてはこちらの日本語訳を参照ください。</p>\n<p><a href=\"https://developer.chrome.com/ja/blog/new-in-devtools-97/\">https://developer.chrome.com/ja/blog/new-in-devtools-97/</a></p>\n<h3>Deprecations and removals in Chrome 97</h3>\n<p>Chrome97 で非推奨になったもの、もしくは削除されたものです</p>\n<p><a href=\"https://developer.chrome.com/blog/deps-rems-97/\">https://developer.chrome.com/blog/deps-rems-97/</a></p>\n<h3>Remove SDES key exchange for WebRTC</h3>\n<p>WebRTC の SDES 鍵交換の仕様は 2013 年以降、関連する IETF の標準仕様では MUST NOT となっており、近年では Chrome での使用率も大幅に低下しているので Chrome97 で廃止されました。</p>\n<p>参考:</p>\n<p><a href=\"https://webrtc-security.github.io/report_ja/\">https://webrtc-security.github.io/report_ja/</a></p>\n<h3>Remove WebSQL in third-party contexts</h3>\n<p>サードパーティ製の WebSQL が廃止されました。W3C では代わりに Web Storage と Indexed Database を推奨しています。</p>\n<h3>Remove SDP Plan B</h3>\n<p>WebRTC でセッションを確立するために使用される SDP に非標準の実装であった<code>Plan B</code>が削除されました。</p>\n<p>参考: SDP の Unified Plan と Plan B</p>\n<p><a href=\"https://blog.jxck.io/entries/2018-01-05/sdp-unified-plan.html\">https://blog.jxck.io/entries/2018-01-05/sdp-unified-plan.html</a></p>\n<h2>その他 Chrome Platform Status に記載されていたもの</h2>\n<p><a href=\"https://www.chromestatus.com/features#milestone%3D97\">https://www.chromestatus.com/features#milestone%3D97</a></p>\n<h3>Feature policy for Keyboard API</h3>\n<p>各言語に対応した keybord レイアウト情報を返す<code>getLayoutMap()</code>メソッドは全てのコンテキスト(iframe 内など)では利用できないという問題点がありました。今回のアップデートで iframe の allow 属性に<code>keyboard-map</code>を追加することでこの問題を解決することができるようになりました。</p>\n<p><a href=\"https://chromestatus.com/features/5657965899022336\">https://chromestatus.com/features/5657965899022336</a></p>\n<h3><code>PermissionStatus.prototype.name</code></h3>\n<p><code>PermissionStatus</code> インターフェースに読み取り専用の属性 <code>\"name\"</code> を追加し、<code>PermissionStatus</code> が作成された後、パーミッションの名前が取得できるようになりました。</p>\n<p>今までは<code>Permissions API</code> を使って複数のパーミッションを同時に問い合わせた際、どの PermissionStatus がどのパーミッションに対応しているのかを識別する方法がありませんでした。</p>\n<p><a href=\"https://chromestatus.com/features/5651653697994752\">https://chromestatus.com/features/5651653697994752</a></p>\n<h3>Propagate request origin and redirect chain in passthrough service workers.</h3>\n<p><code>fetch(evt.request)</code>メソッドで navigation requests を発行する ServiceWorker が<code>FetchEvent.request</code> からのオリジンとリダイレクトチェーンを使用するようになります。</p>\n<p>今までは常に ServiceWorker のオリジンが設定され、リダイレクトチェーンを使用することはありませんでした。</p>\n<p><a href=\"https://chromestatus.com/features/5752539724120064\">https://chromestatus.com/features/5752539724120064</a></p>\n<h3>Support calc(<code>&#x3C;number></code>) where only accepts <code>&#x3C;integer></code></h3>\n<p><a href=\"https://cybozu.github.io/frontend-expert/posts/release-chrome-96\">Chrome 96 リリースノートまとめ</a>にも記載したものが、Chrome97 で追加されました。</p>\n<blockquote>\n<p>css の calc()関数で integer しか受け取らないような場所でも number を指定できるようになりました。 もっとも近い整数に丸められます。</p>\n</blockquote>\n<p><a href=\"https://chromestatus.com/features/5656451751084032\">https://chromestatus.com/features/5656451751084032</a></p>\n<h3>transform: perspective(none)</h3>\n<p>CSS transform プロパティ内で利用できる、<code>perspective()</code>関数への引数として'none'を実装としてサポートしました。<code>perspective(0)</code>と<code>perspective(none)</code>では挙動が変わるため、変形をしないことを意図する場合(単位行列として扱いたい場合)は<code>perspective(none)</code>を利用するようにしましょう。</p>\n<p><a href=\"https://chromestatus.com/features/5687325523705856\">https://chromestatus.com/features/5687325523705856</a></p>\n","metaData":{"title":"Web Transportのサポートなど、Chrome 97 リリースノートまとめ","author":"Saji","editor":"nus3","createdAt":"2022-01-21","summary":"Chrome 97 のリリースノートの要約です","tags":["Releasenote","Browser"],"updatedAt":"2022-01-21"}},{"type":"markdown","href":"/posts/release-firefox-96","slug":"release-firefox-96","content":"<ul>\n<li><a href=\"https://www.mozilla.org/en-US/firefox/96.0/releasenotes/\">https://www.mozilla.org/en-US/firefox/96.0/releasenotes/</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Releases/96\">https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Releases/96</a></li>\n</ul>\n<p>Firefox 96 がリリースされました！\n全体的に性能面での改善が多くを占めるアップデートでした。\n本リリースでは Cookie Policy がデフォルトで <code>SameSite=lax</code>を指定するようになりました。\nまた、<code>color-scheme</code>プロパティが追加され、IE 以外の主要なブラウザで利用可能になりました。</p>\n<h2>New</h2>\n<ul>\n<li>ノイズ抑制やオートゲインコントロールの大きな改善とエコーキャンセレーションの若干の改善がされました</li>\n<li>メインスレッドの負荷が大きく軽減されました</li>\n<li>Cookie Policy をデフォルトで <code>SameSite=lax</code> に強制するようになりました</li>\n</ul>\n<h2>Fixed</h2>\n<ul>\n<li>macOS で Gmail のリンクをコマンドクリックした際、正常に新しいタブが開くようになりました\n<ul>\n<li>Firefox95 で unresolved になっていた問題の解決</li>\n</ul>\n</li>\n<li>ビデオの SSRC(RTP セッションでの参加者の識別子) が断続的にドロップする問題が修正されました</li>\n<li>特定のサイトでビデオの画質が劣化する問題が修正されました</li>\n<li>macOS でいくつかの問題を回避するためにフルスクリーンでのビデオが無効化されています</li>\n</ul>\n<h2>Developer</h2>\n<ul>\n<li>Linux にて <code>Select All</code> のショートカットキーが <code>Alt-A</code> から <code>Ctrl-A</code> に変更されました\n<ul>\n<li>web-compatibility の確保やアクセスキーとの衝突回避のため</li>\n</ul>\n</li>\n</ul>\n<h2>Web Platform</h2>\n<ul>\n<li>Web Lock API が実装されました。\n<ul>\n<li>異なる ServiceWorker やタブで実行されているスクリプトを相互連携させることが可能になります</li>\n</ul>\n</li>\n<li>WebRTC ライブラリが更新されたことで Web 会議アプリでの音声やビデオ機能が改善されました</li>\n<li>CSS にて <code>color-scheme</code> がサポートされ、Web ページがどのカラースキームでレンダリング可能かを指定できるようになりました</li>\n</ul>\n<h2>開発者向けの変更</h2>\n<h3>for web developers</h3>\n<h4>CSS</h4>\n<ul>\n<li>CSS で色の値として利用される <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hwb()\"><code>hwb()</code></a> 関数が実装されました</li>\n<li><a href=\"https://developer.mozilla.org/ja/docs/Web/CSS/color-scheme\"><code>color-scheme</code></a>プロパティがサポートされました</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/counter-reset\"><code>counter-reset</code></a> プロパティにて逆順の CSS カウンターを生成する <code>reversed()</code> 関数がサポートされました</li>\n</ul>\n<h4>HTTP</h4>\n<ul>\n<li>同じドメインから送信された Cookie でも異なるスキームを使用されているものは Cookie SameSite ディレクティブについて別サイトから送信されたものと見なすようになりました</li>\n<li>SameSite 属性が指定されていない Cookie は暗黙的に <code>SameSite=lax</code> が指定されるようになりました</li>\n<li><code>SameSite=none</code> を指定した Cookie はセキュアなコンテキストが必要になりました</li>\n<li>Cookie の SameSite についてはこちらをお読みください\n<ul>\n<li><a href=\"https://blog.cybozu.io/entry/2020/05/07/080000\">Cookie の SameSite 属性について - Cybozu Inside Out | サイボウズエンジニアのブログ</a></li>\n</ul>\n</li>\n</ul>\n<h4>APIs</h4>\n<ul>\n<li>Android において <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Navigator/canShare\"><code>navigator.canShare()</code></a> がサポートされました</li>\n<li>デフォルトで <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Locks_API\">Web Locks API</a> が有効になりました</li>\n</ul>\n<h4>Canvas</h4>\n<ul>\n<li>WebP の画像エンコーダーをサポートしました</li>\n</ul>\n<h4>DOM</h4>\n<ul>\n<li><a href=\"https://developer.mozilla.org/ja/docs/Web/API/IntersectionObserver\"><code>IntersectionObserver()</code></a> のコンストラクターが関連付けられたパラメータオプションにから文字が渡された場合に例外発生ではなく <code>rootMargin</code> を設定するようになりました</li>\n</ul>\n<h4>Media, WebRTC, and Web Audio</h4>\n<ul>\n<li>いくつかの非標準な静的フィールドが <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_Statistics_API\">WebRTC Statistics API</a> から削除されました</li>\n</ul>\n<h4>WebDriver conformance (Marionette)</h4>\n<ul>\n<li><code>WebDriver:GetElementShadowRoot</code> コマンドが追加されました\n<ul>\n<li>指定された要素が持っている shadow root を取り出す</li>\n</ul>\n</li>\n<li><code>WebDriver:ExecuteScript</code> 及び <code>WebDriver:ExecuteAsyncScript</code>にて要素の <code>ShadowRoot</code> を返す際に <code>cyclic object error</code> が発生する問題が解決されました</li>\n<li><code>WebDriver:Print</code> が PDF にプリントする際のページ範囲をサポートするように拡張されました</li>\n</ul>\n","metaData":{"title":"CSS color-scheme サポート追加等 Firefox 96.0 リリースノートまとめ","author":"BaHo","editor":"shisama","createdAt":"2022-01-20","summary":"Firefox 96.0 のリリースノートの日本語まとめです","tags":["Releasenote","Browser"],"updatedAt":"2022-01-20"}},{"type":"markdown","href":"/posts/turborepo","slug":"turborepo","content":"<p>今年からフロントエンドエキスパートチームでは活動内容の一つである<strong>探求</strong>の一環として、メンバーが気になった技術に対して、気軽に触ってみる会をしています。次の画像は筆者が Slack で、気軽に触ってみる会の開催を宣言してる時のものです。</p>\n<p><img src=\"/frontend-expert/image/turborepo/slack.png\" alt=\"slackで気軽に触ってみる会を宣言してる\" width=\"718\" height=\"152.15061295971978\" ></p>\n<p>今回は<a href=\"https://vercel.com/blog/vercel-acquires-turborepo\">去年の 12 月に Vercel に買収されたニュース</a>があった Turborepo を気軽に触ってみました。\n個人的には 1 人で調べるときよりも複数人でわいわい調べた方が、その技術や関連する周辺知識の話を色んな人の観点で深掘ってできて、とても有意義な時間でした。</p>\n<h2>概要</h2>\n<p>Turborepo はモノレポのためのビルドシステムで次のような特徴があります。</p>\n<ul>\n<li>Yarn, npm, pnpm の workspaces に対応してるリポジトリに対して簡単に導入できる</li>\n<li>workspace 内のコマンドの依存関係をシンプルに設定してくれる</li>\n<li>Turborepo で実行するコマンドがない package はスルーしてくれる(npm workspace の<code>--if-present</code>に相当)</li>\n<li>ローカルキャッシュ、リモートキャッシュを生成・利用できる</li>\n</ul>\n<h3>サンプルで作ったモノレポ構成</h3>\n<p>今回は Yarn v1 の workspace を使ってます。<br>\n<a href=\"https://github.com/nus3/p-turborepo/tree/main/yarn\">https://github.com/nus3/p-turborepo/tree/main/yarn</a></p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">├── apps\n│   └── nus3-a: Next.js\n└── packages:\n    ├── nus3-button2: Reactのコンポーネント + ViteのLibrary Modeでビルド\n    ├── nus3-config: tsconfig + eslintのconfig\n    └── nus3-ui: Reactのコンポーネント(ビルドせずに使う)</code></pre></div>\n<p>サンプルで作ったモノレポ内の package たちは次のような依存関係になっています。<br>\n(色々試してたので適当な命名になってます。すんません)</p>\n<ul>\n<li><code>nus3-a</code>は<code>nus3-ui</code>と<code>nus3-button2</code>に依存している</li>\n<li><code>nus3-ui</code>は<code>nus3-button2</code>に依存している</li>\n</ul>\n<p><img src=\"/frontend-expert/image/turborepo/dependencies.png\" alt=\"サンプルリポジトリの依存関係\" width=\"577\" height=\"314\" ></p>\n<h3>使い方</h3>\n<ol>\n<li>使っているパッケージマネージャーで(Yarn, npm, pnpm)で workspace の設定</li>\n<li><code>turbo</code>のインストール</li>\n<li>package.json に<code>pipeline</code>の設定</li>\n</ol>\n<h4>1. 使っているパッケージマネージャーで(Yarn, npm, pnpm)で workspace の設定</h4>\n<p>workspace の設定については割愛します。各パッケージマネージャーのドキュメントをご覧ください。</p>\n<ul>\n<li><a href=\"https://classic.yarnpkg.com/lang/en/docs/workspaces/\">Yarn</a></li>\n<li><a href=\"https://docs.npmjs.com/cli/v8/using-npm/workspaces\">npm</a></li>\n<li><a href=\"https://pnpm.io/workspaces\">pnpm</a></li>\n</ul>\n<h4>2. <code>turbo</code>のインストール</h4>\n<p><code>yarn add turbo -W --dev</code>で Turborepo を追加します。</p>\n<h4>3. package.json に<code>pipeline</code>の設定</h4>\n<p><code>package.json</code>に<code>turbo.pipeline</code>を追加し、そこで<code>turbo run {command}</code>で実行する command の依存関係やキャッシュの設定をします。この<code>pipeline</code>で定義した command しか<code>turbo run {command}</code>では実行できません。</p>\n<p>実際に定義したものが次の json になります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"turbo\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"pipeline\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"dependsOn\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"^build\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"outputs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"dist/**\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".next/**\"</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"dependsOn\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"build\"</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"deploy\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"dependsOn\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"build\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lint\"</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>dependsOn</code>で依存関係を、<code>outputs</code>でキャッシュするものを指定します。</p>\n<p>定義したコマンドを一つずつ見ていきましょう。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"dependsOn\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"^build\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n</code></pre></div>\n<p>dependOn に<code>^</code>を追加したコマンド(<code>^build</code>)を指定することで workspace 内の各 package の指定したコマンド(<code>build</code>)を package 間の依存関係を考慮した順番で実行してくれます。</p>\n<p>実際に実行してみると、サンプルで作った各 package の依存関係を考慮した順番(<code>@nus3/example-button2</code> → <code>nus3-ui</code> → <code>nus3-a</code>)でビルドされていることがわかります。<br>\n(※今回サンプルで作った構成では<code>nus3-ui</code>はビルドの必要がないですが、依存関係を考慮した順番を表すのにあえて build コマンドを追加しています)</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">$ turbo run build\n• Packages in scope: @nus3/example-button2, nus3-a, nus3-config, nus3-ui\n• Running build in 4 packages\n@nus3/example-button2:build: cache miss, executing a161062b16a0be35\n@nus3/example-button2:build: $ vite build &#x26;amp;&#x26;amp; tsc -p ./tsconfig.build.json\n...\n@nus3/example-button2:build: dist/nus3-example-button2.es.js   3.30 KiB / gzip: 1.39 KiB\nnus3-ui:build: cache miss, executing b32d4fb848c8658f\nnus3-ui:build: $ echo &#x26;#39;build nus3-ui&#x26;#39;\n...\nnus3-a:build: cache miss, executing a80d8842624981a8\nnus3-a:build: $ next build\n...\n\n Tasks:    3 successful, 3 total\nCached:    0 cached, 3 total\n  Time:    5.702s</code></pre></div>\n<p>次の<code>outputs</code>はコマンドを実行した際に、<code>dist</code>と<code>.next</code>配下にあるファイル群をキャッシュする設定です。<code>node_modules/.cache/turbo</code>にキャッシュしたファイルが出力されます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"outputs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"dist/**\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".next/**\"</span><span class=\"token punctuation\">]</span>\n</code></pre></div>\n<p>先程の build コマンドをもう一度実行すると cache が使われ、前回より早く実行されているのがわかります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">$ turbo run build\n• Packages in scope: @nus3/example-button2, nus3-a, nus3-config, nus3-ui\n• Running build in 4 packages\n@nus3/example-button2:build: cache hit, replaying output a161062b16a0be35\n...\nnus3-ui:build: cache hit, replaying output b32d4fb848c8658f\n...\nnus3-a:build: cache hit, replaying output a80d8842624981a8\n...\n\n Tasks:    3 successful, 3 total\nCached:    3 cached, 3 total\n  Time:    221ms &#x26;gt;&#x26;gt;&#x26;gt; FULL TURBO\n\n✨  Done in 0.57s.\n</code></pre></div>\n<p>次のように何も指定しない場合、依存関係がないものとして認識され並列に実行されます</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre></div>\n<p>次の deploy コマンドの<code>dependsOn</code>では pipeline で定義した<code>build</code>, <code>test</code>, <code>lint</code>(順不同)を実行し、終了した時点で workspace 内の各 package の<code>deploy</code>コマンドを実行します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"deploy\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"dependsOn\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"build\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lint\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre></div>\n<p>今回定義したものの場合、Turborepo は次のようなことを考慮しながら各々の package のコマンドを実行します。</p>\n<ul>\n<li><code>build</code>: モノレポ内の各 package の依存関係を考慮しつつ build</li>\n<li><code>test</code>: <code>pipeline</code>で定義した<code>build</code>が実行された後に実行</li>\n<li><code>lint</code>: 他のコマンドの順番を気にせず、並列で実行</li>\n</ul>\n<p>deploy コマンドを実行した結果が次になります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">$ turbo run deploy\n• Packages in scope: @nus3/example-button2, nus3-a, nus3-config, nus3-ui\n• Running deploy in 4 packages\nnus3-a:lint: $ next lint\n@nus3/example-button2:build: $ vite build &#x26;amp;amp;&#x26;amp;amp; tsc -p ./tsconfig.build.json\n...\nnus3-ui:build: $ echo &#x26;#39;build nus3-ui&#x26;#39;\n...\nnus3-a:build: $ next build\n...\nnus3-a:test: $ echo &#x26;#39;test nus3-a&#x26;#39;\n...\nnus3-a:deploy: $ echo &#x26;#39;deploy nus3-a&#x26;#39;</code></pre></div>\n<p>実際に上記を考慮しつつ各 package のコマンドが実行された後に、最後に deploy コマンドが実行されているのがわかると思います。</p>\n<p>また、今回はローカルキャッシュの話のみでしたが、Turborepo には<a href=\"https://turborepo.org/docs/features/remote-caching#vercel\">Vercel</a>や<a href=\"https://turborepo.org/docs/features/remote-caching#custom-remote-caches\">独自</a>にキャッシュを配置することで、同じハッシュのキャッシュがあった場合にそのキャッシュを使ってくれる<strong>リモートキャッシュ</strong>といった機能も Beta で用意されています。</p>\n<p>今のプロジェクトが Yarn や npm の workspace を使っているのであれば、Turborepo を試しに入れてみてもいいかもしれません。</p>\n","metaData":{"title":"workspaceを使ったコマンドを最適化して実行するTurborepoについて","author":"nus3","createdAt":"2022-01-17","summary":"Turborepoの機能について","tags":["Turborepo","Monorepo"],"updatedAt":"2022-01-17"}},{"type":"markdown","href":"/posts/release-firefox-95","slug":"release-firefox-95","content":"<ul>\n<li><a href=\"https://www.mozilla.org/en-US/firefox/95.0/releasenotes/\">https://www.mozilla.org/en-US/firefox/95.0/releasenotes/</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Releases/95\">https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Releases/95</a></li>\n</ul>\n<p>Firefox 95 がリリースされました。\n本アップデートでは RLBox という新しいコードサンドボックス機能が導入されて信頼できないコードに対する安全性が向上しました。\nまた、Firefox App から Slack.com の Huddle や Call 機能が利用できるようになったのは嬉しいですね。</p>\n<h2>New</h2>\n<ul>\n<li><a href=\"https://hacks.mozilla.org/2021/12/webassembly-and-back-again-fine-grained-sandboxing-in-firefox-95/\">RLBox</a>が全てのプラットフォームで有効になりました\n<ul>\n<li>信頼できないコードを WebAssembly を用いてネイティブコードへコンパイルすることで意図しない領域外へのメモリアクセスを防止する機能のようです</li>\n<li><a href=\"https://hacks.mozilla.org/2021/12/webassembly-and-back-again-fine-grained-sandboxing-in-firefox-95/\">mozilla hacks</a>によれば、従来のプロセスを分割する手法における非同期化のオーバーヘッドやメモリフットプリントの増加を懸念した手法だと記載されていました。</li>\n</ul>\n</li>\n<li>Windows 10 及び Windows 11 において Firefox App を Microsoft Store からダウンロードできるようになりました</li>\n<li>ブラウザクロームとツールバースクリーンショットがシンプルになりました</li>\n<li>macOS において WindowsServer イベントの処理時の CPU 使用量が削減されました</li>\n<li>macOS において主にフルスクリーン時のソフトウェアでコードされたビデオコンテンツの使用電力が削減されました</li>\n<li>PiP のトグルボタンをビデオウィンドウの反対側にへ移動できるようになりました</li>\n<li>Site Isolation が有効化されました。</li>\n</ul>\n<h2>Fixed</h2>\n<ul>\n<li>Firefox を起動した際、JAWS や ZoomText が Firefox をフォーカスするようになりました</li>\n<li>VoiceOver が ARIA の switch ロールの状態を正しく報告するようになりました</li>\n<li>macOS でコンテンツプロセスの起動速度が速くなりました</li>\n<li>メモリアロケータが改善されました</li>\n<li>JavaScript を先行してコンパイルするようになり、ページロード時のパフォーマンスが改善されました</li>\n</ul>\n<h2>Changed</h2>\n<ul>\n<li>Slack.com で Call や Huddles へアクセスできるように User Agent オーバーライドが追加されました</li>\n</ul>\n<h2>Developer</h2>\n<h3>For web developers</h3>\n<h4>HTML</h4>\n<ul>\n<li>グローバル属性 <code>inputmode</code> が全てのプラットフォームでサポートされるようになりました</li>\n</ul>\n<h4>CSS</h4>\n<ul>\n<li>Android 版 Firefox で cursor プロパティがサポートされました</li>\n</ul>\n<h4>APIs</h4>\n<ul>\n<li><code>Crypt.randomUUID()</code> 関数がサポートされました</li>\n</ul>\n<h4>Media, WebRTC, and Web Audio</h4>\n<ul>\n<li><code>SpeechSynthesisEvent.elapseTime</code> がミリ秒ではなく秒単位の経過時間を返すようになりました</li>\n</ul>\n<h4>WebDriver Conformance (Marionette)</h4>\n<ul>\n<li>Marionette が使用しているポートがプロファイルディレクトリにある <code>MarionetteActivePort</code> ファイルに書き込まれるようになりました</li>\n<li><code>WebDriver:NewSession</code> が最初のタブのロードが完了するまで待機するようになりました</li>\n</ul>\n<h3>For add-on developers</h3>\n<ul>\n<li>browserSettings に <code>overrideContentColorScheme</code> が追加され、<code>.css.prefers-color-scheme.content.override</code> という環境設定を制御することでブラウザのテーマとは独立したページ単位の優先的な配色を設定する機能が追加されました</li>\n</ul>\n<h2>unresolved</h2>\n<ul>\n<li>Gmail のリンクをコマンドクリックしても新しいタブが開かない問題がありました\n<ul>\n<li>回避策: Gmail のリンクをコマンドキーを利用せずにクリックすると新しいタブが開きます</li>\n</ul>\n</li>\n</ul>\n","metaData":{"title":"新しいコードサンドボックス機能 RLBox の追加など Firefox 95.0 リリースノートまとめ","author":"BaHo","createdAt":"2021-12-20","summary":"Firefox 95.0 のリリースノートの日本語まとめです","tags":["Releasenote","Browser"],"updatedAt":"2021-12-20"}}],"totalPage":4,"pageNum":2},"__N_SSG":true}
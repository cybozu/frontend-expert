{"pageProps":{"member":{"name":"Saji","twitterId":"sajikix","githubUsername":"sajikix","active":true},"posts":[{"slug":"release-chrome-99","content":"<p>Chrome 99 のリリースノート関連の情報をまとめました。</p>\n<ul>\n<li><a href=\"https://developer.chrome.com/blog/new-in-chrome-99/\">https://developer.chrome.com/blog/new-in-chrome-99/</a></li>\n<li><a href=\"https://developer.chrome.com/blog/new-in-devtools-99/\">https://developer.chrome.com/blog/new-in-devtools-99/</a></li>\n<li><a href=\"https://developer.chrome.com/blog/deps-rems-99/\">https://developer.chrome.com/blog/deps-rems-99/</a></li>\n<li><a href=\"https://www.chromestatus.com/features#milestone%3D99\">https://www.chromestatus.com/features#milestone%3D99</a></li>\n<li><a href=\"https://v8.dev/blog/v8-release-99\">https://v8.dev/blog/v8-release-99</a></li>\n</ul>\n<h2>New In Chrome (Chrome 99)</h2>\n<p>Chrome99 で新しく追加された機能です。</p>\n<h3>Chrome 100 and Firefox 100</h3>\n<p>Chrome 100 は今年の 3 月下旬、Firefox100 は 5 月上旬にリリースされます。 これらは両方ともメジャーバージョン番号が 3 桁にロールオーバーするアップデートです。 UserAgent をパースしたバージョン番号を２桁として解釈しているコードがある場合、新しいバージョン番号によって問題が発生する可能性があります。</p>\n<p>Chrome では、<code>＃force-major-version-to-100</code> フラグを有効にすることで現在のバージョンを 100 に上書きし、挙動を確認することができます。</p>\n<p>また、Firefox Nightly では「設定」メニューで、「Firefox100 ユーザーエージェント文字列」オプションを有効にすることで同様の確認が可能です。 両ブラウザでバージョン番号の解釈が期待どおりに機能することを確認できるように、サイトをテストすることをお勧めします。</p>\n<h3>CSS Cascasde Layers</h3>\n<p>CSS Cascade Layers が Chrome99、Firefox 97、Safari 15.4 Beta でサポートされました！</p>\n<p>CSS セレクタの詳細度を上回るルールを<code>@layer</code>で定義することができるようになります。</p>\n<p>詳細は <a href=\"https://twitter.com/nus3_\">@nus3</a> が別途記事を書いたので次のリンクをご参考ください。</p>\n<p><a href=\"https://cybozu.github.io/frontend-expert/posts/css-cascade-layers\">https://cybozu.github.io/frontend-expert/posts/css-cascade-layers</a></p>\n<h3>showPicker() for input elements</h3>\n<p>HTML InputElements に新しく<code>showPicker（）</code>メソッドが実装されました。</p>\n<p>これにより、日付だけでなく、時間、色、その他の<code>&#x3C;input></code>要素でブラウザーピッカーを表示するための標準的な方法が整備されました。</p>\n<p>利用する場合は、以下のように<code>&#x3C;input></code>要素で<code>showPicker（）</code>を呼び出します。また<code>try…catch</code>ブロックでこれらの処理を囲う事で、ブラウザーが<code>showPicker()</code>の API をサポートしていない場合、またはピッカーを表示できない場合のフォールバックを提供できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> dateInput <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbutton<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n    dateInput<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">showPicker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Dateピッカーの表示.</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ピッカーを表示できない場合のフォールバック</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>参考:</p>\n<p><a href=\"https://developer.chrome.com/blog/new-in-chrome-99/#:~:text=Show%20a%20browser%20picker%20for%20date%2C%20time%2C%20color%2C%20and%20files\">Show a browser picker for date, time, color, and files</a></p>\n<h3>And more!</h3>\n<p><code>CanvasRenderingContext2D</code>に次の機能が追加されました。</p>\n<ul>\n<li>Context がロストした時や復元した時のイベントハンドリングができるように(<code>ContextLost</code>, <code>ContextRestored</code>)</li>\n<li><code>willReadFrequently</code>オプションの追加</li>\n<li><code>letter-spacing</code>など Canvas でサポートされていなかったテキストを修飾するプロパティの追加</li>\n<li>Canvas の状態をリセットする<code>reset()</code>など</li>\n</ul>\n<p>PWA のマニフェストにダークテーマに対応する設定が追加できる<a href=\"https://developer.chrome.com/origintrials/#/view_trial/4239013149262479361\">オリジントライアル</a>が開始されたました。</p>\n<p>また詳細はこの記事の後半に記載しますが、Handwriting Recognition API が使えるようになります。</p>\n<h2>What's New In DevTools (Chrome 98)</h2>\n<p>DevTools についてはこちらの日本語訳を参照ください。</p>\n<p><a href=\"https://developer.chrome.com/ja/blog/new-in-devtools-99/\">https://developer.chrome.com/ja/blog/new-in-devtools-99/</a></p>\n<p>書いてるうちにでなかったら、気になるものがあれば記載する</p>\n<h2>Deprecations and removals in Chrome 99</h2>\n<h3>Remove Battery Status API on insecure origins</h3>\n<p><code>Battery Status API</code>は、HTTP ページや HTTP ページに埋め込まれた HTTPS の iframe などの安全でないオリジンでサポートされなくなりました。</p>\n<h3>Remove font-family -webkit-standard</h3>\n<p><code>font-family</code>の値として<code>-webkit-standard</code>が削除されました。</p>\n<h3>Remove GamepadList</h3>\n<p>接続しているゲームパッドを取得できる<code>navigator.getGamepads()</code>の返り値が<code>GamepadlList</code>から<code>Gamepad</code>のオブジェクトの配列を返すようになりました。</p>\n<p>この変更により、Gecko と Webkit と同じく仕様と一致するようになります。</p>\n<p>参考:</p>\n<p><a href=\"https://web.dev/gamepad/\">Chrome でゲームパッドを使う方法</a></p>\n<h3>Update WebCodecs to match the specification</h3>\n<p>WebCodecs 仕様変更により、仕様に反していた以下の 2 つの部分について修正しました。</p>\n<ul>\n<li><code>EncodeVideoChunkMetadata</code>オブジェクト内の<code>temporalLayerId</code>の場所</li>\n<li><code>VideoFrame()</code> コンストラクタでタイムスタンプ引数を指定しなかった際の挙動変更</li>\n</ul>\n<p>詳しくは<a href=\"https://chromestatus.com/feature/5667793157488640\">こちら</a>を参照してください。</p>\n<h2>その他 Chrome Platform Status に記載されていたもの</h2>\n<h3>Feature: \"paintworklet\" destination for PaintWorklet</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/Houdini\">CSS Houdini</a>の一部である<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CSS_Painting_API\">CSS Painting API</a>で使われる PaintWorklet のリクエストの送り先が<code>script</code>から<code>paintworklet</code>になりました。</p>\n<p><code>Sec-Fetch-Dest</code>HTTP リクエストヘッダと<code>FetchEvent.request.destination</code>で適用されます。</p>\n<h3>Feature: \"audioworklet\" destination for AudioWorklet</h3>\n<p><code>Web Audio API</code>のオーディオ処理を別スレッドで実行する仕組みである、<code>AudioWorklet</code>のリクエストの送り先が<code>script</code>から<code>audioworklet</code>になりました。</p>\n<p><code>Sec-Fetch-Dest</code>HTTP リクエストヘッダと<code>FetchEvent.request.destination</code>で適用されます。</p>\n<h3>Feature: Allow infinity, -infinity and NaN in CSS calc()</h3>\n<p>CSS の<code>calc()</code>関数で<code>infinity</code>, <code>-infinity</code>, <code>NaN</code> などのキーワード、及び<code>calc(1/0)</code> のように<code>infinity</code>や<code>NaN</code>に評価される式による値を許容するようになりました。</p>\n<h3>Autofill in ShadowDOM</h3>\n<p><code>autofill</code>が<code>form</code> 要素内のフォームコントロールを収集する際に、<code>ShadowDOM</code>も参照するようになります。これにより<code>Shadow DOM</code>内部の入力フォームでも<code>autofill</code>が効くようになります。</p>\n<p>Web コンポーネントを採用する際、<code>input</code>要素のようなフォームコントロールを<code>ShadowDOM</code>で包むことが一般的になっていることを受けての改善となります。</p>\n<h3>Convert adoptedStyleSheets to use ObservableArray</h3>\n<p>document や shadowRoot に<a href=\"https://developer.mozilla.org/ja/docs/Web/API/CSSStyleSheet\">CSSStyleSheet</a>を追加できる<code>adoptedStyleShetts</code>で ObservableArray が使えるようになります。</p>\n<p>今回から push などの通常の配列操作ができるようになります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">adoptedStyleSheets</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>adoptedStyleSheets<span class=\"token punctuation\">,</span> newSheet<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// これまで</span>\n<span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">adoptedStyleSheets</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>newSheet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// これから</span>\n</code></pre></div>\n<h3>Handwriting Recognition API</h3>\n<p>OS などにある既存の手書きの文字認識機能を web 上で扱えるようにするための API が追加されました。</p>\n<p>※現状この API が利用できるのは ChromeOS のみで対応言語も英語に限られています。</p>\n<p>参考:</p>\n<p><a href=\"https://chromestatus.com/feature/5263213807534080\">Feature: Handwriting Recognition API</a></p>\n<h3>Unprefixed text-emphasis properties</h3>\n<p>CSS の text-emphasis プロパティが<code>-webkit</code>なしで使えるようになります。</p>\n<p>参考:</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-emphasis\">https://developer.mozilla.org/en-US/docs/Web/CSS/text-emphasis</a></p>\n<h2>V8 release v9.9</h2>\n<h3>Intl.Locale extensions</h3>\n<p>Intl.Local オブジェクトに 7 つの新しいプロパティが追加されました。</p>\n<p><code>calendars</code>, <code>collations</code>, <code>hourCycles</code>, <code>numberingSystems</code>, <code>timeZones</code>では他の Intl API で使用する好ましい識別子を返します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> jaLocal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Intl<span class=\"token punctuation\">.</span>Locale</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ja\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>jaLocal<span class=\"token punctuation\">.</span><span class=\"token property-access\">calendars</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['gregory', 'japanese']</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>jaLocal<span class=\"token punctuation\">.</span><span class=\"token property-access\">collations</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['unihan', 'emoji', 'eor']</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>jaLocal<span class=\"token punctuation\">.</span><span class=\"token property-access\">hourCycles</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['h23']</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>jaLocal<span class=\"token punctuation\">.</span><span class=\"token property-access\">numberingSystems</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['latn']</span>\n</code></pre></div>\n<p><code>textInfo</code>はテキストに関連する情報をオブジェクトで返します。現状では CSS の direction プロパティで使用するような文字の並び順の値を返します。\n(rtl が右から左へ、ltr が左から右へ)</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">arabicEgyptLocale<span class=\"token punctuation\">.</span><span class=\"token property-access\">textInfo</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// { direction: 'rtl' }</span>\njapaneseLocale<span class=\"token punctuation\">.</span><span class=\"token property-access\">textInfo</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// { direction: 'ltr' }</span>\nchineseTaiwanLocale<span class=\"token punctuation\">.</span><span class=\"token property-access\">textInfo</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// { direction: 'ltr' }</span>\n</code></pre></div>\n<p><code>weekInfo</code>は週に関連する情報を返します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> jaLocal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Intl<span class=\"token punctuation\">.</span>Local</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ja\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>jaLocal<span class=\"token punctuation\">.</span><span class=\"token property-access\">weekInfo</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 返される数字は 1 が月曜日、7 が日曜日</span>\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">//   firstDay: 7,</span>\n<span class=\"token comment\">//   weekend: [6, 7],</span>\n<span class=\"token comment\">//   minimalDays: 1,</span>\n<span class=\"token comment\">// }</span>\n</code></pre></div>\n<h3>Intl Enumeration</h3>\n<p>v8 でサポートされている識別子の配列を返す<code>Intl.supportedValuesOf(code)</code>という新しい関数が追加されました。\nサポートされるコード値は以下の 6 つです。</p>\n<p>calendar</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Intl</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">supportedValuesOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"calendar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ['buddhist', 'chinese', 'coptic', 'dangi', ...]</span>\n</code></pre></div>\n<p>collation</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Intl</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">supportedValuesOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"collation\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ['big5han', 'compat', 'dict', 'emoji', ...]</span>\n</code></pre></div>\n<p>currency</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Intl</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">supportedValuesOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"currency\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ['ADP', 'AED', 'AFA', 'AFN', 'ALK', 'ALL', 'AMD', ...]</span>\n</code></pre></div>\n<p>numberingSystem</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Intl</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">supportedValuesOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"numberingSystem\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ['adlm', 'ahom', 'arab', 'arabext', 'bali', ...]</span>\n</code></pre></div>\n<p>timeZone</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Intl</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">supportedValuesOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timeZone\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ['Africa/Abidjan', 'Africa/Accra', 'Africa/Addis_Ababa', 'Africa/Algiers', ...]</span>\n</code></pre></div>\n<p>unit</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Intl</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">supportedValuesOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ['acre', 'bit', 'byte', 'celsius', 'centimeter', ...]</span>\n</code></pre></div>\n<p>この新しいメソッドによって、Web 開発者はどの値が実装でサポートされているかを簡単に発見できるようになります。</p>\n","metaData":{"title":"CSS Cascasde Layersの追加など、Chrome 99 リリースノートまとめ","author":"Saji","editor":"nus3","createdAt":"2022-03-24","summary":"Chrome 99 のリリースノートの要約です","tags":["Releasenote","Browser"],"updatedAt":"2022-03-24"}},{"slug":"release-chrome-97","content":"<p>Chrome 97 のリリースノート関連の情報をまとめました。</p>\n<ul>\n<li><a href=\"https://developer.chrome.com/blog/new-in-chrome-97/\">https://developer.chrome.com/blog/new-in-chrome-97/</a></li>\n<li><a href=\"https://developer.chrome.com/blog/new-in-devtools-97/\">https://developer.chrome.com/blog/new-in-devtools-97/</a></li>\n<li><a href=\"https://developer.chrome.com/blog/deps-rems-97/\">https://developer.chrome.com/blog/deps-rems-97/</a></li>\n<li><a href=\"https://www.chromestatus.com/features#milestone%3D97\">https://www.chromestatus.com/features#milestone%3D97</a></li>\n<li><a href=\"https://v8.dev/blog/v8-release-97\">https://v8.dev/blog/v8-release-97</a></li>\n</ul>\n<h2>New In Chrome (Chrome 97)</h2>\n<p>Chrome97 で新しく追加された機能です。</p>\n<h3>Web Transport</h3>\n<p>サーバーとクライアントの双方向リアルタイム通信を実現する新しいフレームワークとして提案されている<code>Web Transport</code>が正式にサポートされました。</p>\n<p>Web Transport は既存の代表的手法である<code>Web Sockets</code>や<code>WebRTC</code>と比べ以下のような利点を持っています。</p>\n<ul>\n<li><code>WebSockets</code>よりも低遅延な通信を実現する</li>\n<li>P2P メッセージング用に設計された<code>WebRTC</code>と違い、クライアントサーバーメッセージングを前提として設計されているため扱いやすい</li>\n</ul>\n<p>Web Transport では<code>streams API</code>と<code>datagram API</code>という２種類の通信 API がサポートされており、それぞれ以下のような特徴から使い分けることができます。</p>\n<ul>\n<li>streams API : 信頼性の高い順序付けられたデータ送信に最適</li>\n<li>datagram API : 信頼性や順序がそこまで求められず、より低遅延でベストエフォートなデータ送信に最適</li>\n</ul>\n<p>注意点として、Web Transport を試すためには<code>HTTP/3</code>をサポートしたサーバーが必要となります。</p>\n<p>Web Transport は以下のような形で簡単に利用することができます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'https://example.com:4999/foo/bar'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> transport <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebTransport</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// WebTransportインスタンス生成</span>\n<span class=\"token keyword control-flow\">await</span> transport<span class=\"token punctuation\">.</span><span class=\"token property-access\">ready</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 接続を待つ</span>\n\n<span class=\"token keyword\">const</span> writer <span class=\"token operator\">=</span> transport<span class=\"token punctuation\">.</span><span class=\"token property-access\">datagrams</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">writable</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> data1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">65</span><span class=\"token punctuation\">,</span> <span class=\"token number\">66</span><span class=\"token punctuation\">,</span> <span class=\"token number\">67</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwriter<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">write</span><span class=\"token punctuation\">(</span>data1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>詳しくは<a href=\"https://web.dev/webtransport/\">Experimenting with WebTransport</a>を参照しててください。</p>\n<h3>Script type feature detection</h3>\n<p>ブラウザ側で<code>ES Modules</code>の対応状況を判別する方法として今まで<code>nomodule</code>属性がありましたが、<code>import maps</code>, <code>speculation rules</code>,<code>bundle preloading</code>などの新しく提案されている仕様には対応しきれていませんでした。</p>\n<p>今回サポートされた<code>HTMLScriptElement.supports()</code>を利用することで以下のように JavaScript側でscriptがどの仕様に対応しているかのチェックをすることができるようになります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">HTMLScriptElement</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">supports</span><span class=\"token punctuation\">(</span><span class=\"token string\">'importmap'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Use &#x3C;script type=\"importmap\" ...></span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">HTMLScriptElement</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">supports</span><span class=\"token punctuation\">(</span><span class=\"token string\">'module'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Use &#x3C;script type=\"module\" ...></span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Use classic method...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>New array prototypes</h3>\n<p>Array と TypedArray で<code>findLast()</code>と<code>findLastIndex()</code>が使えるようになりました。\nこの二つの関数は引数で渡された条件に合致する配列内の<strong>最後の要素</strong>の値、位置をそれぞれ返します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">130</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> last <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">findLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> value <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 44</span>\n<span class=\"token keyword\">const</span> lastIndex <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">findLastIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> value <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>lastIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\n</code></pre></div>\n<h3>Emulate Chrome 100 in the UA string</h3>\n<p>あと数ヶ月で Chrome のバージョンは 3 桁となる 100 に到達します。\nバージョンや UA 文字列をパースするコードがある場合は 3 桁でも動くかどうか確認しましょう。</p>\n<p>現在のバージョンを 100 にする<a href=\"https://developer.chrome.com/blog/force-major-version-to-100/\">#force-major-version-to-100</a>フラグを使って、既存のコードが正しく動くか確認することができます。</p>\n<h3>And more!</h3>\n<p>上記以外のようなアップデートがあります。</p>\n<ul>\n<li>フォーム入力の改行が Gecko や WebKit と同じ方法で正規化されるようになりました。\n<ul>\n<li>これによりブラウザ間の相互運用性が向上しました。</li>\n</ul>\n</li>\n<li><code>client hint</code>のプレフィクスを<code>sec-ch</code>にするように標準化を進めています。\n<ul>\n<li>例えば<code>dpr</code>は<code>sec-ch-dpr</code>のようになります。</li>\n<li>以前の仕様も当分の間サポートを続けますが、いずれは非推奨となり削除されることを想定しましょう。</li>\n</ul>\n</li>\n<li>閉じている<code>&#x3C;detail></code>要素が検索可能になり、閉じている<code>&#x3C;detail></code>要素内の element にスクロールしようとした際は閉じられている<code>&#x3C;detail></code>要素を自動的に開くようになりました。</li>\n</ul>\n<h3>What's New In DevTools (Chrome 97)</h3>\n<p>DevTools についてはこちらの日本語訳を参照ください。</p>\n<p><a href=\"https://developer.chrome.com/ja/blog/new-in-devtools-97/\">https://developer.chrome.com/ja/blog/new-in-devtools-97/</a></p>\n<h3>Deprecations and removals in Chrome 97</h3>\n<p>Chrome97 で非推奨になったもの、もしくは削除されたものです</p>\n<p><a href=\"https://developer.chrome.com/blog/deps-rems-97/\">https://developer.chrome.com/blog/deps-rems-97/</a></p>\n<h3>Remove SDES key exchange for WebRTC</h3>\n<p>WebRTC の SDES 鍵交換の仕様は 2013 年以降、関連する IETF の標準仕様では MUST NOT となっており、近年では Chrome での使用率も大幅に低下しているので Chrome97 で廃止されました。</p>\n<p>参考:</p>\n<p><a href=\"https://webrtc-security.github.io/report_ja/\">https://webrtc-security.github.io/report_ja/</a></p>\n<h3>Remove WebSQL in third-party contexts</h3>\n<p>サードパーティ製の WebSQL が廃止されました。W3C では代わりに Web Storage と Indexed Database を推奨しています。</p>\n<h3>Remove SDP Plan B</h3>\n<p>WebRTC でセッションを確立するために使用される SDP に非標準の実装であった<code>Plan B</code>が削除されました。</p>\n<p>参考: SDP の Unified Plan と Plan B</p>\n<p><a href=\"https://blog.jxck.io/entries/2018-01-05/sdp-unified-plan.html\">https://blog.jxck.io/entries/2018-01-05/sdp-unified-plan.html</a></p>\n<h2>その他 Chrome Platform Status に記載されていたもの</h2>\n<p><a href=\"https://www.chromestatus.com/features#milestone%3D97\">https://www.chromestatus.com/features#milestone%3D97</a></p>\n<h3>Feature policy for Keyboard API</h3>\n<p>各言語に対応した keybord レイアウト情報を返す<code>getLayoutMap()</code>メソッドは全てのコンテキスト(iframe 内など)では利用できないという問題点がありました。今回のアップデートで iframe の allow 属性に<code>keyboard-map</code>を追加することでこの問題を解決することができるようになりました。</p>\n<p><a href=\"https://chromestatus.com/features/5657965899022336\">https://chromestatus.com/features/5657965899022336</a></p>\n<h3><code>PermissionStatus.prototype.name</code></h3>\n<p><code>PermissionStatus</code> インターフェースに読み取り専用の属性 <code>\"name\"</code> を追加し、<code>PermissionStatus</code> が作成された後、パーミッションの名前が取得できるようになりました。</p>\n<p>今までは<code>Permissions API</code> を使って複数のパーミッションを同時に問い合わせた際、どの PermissionStatus がどのパーミッションに対応しているのかを識別する方法がありませんでした。</p>\n<p><a href=\"https://chromestatus.com/features/5651653697994752\">https://chromestatus.com/features/5651653697994752</a></p>\n<h3>Propagate request origin and redirect chain in passthrough service workers.</h3>\n<p><code>fetch(evt.request)</code>メソッドで navigation requests を発行する ServiceWorker が<code>FetchEvent.request</code> からのオリジンとリダイレクトチェーンを使用するようになります。</p>\n<p>今までは常に ServiceWorker のオリジンが設定され、リダイレクトチェーンを使用することはありませんでした。</p>\n<p><a href=\"https://chromestatus.com/features/5752539724120064\">https://chromestatus.com/features/5752539724120064</a></p>\n<h3>Support calc(<code>&#x3C;number></code>) where only accepts <code>&#x3C;integer></code></h3>\n<p><a href=\"https://cybozu.github.io/frontend-expert/posts/release-chrome-96\">Chrome 96 リリースノートまとめ</a>にも記載したものが、Chrome97 で追加されました。</p>\n<blockquote>\n<p>css の calc()関数で integer しか受け取らないような場所でも number を指定できるようになりました。 もっとも近い整数に丸められます。</p>\n</blockquote>\n<p><a href=\"https://chromestatus.com/features/5656451751084032\">https://chromestatus.com/features/5656451751084032</a></p>\n<h3>transform: perspective(none)</h3>\n<p>CSS transform プロパティ内で利用できる、<code>perspective()</code>関数への引数として'none'を実装としてサポートしました。<code>perspective(0)</code>と<code>perspective(none)</code>では挙動が変わるため、変形をしないことを意図する場合(単位行列として扱いたい場合)は<code>perspective(none)</code>を利用するようにしましょう。</p>\n<p><a href=\"https://chromestatus.com/features/5687325523705856\">https://chromestatus.com/features/5687325523705856</a></p>\n","metaData":{"title":"Web Transportのサポートなど、Chrome 97 リリースノートまとめ","author":"Saji","editor":"nus3","createdAt":"2022-01-21","summary":"Chrome 97 のリリースノートの要約です","tags":["Releasenote","Browser"],"updatedAt":"2022-01-21"}},{"slug":"release-chrome-96","content":"<p>Chrome 96 のリリースノート関連の情報をまとめました。</p>\n<ul>\n<li><a href=\"https://developer.chrome.com/blog/new-in-chrome-96/\">https://developer.chrome.com/blog/new-in-chrome-96/</a></li>\n<li><a href=\"https://developer.chrome.com/blog/new-in-devtools-96/\">https://developer.chrome.com/blog/new-in-devtools-96/</a></li>\n<li><a href=\"https://developer.chrome.com/blog/deps-rems-96/\">https://developer.chrome.com/blog/deps-rems-96/</a></li>\n<li><a href=\"https://www.chromestatus.com/features#milestone%3D96\">https://www.chromestatus.com/features#milestone%3D96</a></li>\n<li><a href=\"https://v8.dev/blog/v8-release-96\">https://v8.dev/blog/v8-release-96</a></li>\n</ul>\n<h2>New In Chrome (Chrome 96)</h2>\n<p>Chrome 96で新しく追加された機能です。</p>\n<h3>Manifest id for PWAs</h3>\n<p>今まではPWAをインストールする際、ブラウザ側でPWAを一意に識別するための明確な方法が存在しておらず、ブラウザの判断に委ねられていました。(実際ブラウザによってPWAマニフェストファイルの<code>start_url</code>が利用されていたり、マニフェストファイル自体のパスなどが利用されたりしています)</p>\n<p>今回のアップデートにより、マニフェストファイル内でPWAの識別子を<code>id</code>プロパティとして明示的に定義できるようになりました。</p>\n<p>マニフェストに<code>id</code>プロパティを追加すると、マニフェストファイルの<code>start_url</code>プロパティやマニフェストファイル場所へ依存がなくなり、これらのフィールドを更新することが容易になります。</p>\n<h4>サポート状況と予定</h4>\n<p>デスクトップのChromium搭載ブラウザ</p>\n<ul>\n<li>Chrome 96からidプロパティがサポートされます。</li>\n</ul>\n<p>モバイルブラウザ(マニフェストファイルのURLをユニークIDとして使用しているもの)</p>\n<ul>\n<li>2022年前半にサポートが開始される予定です。</li>\n</ul>\n<h4>idプロパティの追加について</h4>\n<p>すでに運用しているPWAのマニフェストファイルにidを追加する場合</p>\n<ul>\n<li>ブラウザから割り当てられたIDを使用する必要があります。</li>\n<li>割り当てられているID は、Dev Tools の <code>Application</code> パネルの <code>Manifest</code> ペインで確認できます。</li>\n</ul>\n<p>新しくPWAを作成する場合</p>\n<ul>\n<li>idプロパティに好きな文字列を設定することができますが、将来的に変更することはできないので慎重に選んでください。</li>\n</ul>\n<h3>URL protocol handlers for PWAs</h3>\n<p>今までwebページで利用可能だった<code>URL protocol handler</code>の登録がChrome 96からはPWAでもインストール時に行えるようになりました。</p>\n<p>PWAの場合は以下のように<code>protocol_handlers</code>プロパティをマニフェストファイルに記載することで登録できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  ...\n  <span class=\"token property\">\"protocol_handlers\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"protocol\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"web+tea\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/tea?type=%s\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"protocol\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"web+coffee\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/coffee?type=%s\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>それぞれ、<code>protocol</code>には登録したいプロトコル名を、<code>url</code>にはそのプロトコルのURLをクリックしたときに開いてほしいURLを指定します。ただし、これらのプロトコル登録にはいくつかの制限があります。詳細や登録方法などは<a href=\"https://web.dev/url-protocol-handler/\">こちら</a>を参照してください。</p>\n<h3>Priority hints (origin trial)</h3>\n<p>ブラウザがページ内リソース(<code>image</code>,<code>script</code>,<code>CSS</code>)を読み込む際の優先度ヒントを追加できる機能がOrigin Trialsとして実験的に利用できるようになりました。</p>\n<p>具体的には以下のような形で対象となるリソースに<code>importance</code>属性で優先度(<code>high</code>,<code>low</code>,<code>auto</code>から選択)を指定します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&#x3C;!-- We don't want a high priority for this above-the-fold image --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/not-important.svg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">importance</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>low<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">&#x3C;!-- Initiate an early fetch for a resource, but de-prioritize it --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>preload<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/script.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">as</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>script<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">importance</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>low<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://example.com/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>importance<span class=\"token operator\">:</span> <span class=\"token string\">'high'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Trigger a high priority fetch</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>script</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<p>今回のリリースノートでは Google Flights ページで、<code>Priority hitns</code> の有無におけるLCP(最大視覚コンテンツの表示時間)の比較を行った結果を紹介しています。この比較では背景画像の<code>img</code>タグに対して<code>importance=\"high\"</code>を指定することでLCPが 2.6s から 1.9s に向上したとしています。</p>\n<p>機能詳細やOrigin Trialとして登録する方法、サンプルなどについては<a href=\"https://web.dev/priority-hints/\">Optimizing resource loading with Priority Hints</a>を参考にしてください。</p>\n<h3>Emulate Chrome 100 in the UA string</h3>\n<p>来年の早い段階でChromeはバージョン100がリリースされる予定であり、これ以降３桁のバージョン番号に突入します。そのため、バージョン番号を利用しているコードや<code>UserAgent</code>をパースしているコードが３桁のバージョン番号でも正しく動作することを保証する必要があります。</p>\n<p>これらを検証するためChrome 96では<code>#force-major-version-to-100</code>というフラグが追加されました。このフラグを有効にするとChromeのバージョンだけが100になった状態をシミュレートすることができ、バージョン番号を扱う動作に問題がないかの検証を行うことができます。</p>\n<p>詳しくは <a href=\"https://developer.chrome.com/blog/force-major-version-to-100/\">Force Chrome major version to 100 in the User-Agent string.</a> を参照してください。</p>\n<h3>Chrome Dev Summit</h3>\n<p>Chrome Dev Summitにおけるすべての動画やコンテンツはオンラインで視聴可能です。詳しくは <a href=\"https://developer.chrome.com/devsummit/\">Chrome Dev Summit site</a> をご覧ください。またkeynoteや配信を見逃した方はChrome Developers YouTube Channelの <a href=\"https://www.youtube.com/playlist?list=PLNYkxOF6rcIBju4hD9ed1pt6YO20LgLWg\">CDS Playlist</a> を合わせて参照してください。</p>\n<h3>その他</h3>\n<p><code>Back/forward cache</code>の機能が<code>stable</code>になりました。</p>\n<ul>\n<li>これによりFireFoxやSafariと挙動を揃えることができるようになりました。</li>\n</ul>\n<h2>What's New In DevTools (Chrome 96)</h2>\n<p>DevTools についてはこちらの日本語訳を参照ください。</p>\n<p><a href=\"https://developer.chrome.com/ja/blog/new-in-devtools-96/\">https://developer.chrome.com/ja/blog/new-in-devtools-96/</a></p>\n<h2>Deprecations and removals in Chrome 96</h2>\n<p>Chrome96で非推奨になったもの、もしくは削除されたものです<br>\n<a href=\"https://developer.chrome.com/blog/deps-rems-96/\">https://developer.chrome.com/blog/deps-rems-96/</a></p>\n<h3>The \"basic-card\" method of PaymentRequest API</h3>\n<p>PaymentRequestを呼び出すときに指定できる<code>basic card</code>method(ブラウザで保存されているカード情報を使う方法)が非推奨になります。</p>\n<p>Chrome 96では<code>basic card</code>を使っているとDevToolsのConsoleにwarningメッセージが表示されます。また、Chrome 100では利用できなくなります。<code>basic card</code>を使っている場合は別のmethodに変更するように早めに対応したほうが良さそうです。</p>\n<p><a href=\"https://blog.chromium.org/2021/10/sunsetting-basic-card-payment-method-in.html\">https://blog.chromium.org/2021/10/sunsetting-basic-card-payment-method-in.html</a></p>\n<h2>その他Chrome Platform Statusに記載されていたもの</h2>\n<p><a href=\"https://www.chromestatus.com/features#milestone%3D96\">https://www.chromestatus.com/features#milestone%3D96</a></p>\n<h3>Adding captureTimestamp and senderCaptureTimeOffset to RTCRtpContributingSource.</h3>\n<p>WebRTC APIの一つである<code>RTCRtpContributingSource</code>にオーディオとビデオフレームの同期やend-to-endの遅延が測定できる<code>captureTimestamp</code>と<code>senderCaptureTimeOffset</code>プロパティが追加されます。</p>\n<p><a href=\"https://www.chromestatus.com/feature/5728533701722112\">https://www.chromestatus.com/feature/5728533701722112</a></p>\n<h3>CSS @counter-style descriptor 'speak-as'</h3>\n<p><code>@counter-style</code>を使った際にカウンターが音声形式でどのように表されるかを指定できるプロパティ<code>speak-as</code>が追加予定で、現状は<code>In developer trial</code>で試験運用中です。</p>\n<p><a href=\"https://www.chromestatus.com/feature/5687059677184000\">https://www.chromestatus.com/feature/5687059677184000</a>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@counter-style/speak-as\">https://developer.mozilla.org/en-US/docs/Web/CSS/@counter-style/speak-as</a></p>\n<h3>Clipboard: Preserve PNG metadata</h3>\n<p>クリップボードからPNGを読み込む際にサニタイズされなくなります。\n(前まではメタデータを削除していました)</p>\n<p><a href=\"https://www.chromestatus.com/feature/5629962485760000\">https://www.chromestatus.com/feature/5629962485760000</a></p>\n<h3>Cross-Origin-Embedder-Policy: credentialless</h3>\n<p>COEPに<code>credentialless</code>が追加できるようになりました。\n<code>credentialless</code>を指定するとサーバーへのリクエスト時に認証方法(CookieやAuthorizationヘッダなど)が省かれるようになります。</p>\n<p><a href=\"https://www.chromestatus.com/feature/4918234241302528\">https://www.chromestatus.com/feature/4918234241302528</a></p>\n<p>参考: SharedArrayBuffer と過渡期な cross-origin isolation の話\n<a href=\"https://blog.agektmr.com/2021/11/cross-origin-isolation.html\">https://blog.agektmr.com/2021/11/cross-origin-isolation.html</a></p>\n<h3>Disable propagation of body style to viewport when contained</h3>\n<p>ルートやbody要素に<code>contain: none</code>以外の値を使用するとbodyからのCSSプロパティの伝搬が無効になります。\n<a href=\"https://www.chromestatus.com/feature/5663240823504896\">https://www.chromestatus.com/feature/5663240823504896</a></p>\n<h3>EME MediaKeySession Closed Reason</h3>\n<p>MediaKeySessionのcloseメソッドが<code>MediaKeySessionClosedReason</code>を返すようになります。\nsessionが閉じられた理由(<code>internal-error</code>, <code>closed-by-application</code>など)を取得してハンドリングできるようになります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> keySystemAccess <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token dom variable\">navigator</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">requestMediaKeySystemAccess</span><span class=\"token punctuation\">(</span>\n<span class=\"token comment\">//   ...</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Create media keys.</span>\n<span class=\"token keyword\">const</span> mediaKeys <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> keySystemAccess<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createMediaKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Create a key session.</span>\nkeySession <span class=\"token operator\">=</span> mediaKeys<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Generate a fake license request.</span>\n<span class=\"token keyword control-flow\">await</span> keySession<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">generateRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"webm\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Uint8Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nkeySession<span class=\"token punctuation\">.</span><span class=\"token property-access\">closed</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// Reason is either undefined if not supported, \"internal-error\",</span>\n<span class=\"token comment\">// \"closed-by-application\", \"release-acknowledged\",</span>\n<span class=\"token comment\">// \"hardware-context-reset\", or \"resource-evicted\".</span>\n<span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Media key session was closed. Reason: \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>reason<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\".</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><a href=\"https://www.chromestatus.com/feature/5632124143009792\">https://www.chromestatus.com/feature/5632124143009792</a></p>\n<p>参考: EME MediaKeySession Closed Reason Sample\n<a href=\"https://googlechrome.github.io/samples/media/key-session-closed-reason.html\">https://googlechrome.github.io/samples/media/key-session-closed-reason.html</a></p>\n<h3>HTTP->HTTPS redirect for HTTPS DNS records</h3>\n<p>DNSのHTTPSレコードを従来のAレコードやAAAAレコードと一緒に照会し、解析するようになります。\nHTTPSレコードを追加し、Chromeがそれを受信するとChromeは常にそのウェブサイトにHTTPSで接続します。</p>\n<p><a href=\"https://www.chromestatus.com/feature/5485544526053376\">https://www.chromestatus.com/feature/5485544526053376</a></p>\n<h3>InteractionID in EventTiming</h3>\n<p>Event Timing APIのPerformanceEventTimingに<code>interactionId</code>が追加されました。\nユーザーの操作に対して関連するイベント(たとえばユーザーがタップした時にはpointerdown→mousedown→pointerup→mouseup→clickのイベントが発生する)は<code>interactionId</code>が同じになります。</p>\n<p><a href=\"https://www.chromestatus.com/feature/5674224959094784\">https://www.chromestatus.com/feature/5674224959094784</a></p>\n<h3>Media Queries: prefers-contrast feature</h3>\n<p>OSが設定している色のコントラスト設定に対応するメディアクエリ<code>prefers-contrast</code>が追加されました。</p>\n<div class=\"remark-highlight\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\"><span class=\"token class\">.contrast</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">prefers-contrast</span><span class=\"token punctuation\">:</span> more<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\"><span class=\"token class\">.contrast</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* OSでコントラストの設定が高い場合に適応される */</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">prefers-contrast</span><span class=\"token punctuation\">:</span> less<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\"><span class=\"token class\">.contrast</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* OSでコントラストの設定が低い場合に適応される */</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><a href=\"https://www.chromestatus.com/feature/5646323212615680\">https://www.chromestatus.com/feature/5646323212615680</a></p>\n<p>参考: prefers-contrast(MDN)<br>\n<a href=\"https://developer.mozilla.org/ja/docs/Web/CSS/@media/prefers-contrast\">https://developer.mozilla.org/ja/docs/Web/CSS/@media/prefers-contrast</a></p>\n<h3>Support calc(<code>&#x3C;number></code>) where only accepts <code>&#x3C;integer></code></h3>\n<p>cssの<code>calc()</code>関数でintegerしか受け取らないような場所でもnumberを指定できるようになりました。\nもっとも近い整数に丸められます。</p>\n<p>例えば、下記はいずれも<code>column-count: 1</code>と同義です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\"><span class=\"token class\">.example</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">column-count</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">column-count</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><a href=\"https://www.chromestatus.com/feature/5656451751084032\">https://www.chromestatus.com/feature/5656451751084032</a></p>\n<p>参考:\n<a href=\"https://drafts.csswg.org/css-values-4/#calc-range\">https://drafts.csswg.org/css-values-4/#calc-range</a></p>\n<h2>V8 release v9.6</h2>\n<p>V8のアップデート情報です。</p>\n<h3>WebAssembly : Reference Types</h3>\n<p>WebWebAssemblyでプロポーザルとして提案されている<a href=\"https://github.com/WebAssembly/reference-types/blob/master/proposals/reference-types/Overview.md\">Reference Type</a>がV8 v9.6からサポートされます。\n現状、WASMの関数は引数や戻り値に、整数や浮動小数点数といったプリミティブな型しか扱えませんが、<code>Reference Types</code>機能はこれに加えて、JavaScriptオブジェクトへの参照を渡せるようにしたものです。</p>\n","metaData":{"title":"Chrome 96 リリースノートまとめ","author":"Saji","editor":"nus3","createdAt":"2021-12-02","summary":"Chrome 96 のリリースノートの要約です","tags":["Releasenote","Browser"],"updatedAt":"2021-12-02"}}]},"__N_SSG":true}
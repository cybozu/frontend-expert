{"pageProps":{"posts":[{"slug":"tc39-meeting-2022-06","content":"<p>この記事では2022年06月06日~09日に開催された TC39 meeting 90th で議題に上がったプロポーザルを紹介します。</p>\n<h3>For Stage 4</h3>\n<h3><a href=\"https://github.com/tc39/proposal-array-find-from-last/\"><code>findLast</code> / <code>findLastIndex</code></a></h3>\n<p><strong>Stage 4 に到達しました</strong></p>\n<p><code>findLast</code> は <code>findLastIndex</code> は、<code>Array.prototype.find</code> と <code>Array.prototype.findLastIndex</code> の逆から走査するバージョンです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">prop1</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">prop2</span><span class=\"token operator\">:</span> <span class=\"token string\">\"foo\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">prop1</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">props2</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bar\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj1 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> element<span class=\"token punctuation\">.</span><span class=\"token property-access\">prop1</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">.</span><span class=\"token property-access\">prop2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"foo\"</span>\n<span class=\"token keyword\">const</span> obj2 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">findLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> element<span class=\"token punctuation\">.</span><span class=\"token property-access\">prop1</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"bar\"</span>\n</code></pre></div>\n<p>このミーティングの時点で V8、JavaScriptCore(フラグ付き)、ChakraCore(フラグ付き) にはすでに実装されており、<a href=\"https://spidermonkey.dev/blog/2022/06/30/newsletter-firefox-102-103.html\">SpiderMonkey でも後日実装されたようです</a>。</p>\n<p>(余談ですが筆者は、このプロポーザルのスライド資料を読んで ChakraCore の開発が未だに継続されていることと TC39 プロセスにおける実装の一つとして数えられていることをはじめて知りました。)</p>\n<h2>For Stage 3</h2>\n<h3><a href=\"https://github.com/tc39/proposal-symbols-as-weakmap-keys\">Symbols as WeakMap keys</a></h3>\n<p><strong>Stage 3 に到達しました</strong></p>\n<p>Symbols as WeakMap keys は WeakMap のキーとして Symbol を使えるようにするプロポーザルです。</p>\n<p>提案の概要については</p>\n<p><div class=\"hatena-link\"><iframe class=\"hatena-link-frame\" src=\"https://hatenablog-parts.com/embed?url=https://sosukesuzuki.dev/posts/symbols-as-weakmap-keys\" style=\"border: none;\"></iframe></div></p>\n<p>を見てください。</p>\n<p>これまでの流れについては</p>\n<p><div class=\"hatena-link\"><iframe class=\"hatena-link-frame\" src=\"https://hatenablog-parts.com/embed?url=https://cybozu.github.io/frontend-expert/posts/tc39-meeting-2022-01\" style=\"border: none;\"></iframe></div></p>\n<p>を見てください。</p>\n<p>Symbols as WeakMap keys が一見シンプルながらこれまで Stage 2 のままだったのは、グローバルシンボルレジストリに登録された symbol や well-known symbols などのいわゆる eternal symbol を WeakMap のキーとして許容するかどうか、という論点のためでした。</p>\n<p>スライド( <a href=\"http://www.rricard.me/serve/tc39-jun2022-symbols-as-wm-keys.pdf\">http://www.rricard.me/serve/tc39-jun2022-symbols-as-wm-keys.pdf</a> ) 上では次のように書かれています。</p>\n<ul>\n<li>通常の Symbol コンストラクタで作られる unique symbols は WeakMap のキーとして許容する</li>\n<li><code>Symbol.for(\"...\")</code> で作られるグローバルシンボルレジストリに登録された registered symbols は WeakMap のキーとして許容しない</li>\n<li>well-known symbols は WeakMap のキーとして許容する</li>\n</ul>\n<p>実際 <a href=\"https://tc39.es/proposal-symbols-as-weakmap-keys/\">https://tc39.es/proposal-symbols-as-weakmap-keys/</a> を見る限り WeakMap のキーとして妥当かどうかを判断するために使われている abstract operation <a href=\"https://tc39.es/proposal-symbols-as-weakmap-keys/#sec-canbeheldweakly-abstract-operation\"><code>CanBeHeldWeakly</code></a> では registerd symbols を許容していないようです。</p>\n<h3><a href=\"https://github.com/tc39/proposal-regexp-modifiers\">RegExp Modifiers</a></h3>\n<p><strong>Stage 3 に到達しました</strong></p>\n<p>RegExp Modifiers は正規表現パターンの中でのフラグの変更を可能にするプロポーザルです。</p>\n<p>概要については 2021 年 12 月の記事を見てください。</p>\n<p><div class=\"hatena-link\"><iframe class=\"hatena-link-frame\" src=\"https://hatenablog-parts.com/embed?url=https://cybozu.github.io/frontend-expert/posts/tc39-meeting-2021-12\" style=\"border: none;\"></iframe></div></p>\n<h3><a href=\"https://github.com/tc39/proposal-json-parse-with-source\"><code>JSON.parse</code> source text access</a></h3>\n<p><strong>仕様のテキストの修正を待って条件付き Stage 3 にるようです</strong></p>\n<p><code>JSON.parse</code> source text access は、<code>JSON.parse</code> の第２引数として渡すことができる関数(reviver)の中でもとのテキストにアクセスできるようにするためのプロポーザルです。</p>\n<p>reviver ではパースした JSON のそれぞれのメンバーのキーとバリューにアクセスし、結果のオブジェクトを返す前になんらかの変換を施すことができます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">parse</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">{ \"foo\": 3 }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> value <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">return</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// { \"foo\": 5 }</span>\n</code></pre></div>\n<p>この reviver の引数としてキーとバリューが渡ってきた時点ですでにもとのテキストには存在する情報が失われていることがあります。</p>\n<p>たとえば <code>{ \"key\": 999999999999999999 }</code> という JSON を <code>JSON.parse</code> でパースするときに、reviver で受け取った引数をそのまま出力する例を考えてみましょう。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">parse</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">{ \"key\": 999999999999999999 }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 1000000000000000000</span>\n</code></pre></div>\n<p>もとの値は <code>999999999999999999</code> なのに実際に出力された値は <code>1000000000000000000</code> になっています。つまり、reviver の引数として受け取った時点でですでに <code>999999999999999999</code> ではなく <code>1000000000000000000</code> になってしまっています。</p>\n<p>なので、渡されたメンバーのバリューが <code>999999999999999999</code> なのかそれとも <code>1000000000000000000</code> なのか、reviver 側からは判断ができません。</p>\n<p>これでは困るので <code>JSON.parse</code> source text access では、次のようなインターフェースでもとのソーステキストにアクセスできます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">parse</span><span class=\"token punctuation\">(</span>\n  <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">{ \"key\": 999999999999999999 }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> source <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  　　<span class=\"token comment\">// ここで source には '999999999999999999' という文字列が入ってる</span>\n    <span class=\"token spread operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h2>For Stage 2</h2>\n<h3><a href=\"https://github.com/tc39/proposal-string-dedent\"><code>String.dedent</code></a></h3>\n<p><strong>Stage 2 に到達しました</strong></p>\n<p><code>String.dedent</code> はテンプレートリテラルの内部のインデントを適切に除去するためのタグ付きテンプレートリテラルを追加するプロポーザルです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"token string\">      create table student(</span>\n<span class=\"token string\">        id int primary key,</span>\n<span class=\"token string\">        name text</span>\n<span class=\"token string\">      )</span>\n<span class=\"token string\">    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>このようなコードを書くと、実際に出力される文字列には、通常プログラマーが期待するものとは異なるスペースが含まれることになります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninstance<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*</span>\n<span class=\"token comment\"></span>\n<span class=\"token comment\">      create table student(</span>\n<span class=\"token comment\">        id int primary key,</span>\n<span class=\"token comment\">        name text</span>\n<span class=\"token comment\">      )</span>\n<span class=\"token comment\">    </span>\n<span class=\"token comment\">*/</span>\n</code></pre></div>\n<p>こういうときのために適切にインデントを取り除いてくれるのが <code>String.dedent</code> です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">dedent</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"token string\">      create table student(</span>\n<span class=\"token string\">        id int primary key,</span>\n<span class=\"token string\">        name text</span>\n<span class=\"token string\">      )</span>\n<span class=\"token string\">    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninstance<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*</span>\n<span class=\"token comment\">create table student(</span>\n<span class=\"token comment\">  id int primary key,</span>\n<span class=\"token comment\">  name text</span>\n<span class=\"token comment\">)</span>\n<span class=\"token comment\">*/</span>     \n</code></pre></div>\n<h3><a href=\"https://github.com/tc39/proposal-grouped-and-auto-accessors\">Grouped and Auto-Accessors</a></h3>\n<p><strong>Stage 2 に到達しませんでした</strong></p>\n<p>Grouped and Auto-Accessors はクラスのアクセサを定義する新しい方法を導入するプロポーザルです。</p>\n<p>まず Grouped は次のようにして一つのプロパティのアクセサをまとめて定義できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span>\n  accessor x <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">}</span>\n    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  accessor x <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">}</span>\n    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>そして Auto-Accessors は Grouped に対するシンタックスシュガーのようなものです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span>\n  accessor a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// `accessor a { get; set; } = 1` と同じ</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>プロポーザルに README では様々なパターンが紹介されているので興味がある人はそちらを参照してください。</p>\n<h2>For Stage 1</h2>\n<h3><a href=\"https://github.com/bakkot/proposal-duplicate-named-capturing-groups\">Duplicate named capture groups</a></h3>\n<p><strong>Stage 2 に到達しました</strong></p>\n<p>この提案はもともと Stage 0 でしたが、アジェンダ上の議題は</p>\n<blockquote>\n<p>Duplicate named capture groups for stage 1, 2, or 3 reaches Stage 2</p>\n</blockquote>\n<p>でした。そして実際に Stage 1 をスキップして Stage 2 に到達しました。</p>\n<p>Duplicate named capture groups は正規表現の中で同名の名前付きグループを複数記述可能にするためのプロポーザルです。</p>\n<p>次のコードを見てください。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">str<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token group punctuation\">(?&#x3C;<span class=\"token group-name variable\">year</span>></span><span class=\"token char-class\"><span class=\"token char-class-punctuation punctuation\">[</span><span class=\"token range\">0<span class=\"token range-punctuation operator\">-</span>9</span><span class=\"token char-class-punctuation punctuation\">]</span></span><span class=\"token quantifier number\">{4}</span><span class=\"token group punctuation\">)</span>-<span class=\"token char-class\"><span class=\"token char-class-punctuation punctuation\">[</span><span class=\"token range\">0<span class=\"token range-punctuation operator\">-</span>9</span><span class=\"token char-class-punctuation punctuation\">]</span></span><span class=\"token quantifier number\">{2}</span><span class=\"token alternation keyword\">|</span><span class=\"token char-class\"><span class=\"token char-class-punctuation punctuation\">[</span><span class=\"token range\">0<span class=\"token range-punctuation operator\">-</span>9</span><span class=\"token char-class-punctuation punctuation\">]</span></span><span class=\"token quantifier number\">{2}</span>-<span class=\"token group punctuation\">(?&#x3C;<span class=\"token group-name variable\">year</span>></span><span class=\"token char-class\"><span class=\"token char-class-punctuation punctuation\">[</span><span class=\"token range\">0<span class=\"token range-punctuation operator\">-</span>9</span><span class=\"token char-class-punctuation punctuation\">]</span></span><span class=\"token quantifier number\">{4}</span><span class=\"token group punctuation\">)</span></span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これは yyyy-MM もしくは MM-yyyy の形をした文字列のマッチする正規表現ですが、現在の ECMAScript としてはインバリッドです。なぜなら同じ正規表現の中で同名の名前付きキャプチャグループが複数存在するからです。</p>\n<p>このようなケースでは、同じ正規表現の中に同名の名前付きキャプチャグループを複数記述できると便利です。</p>\n<h3><a href=\"https://github.com/hax/proposal-this-parameter\"><code>this</code> parameter</a></h3>\n<p><strong>Stage 1 に到達しませんでした</strong></p>\n<p><code>this</code> parameter は、TypeScript の <code>this</code> parameter のような構文を JavaScript に導入するためのプロポーザルです。</p>\n<p>次のようなモチベーションがあるようです。</p>\n<ul>\n<li>様々なツールチェインのために TypeScript の <code>this</code> parameter を標準化すること</li>\n<li>JavaScript と TypeScript の間のギャップを埋めることで初学者にとって易しくなるため</li>\n<li><a href=\"https://github.com/tc39/proposal-type-annotations\">Type Annotations</a> によってもたらされる負担をへらすため</li>\n<li>メソッドの構文を提供するため</li>\n</ul>\n<p>現在 Stage 1 の <a href=\"https://github.com/tc39/proposal-call-this\">call-this</a> においては、this を明示できるほうがわかりやすいのかもしれません。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">toHex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">this</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token number\">42</span><span class=\"token operator\">~</span><span class=\"token operator\">></span><span class=\"token function\">toHex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h3><a href=\"https://github.com/rbuckton/proposal-regexp-atomic-operators\">RegExp Atomic Operators</a></h3>\n<p><strong>Stage 1 に到達しました</strong></p>\n<p>RegExp Atomic Operators はバックトラックを制御するための新しい構文を正規表現に追加するプロポーザルです。</p>\n<p>たとえば <code>/a(bc|b)c/</code> という正規表現は <code>\"abcc\"</code> にも <code>\"abc\"</code> にもマッチします。\n<code>\"abcc\"</code> のときは単純で、まず先頭の <code>a</code> がマッチし、次に <code>(bc|b)</code> の <code>bc</code> にマッチして、最後に <code>c</code> がマッチします。\n一方で <code>\"abc\"</code> のときはやや複雑です。まず先頭の <code>a</code> がマッチし、次に <code>(bc|b)</code> の <code>bc</code> にマッチしますが、そうすると最後の <code>c</code> にはマッチできません。そこで <code>(bc|b)</code> までもどります。前回のマッチングにおいて <code>bc</code> ではマッチできなかったので、もう一つの選択肢である <code>b</code> にマッチさせます。そして最後の <code>c</code> にマッチします。</p>\n<p>このような後続のパターンがマッチしない場合に一つ前のパターンに戻ってマッチを試みることをバックトラックといいます。RegExp Atomic Operators はこのようなバックトラックを制御するための構文を追加します。</p>\n<p>たとえば前述の <code>/a(bc|b)c</code> というパターンでバックトラックが発生しないように Atomic Operators を使って書くと <code>/a(?>(bc|b))c</code> になります。このパターンでは <code>\"abcc\"</code> にはマッチしますが、<code>(bc|c)</code> へのバックトラックが発生しないため <code>\"abc\"</code> にはマッチしません。</p>\n<p>他にもいくつかの新しい構文があるみたいなので興味がある人はプロポーザルの README かスペックテキストを参照してください。</p>\n<h2>Updates</h2>\n<p>ステージの移動はないものの更新が紹介された提案を列挙します。ここでは詳細については説明しませんがスライドや関連するIssueへのリンクを貼ったので興味のある人は参照してください。</p>\n<h3><a href=\"https://github.com/tc39/proposal-array-grouping\">Array Grouping</a></h3>\n<p>Array Grouping は <a href=\"https://lodash.com/docs/4.17.15#groupBy\">Lodash の <code>groupBy</code></a> のように配列をグルーピングするメソッドを導入するプロポーザルです。</p>\n<p>今回の変更で <code>groupBy</code> と <code>groupByToMap</code> から <code>group</code> と <code>groupToMap</code> へとメソッドの名前が変更されました。</p>\n<p>詳細は該当の Pull Request( <a href=\"https://github.com/tc39/proposal-array-grouping/pull/39\">https://github.com/tc39/proposal-array-grouping/pull/39</a> )を見てください。</p>\n<h3><a href=\"https://github.com/tc39/proposal-decorators\">Decorators</a></h3>\n<ul>\n<li><a href=\"https://slides.com/pzuraq/decorators-normative-changes-2022-06\">https://slides.com/pzuraq/decorators-normative-changes-2022-06</a></li>\n</ul>\n<h3><a href=\"https://github.com/tc39/proposal-shadowrealm\">Shadow Realms</a></h3>\n<ul>\n<li><a href=\"https://github.com/tc39/proposal-shadowrealm/issues/365\">https://github.com/tc39/proposal-shadowrealm/issues/365</a></li>\n</ul>\n<h3><a href=\"https://tc39.es/proposal-temporal/\">Temporal</a></h3>\n<ul>\n<li><a href=\"http://ptomato.name/talks/tc39-2022-06/\">http://ptomato.name/talks/tc39-2022-06/</a></li>\n</ul>\n<h3><a href=\"https://github.com/tc39/proposal-function.sent\"><code>function.sent</code></a></h3>\n<ul>\n<li><a href=\"https://johnhax.net/2022/function-sent/slide#0\">https://johnhax.net/2022/function-sent/slide#0</a></li>\n</ul>\n<h3><a href=\"https://github.com/tc39/proposal-import-reflection\">Import Reflection</a></h3>\n<ul>\n<li><a href=\"https://docs.google.com/presentation/d/1y0MAo7ymIWzyyrU9o3oKLiHc4BtQwLtqlU4Z_8_XYjU/edit#slide=id.p\">https://docs.google.com/presentation/d/1y0MAo7ymIWzyyrU9o3oKLiHc4BtQwLtqlU4Z_8_XYjU/edit#slide=id.p</a></li>\n</ul>\n<h2>参考リンク</h2>\n<ul>\n<li>TC39\n<ul>\n<li><a href=\"https://github.com/tc39/agendas/blob/main/2022/06.md\">agendas/06.md at main · tc39/agendas</a></li>\n<li><a href=\"https://github.com/tc39/notes/blob/main/meetings/2022-06/jun-06.md\">notes/jun-06.md at main · tc39/notes</a></li>\n<li><a href=\"https://github.com/tc39/notes/blob/main/meetings/2022-06/jun-07.md\">notes/jun-07.md at main · tc39/notes</a></li>\n<li><a href=\"https://github.com/tc39/notes/blob/main/meetings/2022-06/jun-08.md\">notes/jun-08.md at main · tc39/notes</a></li>\n</ul>\n</li>\n<li>Babel\n<ul>\n<li><a href=\"https://github.com/babel/proposals/issues/82\">Jun 2022 · Issue #82 · babel/proposals</a></li>\n</ul>\n</li>\n<li>SpiderMonkey\n<ul>\n<li><a href=\"https://spidermonkey.dev/blog/2022/06/30/newsletter-firefox-102-103.html\">SpiderMonkey Newsletter (Firefox 102-103) | SpiderMonkey JavaScript/WebAssembly Engine</a></li>\n</ul>\n</li>\n</ul>\n","metaData":{"title":"ECMAScriptの最新動向 2022年06月版","author":"sosukesuzuki","createdAt":"2022-07-11","summary":"2022年06月06日~09日に開催された TC39 meeting 90th の内容を紹介します","tags":["TC39","ECMAScript"],"updatedAt":"2022-07-11"}},{"slug":"tc39-meeting-2022-03","content":"<p>この記事では2022年03月28日~31日に開催された TC39 meeting 89th で議題に上がったプロポーザルを紹介します。</p>\n<h2>For Stage 4</h2>\n<p>For Stage 4 の提案はありませんでした。</p>\n<h2>For Stage 3</h2>\n<h3><a href=\"https://github.com/tc39/proposal-regexp-v-flag\">RegExp set notation + Unicode properties of strings</a></h3>\n<p><strong>Stage 3 に到達しました</strong></p>\n<p>このプロポーザルは正規表現に新しく<code>v</code>フラグを導入し、その中で set notation と Unicode properties of strings を使えるようにします。\n(翻訳するとしたら set notation は「集合の表記」、properties of strings は「文字列プロパティ」でしょうか。定訳がわからないのでこの記事ではこれらの用語を英語のまま表記します。)</p>\n<p>まず、set notation とは次のような記法のことです。\n(<code>A</code> や <code>B</code> は character class (<code>[a-z]</code>など) もしくは Unicode property escape (<code>\\p{ASCII}</code>など) とします)</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">// 差(difference/subtraction)\n[A--B]\n\n// 共通部分(intersection)\n[A&#x26;amp;&#x26;amp;B]\n\n// nested character class\n[A--[0-9]]</code></pre></div>\n<p><a href=\"https://github.com/tc39/proposal-regexp-v-flag#illustrative-examples\">プロポーザルのリポジトリでは実用的なユースケースが紹介されています。</a></p>\n<p>次に Unicode properties of strings は、domain が character や code point ではなく string (character の sequence) であるような Unicode property のことです。\n(Unicode の property については Unicode の <a href=\"https://www.unicode.org/reports/tr18/#Categories\">UTS18</a> の Properties を読むのがわかりやすいと思います)</p>\n<p>このプロポーザルの中では次の property of string がサポートされるようです。(ref: <a href=\"https://github.com/tc39/ecma262/pull/2418/files#diff-00f81a4e81713d00d0ebd710c18a798b699d244361ceb04fecbb06db6b32e8ba\">https://github.com/tc39/ecma262/pull/2418/files#diff-00f81a4e81713d00d0ebd710c18a798b699d244361ceb04fecbb06db6b32e8ba</a>)<br>\n(見たところどれも Binary のものしかありませんが、今後他の datatype のものも追加されるかどうかはわかりません)</p>\n<ul>\n<li><code>Basic_Emoji</code></li>\n<li><code>Emoji_Keycap_Sequence</code></li>\n<li><code>RGI_Emoji_Modifier_Sequence</code></li>\n<li><code>RGI_Emoji_Flag_Sequence</code></li>\n<li><code>RGI_Emoji_Tag_Sequence</code></li>\n<li><code>RGI_Emoji_ZWJ_Sequence</code></li>\n<li><code>RGI_Emoji</code></li>\n</ul>\n<p>これによって複数の code point からなる Emoji に対して Unicode property escape を使ってマッチさせられるようです。</p>\n<p>(Unicode についてはあまり詳しくないので記述について誤りを見つけた人は教えてほしいです。)</p>\n<p>ちなみに Unicode properties of strings はもともとは<a href=\"https://github.com/tc39/proposal-regexp-unicode-sequence-properties\">別のプロポーザル</a>でしたが、2021年5月にこのプロポーザルにマージされました。</p>\n<h3><a href=\"https://github.com/tc39/proposal-change-array-by-copy\">Change Array by Copy</a></h3>\n<p><strong>Stage 3 に到達しました</strong></p>\n<p>Change Array by Copy は Array と TypedArray にいくつかのイミュータブルなメソッドを追加するプロポーザルです。</p>\n<p>以前この提案について記事を書いたのでより深く知りたい場合はそちらも参照してください(この記事は約1年前に書かれたものなので、現在提案されている仕様とは異なる部分があります)。</p>\n<p><div class=\"hatena-link\"><iframe class=\"hatena-link-frame\" src=\"https://hatenablog-parts.com/embed?url=https://sosukesuzuki.dev/posts/change-array-by-copy\" style=\"border: none;\"></iframe></div></p>\n<p>このプロポーザルについての議論では、新たに追加されるメソッドをどのように命名するかが主な論点にあがっていました。</p>\n<p>現在では次のような <code>with</code> + <code>メソッド名の過去形(過去分詞形?)</code> という形で落ち着いたようです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ミュータブルなメソッド</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// イミュータブルなメソッド</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">withReversed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これらのメソッドは便利な一方、配列をコピーして返すため配列の要素数に応じて発生するオーバーヘッドを考慮して使う必要があります。</p>\n<h3><a href=\"https://github.com/tc39/proposal-decorators\">Decorators</a></h3>\n<p><strong>Stage 3 に到達しました</strong></p>\n<p>Decorators はクラスを拡張するための構文を導入するプロポーザルです。</p>\n<p>このプロポーザルは5年以上に渡って議論が行われてきた上、TypeScript によって早期からサポートされていたため開発者に広く認知されています。</p>\n<p>ミーティングで使われたスライドの冒頭では</p>\n<blockquote>\n<p>What is a decorator?\nDecorators are <em>functions</em> which have four main capabilities when applied to a class or class element</p>\n<ul>\n<li>Replacement</li>\n<li>Initialization</li>\n<li>Metadata</li>\n<li>Access</li>\n</ul>\n</blockquote>\n<p>と説明されています。</p>\n<p>ちなみに現在 TypeScript に実装されている Decorators は現在の TC39 の Decorators とは異なるものです。<a href=\"https://github.com/microsoft/TypeScript/issues/49074\">TypeScript 4.8 で TC39 の Decorators を実装することが検討されています。</a></p>\n<p>筆者としては、Decorators はコードを書くときの体験を大きく変えうる機能である一方で、複雑で厄介なコードを生み出す可能性も高い機能だと考えています。\nしたがって一般的な Web アプリケーション開発にとっては、ライブラリが提供する Decorators を使用する程度にとどめておくのが、適切な関わり方なのではないかと思っています。</p>\n<p>この新しい Decorators に対してコミュニティがどのように向き合っていくのか、動向が気になるところです。</p>\n<h2>For Stage 2</h2>\n<h3><a href=\"https://github.com/tc39/proposal-pattern-matching\">Pattern Matcing</a></h3>\n<p><strong>Stage 2 に到達しませんでした</strong></p>\n<p>Pattern Matching は名前の通りパターンマッチを導入するためのプロポーザルです。</p>\n<p>現在の ECMAScript では正規表現を除き値のマッチングを行うことができません。\nまた、<code>switch</code> 文にはよく知られたいくつかの問題があります。</p>\n<ul>\n<li>式として使えない</li>\n<li>各 <code>case</code> に明示的な <code>break</code> で必要である</li>\n<li>各 <code>case</code> でスコープが曖昧である</li>\n<li>など</li>\n</ul>\n<p>Pattern Matching ではこれらの問題に対処するための新しい構文を導入します。</p>\n<p>例を示します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">match</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">when</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> status<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">handleData</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">,</span> rest<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">when</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> status<span class=\"token punctuation\">,</span> destination<span class=\"token operator\">:</span> url <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">300</span> <span class=\"token operator\">&#x3C;=</span> status <span class=\"token operator\">&#x26;&#x26;</span> status <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">handleRedirect</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">when</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> status<span class=\"token operator\">:</span> <span class=\"token number\">500</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hasRetried<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">retry</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hasRetried <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token function\">throwSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li><code>match</code> からはじまるブロック全体は match construct と呼ばれます。match construct 全体で一つの式として振る舞います。</li>\n<li><code>match(res)</code> の <code>res</code> は matchable と呼ばれます。matchable は任意の式です。</li>\n<li><code>when</code> や <code>default</code> で始まる部分を clause (句) と呼びます。clause は <code>:</code> で LHS と RHS に区切られます。\n<ul>\n<li>clause の LHS は <code>when</code> もしくは <code>default</code> で始まる必要があります。\n<ul>\n<li><code>when</code> clause は、<code>when</code> というキーワードのあとにカッコで囲まれた pattern を記述します。\n<ul>\n<li>カッコで囲まれた pattern のあとには <code>if</code> と条件式で構成された guard を記述することができます。pattern の表現力では不十分だった場合に guard を使ってさらなるロジックを記述できます。</li>\n</ul>\n</li>\n<li><code>default</code> clause は他のどの clause にもマッチしなかった場合にマッチします。\n<ul>\n<li><code>default</code> clause はなくても問題ありませんが、使う場合はからなず最後に置かなければいけません。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>clause の RHS は任意の式です。ブロックステートメント(<code>{ }</code>)を書くことはできません。なので、複雑なロジックを記述したいときは現在では即時実行関数を使う必要があります。将来的には、現在提案されている <a href=\"\">do expression</a> がここで役に立つでしょう。</li>\n</ul>\n</li>\n</ul>\n<p><code>when</code> clause に続く pattern では、実際にはもっと複雑なパターンを記述できます。(ref: <a href=\"https://github.com/tc39/proposal-pattern-matching#pattern\">https://github.com/tc39/proposal-pattern-matching#pattern</a>)</p>\n<p>Pattern Mathcing は JavaScript のコーディングスタイルを大きく変えうる強力な機能です。</p>\n<p>今回のミーティングでは仕様のテキストに懸念があり、時間内に Stage 2 に到達する合意は得られなかったようです。</p>\n<h2>For Stage 1</h2>\n<h3><a href=\"https://github.com/tc39/proposal-function-once\">Function.prototype.once</a></h3>\n<p><strong>Stage 1 に到達しました</strong></p>\n<ul>\n<li><a href=\"https://docs.google.com/presentation/d/1M0bzEEBZGfb_gIDVjIytbfYnLUhG7EN9iUTx6KJE2po/edit#slide=id.gfacc5909b0_0_5\">https://docs.google.com/presentation/d/1M0bzEEBZGfb_gIDVjIytbfYnLUhG7EN9iUTx6KJE2po/edit#slide=id.gfacc5909b0_0_5</a></li>\n</ul>\n<p><code>Function.prototype.once</code> は、<code>Function</code> に一度だけ呼び出されるような関数を作るためのインスタンスメソッドを導入するプロポーザルです。</p>\n<p>例を示します。関数 <code>f</code> は受け取った引数を出力し、それに2をかけた数を返す関数です。\nこのとき <code>f.once()</code> は、一度だけ <code>f</code> を呼び出す関数を返します。<code>f.once()</code> の返り値の関数を二度以上呼び出しても <code>f</code> が再度呼び出されることはなく、その返り値は最初の<code>f</code>の返り値となります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">f</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword control-flow\">return</span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> fOnce <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">once</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">fOnce</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// `3` が出力され、`6` が返される</span>\n<span class=\"token function\">fOnce</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 何も出力されず、`6` が返される</span>\n<span class=\"token function\">fOnce</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 何も出力されず、`6` が返される</span>\n</code></pre></div>\n<p><a href=\"https://github.com/tc39/proposal-function-once/tree/15c443d07d65fc0f20d4b17f3c11a78086029bc7#real-world-examples\">プロポーザルのリポジトリでは実用的なユースケースが紹介されています。</a></p>\n<h3><a href=\"https://github.com/tc39/proposal-type-annotations\">Type Annotations</a></h3>\n<p><strong>Stage 1 に到達しました</strong></p>\n<p>Type Annotations プロポーザルは、ECMAScript の仕様に TypeScript や Flow のような型の構文を導入するプロポーザルです。</p>\n<p>たとえば、次に示すような型注釈を含むコードが JavaScript のプログラムとして妥当になります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> foo<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span>param<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> param<span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>このプロポーザルでは ECMAScript に型チェックを導入するのではなく、あくまで型の構文だけを導入します。つまり型による静的チェックを行う場合はこれまで通り統合開発環境やTypeScript Compilerなどを使う必要があります。</p>\n<p>このプロポーザルについて以前記事を書いたので興味のある人はそちらも参照してください。</p>\n<p><div class=\"hatena-link\"><iframe class=\"hatena-link-frame\" src=\"https://hatenablog-parts.com/embed?url=https://sosukesuzuki.dev/posts/stage-1-type-annotations\" style=\"border: none;\"></iframe></div></p>\n<p>また、過去に Harajuku.ts という勉強会で <a href=\"https://twitter.com/uhyo_\">@uhyo_</a> さんと <a href=\"https://twitter.com/okunokentaro\">@okunokentaro</a> さんと議論したので興味のある人はそのときのアーカイブも御覧ください。</p>\n<p><a href=\"https://youtu.be/eS51szIxGTQ\">https://youtu.be/eS51szIxGTQ</a></p>\n<h2>Updates</h2>\n<p>ステージの移動はないものの更新が紹介された提案を列挙します。ここでは詳細については説明しませんがスライドや関連するIssueへのリンクを貼ったので興味のある人は参照してください。</p>\n<h3><a href=\"https://github.com/tc39/proposal-array-grouping\">Array Grouping</a></h3>\n<ul>\n<li><a href=\"https://github.com/tc39/proposal-array-grouping/issues/37\">https://github.com/tc39/proposal-array-grouping/issues/37</a></li>\n</ul>\n<h3><a href=\"https://github.com/tc39/proposal-resizablearraybuffer\">Resizable Array Buffer</a></h3>\n<ul>\n<li><a href=\"https://docs.google.com/presentation/d/1QBbEnfWn9QAn48J1SAm3l5xJARE5wcKt3MlTlcVKIek/edit#slide=id.p\">https://docs.google.com/presentation/d/1QBbEnfWn9QAn48J1SAm3l5xJARE5wcKt3MlTlcVKIek/edit#slide=id.p</a></li>\n</ul>\n<h3><a href=\"https://github.com/tc39/proposal-temporal\">Temporal</a></h3>\n<ul>\n<li><a href=\"http://ptomato.name/talks/tc39-2022-03/\">http://ptomato.name/talks/tc39-2022-03/</a></li>\n</ul>\n<h3><a href=\"https://github.com/tc39/proposal-shadowrealm\">Shadow Realms</a></h3>\n<ul>\n<li><a href=\"https://docs.google.com/presentation/d/1Juv36nUTfcvb_E2NUeAPGuToCCBWIX0NLObx_h5qDYU/edit#slide=id.p\">https://docs.google.com/presentation/d/1Juv36nUTfcvb_E2NUeAPGuToCCBWIX0NLObx_h5qDYU/edit#slide=id.p</a></li>\n</ul>\n<h3><a href=\"https://github.com/tc39/proposal-pipeline-operator\">Pipe Operator</a></h3>\n<ul>\n<li><a href=\"https://docs.google.com/presentation/d/1dDucwsW8qM22yWLr_NHFmAiAltQSht3AXYW00kET4GA/edit#slide=id.gfacc5909b0_0_5\">https://docs.google.com/presentation/d/1dDucwsW8qM22yWLr_NHFmAiAltQSht3AXYW00kET4GA/edit#slide=id.gfacc5909b0_0_5</a></li>\n</ul>\n<h3><a href=\"https://github.com/tc39/proposal-call-this\">Call-this operator</a></h3>\n<ul>\n<li><a href=\"https://docs.google.com/presentation/d/1-MLGCibETPX8NiIvNJ1xOxiMS-NB8GCbDGNcB5patiU/edit#slide=id.gfacc5909b0_0_5\">https://docs.google.com/presentation/d/1-MLGCibETPX8NiIvNJ1xOxiMS-NB8GCbDGNcB5patiU/edit#slide=id.gfacc5909b0_0_5</a></li>\n</ul>\n<h3><a href=\"https://github.com/tc39/proposal-string-dedent\">String.dedent</a></h3>\n<ul>\n<li><a href=\"https://docs.google.com/presentation/d/1fF4TqU6eLcj74s0wa1VSq5wGORSY1m1naekTNF9JAz4/edit#slide=id.gc6f73a04f_0_0\">https://docs.google.com/presentation/d/1fF4TqU6eLcj74s0wa1VSq5wGORSY1m1naekTNF9JAz4/edit#slide=id.gc6f73a04f_0_0</a></li>\n</ul>\n<h2>参考リンク</h2>\n<ul>\n<li>TC39\n<ul>\n<li><a href=\"https://github.com/tc39/agendas/blob/main/2022/03.md\">agendas/03.md at main · tc39/agendas</a></li>\n<li><a href=\"https://github.com/tc39/notes/blob/main/meetings/2022-03/mar-28.md\">notes/mar-28.md at main · tc39/notes</a></li>\n<li><a href=\"https://github.com/tc39/notes/blob/main/meetings/2022-03/mar-29.md\">notes/mar-29.md at main · tc39/notes</a></li>\n<li><a href=\"https://github.com/tc39/notes/blob/main/meetings/2022-03/mar-30.md\">notes/mar-30.md at main · tc39/notes</a></li>\n<li><a href=\"https://github.com/tc39/notes/blob/main/meetings/2022-03/mar-31.md\">notes/mar-31.md at main · tc39/notes</a></li>\n</ul>\n</li>\n<li>Babel\n<ul>\n<li><a href=\"https://github.com/babel/proposals/issues/81\">March 2022 · Issue #81 · babel/proposals</a></li>\n</ul>\n</li>\n<li>TypeScript\n<ul>\n<li><a href=\"https://github.com/microsoft/TypeScript/issues/49074\">TypeScript 4.8 Iteration Plan · Issue #49074 · microsoft/TypeScript</a></li>\n<li><a href=\"https://github.com/microsoft/TypeScript/issues/48885\">Implement the updated JS decorators proposal · Issue #48885 · microsoft/TypeScript</a></li>\n</ul>\n</li>\n<li>Unicode\n<ul>\n<li><a href=\"https://www.unicode.org/reports/tr18/\">UTS #18: Unicode Regular Expressions</a></li>\n<li><a href=\"https://util.unicode.org/UnicodeJsps/properties.jsp\">Unicode Utilities: Character Property Index</a></li>\n</ul>\n</li>\n</ul>\n","metaData":{"title":"ECMAScriptの最新動向 2022年03月版","author":"sosukesuzuki","createdAt":"2022-06-13","summary":"2022年03月28日~31日に開催された TC39 meeting 89th の内容を紹介します","tags":["TC39","ECMAScript"],"updatedAt":"2022-06-13"}},{"slug":"tc39-meeting-2022-01","content":"<p>この記事では2021年01月24日~27日に開催された TC39 meeting 88th で議題に上がったプロポーザルについて紹介します。</p>\n<h2>For Stage 4</h2>\n<p>For Stage 4 の提案はありませんでした。</p>\n<h2>For Stage 3</h2>\n<h3><a href=\"https://github.com/tc39/proposal-array-from-async/\">Array.fromAsync</a></h3>\n<p><strong>Stage 3 にはなりませんでした。</strong></p>\n<p><code>Array.fromAsync</code> は次のようにして非同期イテラブルから配列を生成するスタティックメソッドを追加するプロポーザルです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token operator\">*</span> <span class=\"token function\">asyncGen</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword control-flow\">yield</span> i <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fromAsync</span><span class=\"token punctuation\">(</span><span class=\"token function\">asyncGen</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><a href=\"https://github.com/tc39/proposal-array-from-async/issues/19\">https://github.com/tc39/proposal-array-from-async/issues/19</a> で指摘された問題のため、Stage 3 にはなりませんでした。</p>\n<h2>For Stage 2</h2>\n<h3><a href=\"https://github.com/tc39/proposal-class-brand-check\">Class brand checks</a></h3>\n<p><strong>Stage 2 にはなりませんでした</strong></p>\n<p>Class brand checks は brand check のための新しい構文を導入するプロポーザルです。</p>\n<p>brand check は TC39 内で使われる用語で、<a href=\"https://github.com/tc39/how-we-work/blob/master/terminology.md#brand-check\">https://github.com/tc39/how-we-work/blob/master/terminology.md#brand-check</a> で説明されています。</p>\n<p>brand check とは、雑に言えば「ある値があるデータ型であることを検証すること」です。たとえば <code>Array.isArray</code> は brand check です(<a href=\"https://zenn.dev/sosukesuzuki/articles/e0516a3d4c424e\"><code>instanceof</code> は厳密ではない</a>ため brand check ではありません)。</p>\n<p>以前 brand check の方法の一つである <a href=\"https://github.com/tc39/proposal-private-fields-in-in\">Ergonomic brand checks for private fields</a> についての記事を書いたので興味のある方はそちらもご覧ください。</p>\n<p><div class=\"hatena-link\"><iframe class=\"hatena-link-frame\" src=\"https://hatenablog-parts.com/embed?url=https://cybozu.github.io/frontend-expert/posts/ergonomic-brand-checks-for-private-fields\" style=\"border: none;\"></iframe></div></p>\n<p>Class branc check プロポーザルでは <code>class.hasInstance(x)</code> という新しい Meta Property を追加します。これはクラスの中でのみ使うことができ、引数として渡された値が今いるクラスのインスタンスかどうかをチェックします。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function\">isFoo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">hasInstance</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Foo</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isFoo</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Foo</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isFoo</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n</code></pre></div>\n<h2>For Stage 1</h2>\n<h3><a href=\"https://github.com/rbuckton/proposal-enum\">enum</a></h3>\n<p><strong>Stage 1 にはなりませんでした。</strong></p>\n<p>enum は列挙型を実現するためのプロポーザルです。このプロポーザルは 4 年ほど前から存在していましたがまた動き出したようです。</p>\n<p>enum プロポーザルでは次のような構文を導入します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">enum</span> <span class=\"token maybe-class-name\">SyntaxKind</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">A</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">B</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">C</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>他のプログラミング言語の enum と構文上は似ています。</p>\n<p>しかし細部の仕様について検討すべき事項が多く、今回のミーティングでは Stage 1 に到達することはありませんでした。<a href=\"https://docs.google.com/presentation/d/14WtGmdWjEYXIXZVWJWpERF98D90_BytceAu7b7DKr5Q/edit#slide=id.g10effb28f4f_0_273\">このスライド</a>に詳しくまとまっているので興味のある方はご覧ください。</p>\n<h3><a href=\"https://github.com/tc39/proposal-reversible-string-split\">Reversible string split</a></h3>\n<p><strong>Stage 1 になりました。</strong></p>\n<p>Reversible string split は可逆(Reversible)の文字列分割のための方法を導入するプロポーザルです。</p>\n<p>JavaScript では <code>String.prototype.split</code> を使って文字列を分割できます。</p>\n<p><div class=\"hatena-link\"><iframe class=\"hatena-link-frame\" src=\"https://hatenablog-parts.com/embed?url=https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/String/split\" style=\"border: none;\"></iframe></div></p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> splitted <span class=\"token operator\">=</span> <span class=\"token string\">\"A,B,C,D,E\"</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>splitted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 'A', 'B', 'C', 'D', 'E' ]</span>\n</code></pre></div>\n<p><code>String.prototype.split</code> は第2引数として非負の整数を渡すことで、分割する数を制限できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> splitted1 <span class=\"token operator\">=</span> <span class=\"token string\">\"A,B,C,D,E\"</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>splitted1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 'A' ]</span>\n\n<span class=\"token keyword\">const</span> splitted2 <span class=\"token operator\">=</span> <span class=\"token string\">\"A,B,C,D,E\"</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>splitted2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 'A', 'B' ]</span>\n\n<span class=\"token keyword\">const</span> splitted3 <span class=\"token operator\">=</span> <span class=\"token string\">\"A,B,C,D,E\"</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>splitted3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 'A', 'B', 'C' ]</span>\n</code></pre></div>\n<p>JavaScript 以外のいくつかの言語(Perl、PHP、Ruby、Go、Rust、Java など)では第2引数を受け取った <code>String.prototype.split</code> に相当する機能は、次のように文字列の分割を行います。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> splitted2 <span class=\"token operator\">=</span> <span class=\"token string\">\"A,B,C,D,E\"</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>splitted2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 'A', 'B,C,D,E' ]</span>\n</code></pre></div>\n<p>N-1 回分割され、残りの部分が戻り値の配列の末尾に含まれています(戻り値の配列の要素数が N)。</p>\n<p>Reversible string split プロポーザルでは、このような振る舞いを持つ新しいメソッド <code>String.prototype.splitN</code> を導入します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> splitted2 <span class=\"token operator\">=</span> <span class=\"token string\">\"A,B,C,D,E\"</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">splitN</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>splitted2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 'A', 'B,C,D,E' ]</span>\n</code></pre></div>\n<p>このような文字列分割メソッドを使うと、次のようにして分割する前の文字列を取得できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token string\">\"A,B,C,D,E\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> separator <span class=\"token operator\">=</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> n <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">splitN</span><span class=\"token punctuation\">(</span>separator<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>separator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<p>提案の名前に含まれている Reversible というのはこのような可逆性のことを指しているようです。</p>\n<h2>Updates</h2>\n<h3><a href=\"https://github.com/tc39/proposal-symbols-as-weakmap-keys\">Symbols as WeakMap keys</a></h3>\n<p>Symbols as WeakMap keys は Symbol を WeakMap のキーとして使えるようにするためのプロポーザルです。</p>\n<p>現在では一部情報が古くなっていますが以前このプロポーザルについて解説する記事を書いたので興味がある方はそちらもご覧ください。</p>\n<p><div class=\"hatena-link\"><iframe class=\"hatena-link-frame\" src=\"https://hatenablog-parts.com/embed?url=https://sosukesuzuki.dev/posts/symbols-as-weakmap-keys\" style=\"border: none;\"></iframe></div></p>\n<p>以前から Symbols as WeakMap keys プロポーザルのモチベーションや基本的な振る舞いについては概ね合意がとれていました。しかし、Well-knwon Symbols やグローバルシンボルレジストリに登録された Symbol (Eternal Symbol と呼ばれている)についてはどのように扱うべきかという点で TC39 メンバー内でも意見が分かれていました。</p>\n<p>今回のミーティングで Symbols as WeakMap keys チャンピョングループは、Eternal Symbol を WeakMap のキーとして使おうとするとエラーが throw されるという振る舞いを選択したことを発表しました。それにともなって、<code>WeakMap.isValidKey(x)</code>、<code>WeakSet.isValidValue(x)</code>、<code>WeakRef.isValidTarget(x)</code>、<code>FinalizationRegistry.isValidTarget(x)</code> などのいくつかのスタティックメソッドが追加される可能性があります。</p>\n<p>しかし議事録によればまだ TC39 メンバーの中で意見が分かれているため仕様の決定には時間がかかりそうです。</p>\n<h2>参考リンク</h2>\n<ul>\n<li>TC39\n<ul>\n<li><a href=\"https://github.com/tc39/agendas/blob/main/2022/01.md\">agendas/01.md at main · tc39/agendas</a></li>\n<li><a href=\"https://github.com/tc39/notes/blob/main/meetings/2022-01/jan-24.md\">notes/jan-24.md at main · tc39/notes</a></li>\n<li><a href=\"https://github.com/tc39/notes/blob/main/meetings/2022-01/jan-25.md\">notes/jan-25.md at main · tc39/notes</a></li>\n<li><a href=\"https://github.com/tc39/notes/blob/main/meetings/2022-01/jan-26.md\">notes/jan-26.md at main · tc39/notes</a></li>\n<li><a href=\"https://github.com/tc39/proposal-array-from-async/\">Proposal Array.fromAsync</a></li>\n<li><a href=\"https://github.com/tc39/proposal-symbols-as-weakmap-keys\">Proposal Symbols as WeakMap keys</a></li>\n<li><a href=\"https://github.com/tc39/proposal-class-brand-check\">Proposal <code>class.hasInstance()</code></a></li>\n<li><a href=\"https://github.com/rbuckton/proposal-enum\">Proposal enum</a></li>\n<li><a href=\"https://github.com/tc39/proposal-reversible-string-split\">Proposal Reversible string split</a></li>\n</ul>\n</li>\n<li>Babel\n<ul>\n<li><a href=\"https://github.com/babel/proposals/issues/80\">Jan 2022 · Issue #80 · babel/proposals</a></li>\n</ul>\n</li>\n</ul>\n","metaData":{"title":"ECMAScriptの最新動向 2022年01月版","author":"sosukesuzuki","createdAt":"2022-03-09","summary":"2021年01月24日~27日に開催された TC39 meeting 88th の内容を紹介します","tags":["TC39","ECMAScript"],"updatedAt":"2022-03-09"}},{"slug":"tc39-meeting-2021-12","content":"<p>TC39 の 87 回目のミーティングが 12月14日 ~ 12月15日に開催されました。このミーティングで議題に上がった提案とそのステージの移動について紹介します。</p>\n<h2>For Stage 4</h2>\n<p><strong>For Stage 4 の提案はありませんでした</strong></p>\n<h2>For Stage 3</h2>\n<h3><a href=\"https://github.com/tc39/proposal-array-grouping\">Array Grouping</a></h3>\n<p><strong>Stage 3 になりました</strong></p>\n<p>Array Grouping は <code>Array.prototype.groupBy</code> と <code>Array.prototype.groupByToMap</code> を追加するプロポーザルです。</p>\n<p>2021 年 10 月のミーティングで Stage 2 になったばかりですが、今回のミーティングで Stage 3 になりました。</p>\n<p>また、今回から <code>Array.prototype.groupByToMap</code> が追加されています。</p>\n<p>これは <code>groupBy</code> の結果が <code>Map</code> になったものです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> odd  <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">odd</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> even <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">even</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">groupByToMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> num <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> even<span class=\"token operator\">:</span> odd<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Map { {odd: true}: [1, 3, 5], {even: true}: [2, 4] }</span>\n</code></pre></div>\n<h2>For Stage 2</h2>\n<h3><a href=\"https://github.com/tc39/proposal-array-from-async/\">Array.fromAsync</a></h3>\n<p><strong>Stage 2 になりました</strong></p>\n<p><code>Array.fromAsync</code> は非同期イテラブルから配列を生成するためのスタティックメソッドを追加するプロポーザルです。</p>\n<p>JavaScript では <code>Array.from</code> を使ってイテラブルから配列を生成できます。しかし、非同期イテラブルから配列を生成することはできません。</p>\n<p>このプロポーザルによって追加される <code>Array.fromAsync</code> メソッドを使うと次のようにして非同期イテラブルから配列を生成できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token operator\">*</span> <span class=\"token function\">asyncGen</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword control-flow\">yield</span> i <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fromAsync</span><span class=\"token punctuation\">(</span><span class=\"token function\">asyncGen</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3><a href=\"https://github.com/tc39/proposal-regexp-r-escape\">RegExp <code>\\R</code> escape</a></h3>\n<p><strong>Stage 2 になりませんでした</strong></p>\n<p>RegExp <code>\\R</code> escape は以前 <a href=\"https://github.com/rbuckton/proposal-regexp-features\">RegExp Language Features</a> として提案されていた正規表現の機能群の１つで、正規表現内で line terminator とシンプルにマッチングさせるために新しく <code>\\R</code> を導入する提案です。</p>\n<p>この機能は <code>u</code> もしくは <code>v</code> フラグが有効になっているときのみ有効になります。そして、大まかには次のパターンと等価です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token operator\">?</span><span class=\"token operator\">></span>\\r\\n<span class=\"token operator\">?</span><span class=\"token operator\">|</span><span class=\"token punctuation\">[</span>\\x0A<span class=\"token operator\">-</span>\\x0C\\x85\\u<span class=\"token punctuation\">{</span><span class=\"token number\">2028</span><span class=\"token punctuation\">}</span>\\u<span class=\"token punctuation\">{</span><span class=\"token number\">2029</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>この正規表現の機能は Perl をはじめとする多くの正規表現エンジンに実装されていて、TC39 においてもそのユースケースは認められているようです。</p>\n<p>しかし、<a href=\"https://github.com/tc39/proposal-regexp-set-notation\">RegExp Set Notation Proposal</a> の sequece properties によって同等の機能が実現できる可能性があるためその方向で調査しなおすべきだという結論になり Stage 2 には到達しませんでした。</p>\n<h3><a href=\"https://github.com/tc39/proposal-regexp-modifiers\">RegExp Modifiers</a></h3>\n<p><strong>Stage 2 になりました</strong></p>\n<p>RegExp Modifiers は <code>\\R</code> escape と同じようにもともと RegExp Language Features の機能の１つでした。</p>\n<p>この提案は正規表現パターン内でのフラグの変更を可能にします。</p>\n<p>例を示します。</p>\n<p>次の例中の正規表現パターン全体には <code>i</code> フラグが適用されてます。しかし２つめの <code>[a-z]</code> は <code>?-i:</code> という RegExp Modifiers の構文を使って <code>i</code> フラグを無効にしてます。このとき一文字目では大文字小文字が無視されるものの、二文字目では大文字小文字が無視されません。</p>\n<p>したがってこのパターンは <code>\"ab\"</code> や <code>\"Ab\"</code> にはマッチし <code>\"aB\"</code> にはマッチしません。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> re1 <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token anchor function\">^</span><span class=\"token char-class\"><span class=\"token char-class-punctuation punctuation\">[</span><span class=\"token range\">a<span class=\"token range-punctuation operator\">-</span>z</span><span class=\"token char-class-punctuation punctuation\">]</span></span><span class=\"token group punctuation\">(</span><span class=\"token quantifier number\">?</span>-i:<span class=\"token char-class\"><span class=\"token char-class-punctuation punctuation\">[</span><span class=\"token range\">a<span class=\"token range-punctuation operator\">-</span>z</span><span class=\"token char-class-punctuation punctuation\">]</span></span><span class=\"token group punctuation\">)</span><span class=\"token anchor function\">$</span></span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">;</span>\nre1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ab\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nre1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ab\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nre1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n</code></pre></div>\n<h3><a href=\"https://github.com/tc39/proposal-regexp-buffer-boundaries\">RegExp Buffer Boundaries</a></h3>\n<p><strong>Stage 2 になりました</strong></p>\n<p>RegExp Buffer Boundaries も RegExp Language Features の機能の１つでした。</p>\n<p>この提案は、それぞれ入力の最初と最後にマッチする <code>\\A</code> と <code>\\z</code> を導入します。<code>m</code> フラグの影響を受けないことを除けば <code>^</code> と <code>$</code> に似ています。</p>\n<p><code>^</code> と <code>$</code> はそれぞれ最初と最後にマッチしますが、<code>m</code> フラグが有効になっているときは行頭と行末にマッチします。しかし RegExp Buffer Boundaries が導入する <code>\\A</code> と <code>\\z</code> は、たとえ <code>m</code> フラグが有効であっても入力の最初と最後にマッチします。</p>\n<p>例を示します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token anchor function\">\\A</span>foo<span class=\"token alternation keyword\">|</span><span class=\"token anchor function\">^</span>bar</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">um</span></span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>このパターンでは <code>foo</code> に <code>\\A</code> がついています。したがって入力の最初が <code>foo</code> の文字列にマッチします。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">re<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nre<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<p>しかし入力の最初ではなく行頭が <code>foo</code> の文字列にはマッチしません。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">re<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nfoo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n</code></pre></div>\n<p><code>bar</code> には <code>^</code> がついています。パターン全体で <code>m</code> フラグが有効になっているので、入力の先頭と行頭が <code>bar</code> の文字列にマッチします。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">re<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nre<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bar\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nre<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nbar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<h2>For Stage 1</h2>\n<h2>Updates</h2>\n<p>ステージの移動はないものの、アップデートがあった提案です。</p>\n<h3><a href=\"https://github.com/tc39/proposal-temporal\">Temporal</a></h3>\n<p>いくつかの仕様上の軽微な修正がありました。修正箇所について説明した<a href=\"https://ptomato.name/talks/tc39-2021-12/#1\">スライド</a>が公開されています。</p>\n<h3><a href=\"https://github.com/tc39/proposal-decimal\">Decimal</a></h3>\n<p>Decimal は現在 Stage 1 ですが、2022 年に Stage 2 に到達することを目指しているそうです。進捗を共有するための<a href=\"https://drive.google.com/file/d/1qdieei11dZgDY_KnJhSBcFyHTMZOmCJr/view\">スライド</a>が公開されています。</p>\n<h3><a href=\"https://github.com/tc39/proposal-destructuring-private\">Destructuring Private Fields</a></h3>\n<p>Destructuring Private Fields が提案された当初は小さな修正で十分だと考えられていました。しかし真剣に検討してみるといくつかの仕様上の難しい問題が明らかになったそうです。そこで再度レビュワーを募りレビューをやり直すことが決定しました。</p>\n<h3><a href=\"https://github.com/tc39/proposal-shadowrealm\">Shadow Realms</a></h3>\n<p>いくつかの仕様上の重要な変更があったようです。詳しくは<a href=\"https://docs.google.com/presentation/d/12PM5c4_yUnqXHjvACh8HEN5oJwgei-0T0hX_hlqjfDU/edit#slide=id.ge435a9058a_0_0\">スライド</a>に記載されています。</p>\n<h3><a href=\"https://github.com/tc39/proposal-record-tuple/\">Records and Tuples</a></h3>\n<p>Record と Tuple の中で通常のオブジェクトを扱う方法について議論されました。その方法とその懸念についての Decision Tree が<a href=\"https://drive.google.com/file/d/1lVYn8_sHecqxW08vN5Tu7rXZn7GemBqO/view\">スライド</a>として公開されています。</p>\n<h2>Normative Changes</h2>\n<h3><a href=\"https://github.com/tc39/ecma262/pull/2106\"><code>import.meta[Symbol.toStringTag]</code> の追加</a></h3>\n<p><strong>合意は得られませんでした</strong></p>\n<p><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag\"><code>Symbol.toStringTag</code></a> という Well-known Symbol があります。\nこの Symbol は <code>Object.prototype.toString()</code> によって表示される文字列の決定に使われます。</p>\n<p>具体的な例を示します。</p>\n<p>オブジェクト <code>foo</code> の <code>[Symbol.toStringTag]</code> に <code>\"I'm foo\"</code> という文字列をセットしておくと、<code>foo.toString()</code> は <code>[object I'm foo]</code> になります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token known-class-name class-name\">Symbol</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">toStringTag</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token string\">\"I'm foo\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"[object I'm foo]\"</span>\n</code></pre></div>\n<p>今回のミーティングでは <code>import.meta</code> の <code>[Symbol.toStringTag]</code> に <code>\"ImportMeta\"</code> という文字列を設定するという修正について議論されました。</p>\n<p>この挙動についての Issue は <code>import.meta</code> の策定時にも存在しましたが、そのときすでに <code>import.meta</code> が Stage 4 を達成していたことからクローズされました。</p>\n<p>そして今回のミーティングでもこの仕様の修正についての合意は得られませんでした。この修正のための Pull Request が作成された時点で以下のような懸念が公開されていました。</p>\n<ul>\n<li><code>import.meta</code> は、ECMAScript の範囲では <a href=\"https://tc39.es/ecma262/#sec-hostgetimportmetaproperties\"><code>HostGetImportMetaProperties</code></a> というホスト定義の abstract operation によって中身が決定されるオブジェクトであるということしか決まっておらず、ホストにとって必要であればホスト側で <code>import.meta</code> の <code>Symbol.toStringTag</code> を定義できる。</li>\n<li>仕様内で作成される他のオブジェクトとは異なり、<code>import.meta</code> はホストのデータによって生成されるものであり、ECMAScript の範囲でプロパティを生成することを考慮したものではない。</li>\n</ul>\n<h2>参考リンク</h2>\n<ul>\n<li>TC39\n<ul>\n<li><a href=\"https://github.com/tc39/agendas/blob/main/2021/12.md\">Agenda for the 87th meeting of Ecma TC39</a></li>\n<li><a href=\"https://github.com/tc39/ecma262/pull/2106\">Normative: Add import.meta[Symbol.toStringTag]</a></li>\n<li><a href=\"https://github.com/tc39/proposal-array-grouping\">Proposal Array Grouping</a></li>\n<li><a href=\"https://github.com/tc39/proposal-shadowrealm\">Proposal Shadow Realms</a></li>\n<li><a href=\"https://github.com/tc39/proposal-array-from-async/\">Proposal <code>Array.fromAsync</code></a></li>\n<li><a href=\"https://github.com/rbuckton/proposal-regexp-features\">Proposal RegExp Language Features</a></li>\n<li><a href=\"https://github.com/tc39/proposal-regexp-r-escape\">Proposal RegExp <code>\\R</code> escape</a></li>\n<li><a href=\"https://github.com/tc39/proposal-regexp-set-notation\">Proposal RegExp Set Notation</a></li>\n<li><a href=\"https://github.com/tc39/proposal-regexp-buffer-boundaries\">Proposal RegExp Buffer Boundaries</a></li>\n<li><a href=\"https://github.com/tc39/proposal-regexp-modifiers\">Proposal RegExp Modifiers</a></li>\n<li><a href=\"https://github.com/tc39/proposal-temporal\">Proposal Temporal</a></li>\n<li><a href=\"https://github.com/tc39/proposal-shadowrealm\">Proposal Shadow Realms</a></li>\n<li><a href=\"https://github.com/tc39/proposal-record-tuple/\">Proposal Records and Tuples</a></li>\n<li><a href=\"https://github.com/tc39/proposal-destructuring-private\">Proposal Destructuring Private Fields</a></li>\n</ul>\n</li>\n<li>Babel\n<ul>\n<li><a href=\"https://github.com/babel/proposals/issues/78\">Dec 2021 · Issue #78 · babel/proposals</a></li>\n</ul>\n</li>\n<li>ECMA262\n<ul>\n<li><a href=\"https://tc39.es/ecma262/#prod-ImportMeta\"><code>import.meta</code></a></li>\n<li><a href=\"https://tc39.es/ecma262/#sec-hostgetimportmetaproperties\"><code>HostGetImportMetaProperties</code></a></li>\n</ul>\n</li>\n</ul>\n","metaData":{"title":"ECMAScriptの最新動向 2021年12月版","author":"sosukesuzuki","createdAt":"2022-01-24","summary":"2021年12月14日~15日に開催された TC39 meeting 87th の内容を紹介します","tags":["TC39","ECMAScript"],"updatedAt":"2022-01-24"}},{"slug":"tc39-meeting-2021-10","content":"<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">※ 旧タイトル: TC39 meeting 86th の概要とステージの移動</code></pre></div>\n<p>TC39 の 86 回目のミーティングが 10/25 ~ 10/28 に開催されました。\nこのミーティングで議題に上がった提案と、そのステージの移動について紹介します。</p>\n<ul>\n<li><a href=\"https://github.com/tc39/agendas/blob/master/2021/10.md\">agendas/10.md at master · tc39/agendas</a></li>\n<li><a href=\"https://github.com/babel/proposals/issues/77\">Oct 2021 · Issue #77 · babel/proposals</a></li>\n</ul>\n<h2>for Stage 4</h2>\n<h3><a href=\"https://github.com/tc39/proposal-error-cause\">Error Cause</a></h3>\n<p><strong>Stage 4 になりました。ECMAScript 2022 に入ります</strong></p>\n<p>Error Cause は、<code>Error</code> コンストラクタの第 2 引数に <code>cause</code> という値で原因となったエラーを渡すことができるようにする提案です。\nキャッチする側では、<code>error.cause</code> で、そのエラーを取得できます。</p>\n<p>例を示します。</p>\n<p><code>doUploadJob</code> 関数は <code>fetch</code> を実行して失敗したときに新しいエラーをスローします。そのエラーの第 2 引数に <code>{ cause: err }</code> というオブジェクトを渡しています。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">doUploadJob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://example.com/upload\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Upload job result failed\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">cause</span><span class=\"token operator\">:</span> err <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">doJob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Caused by\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span><span class=\"token property-access\">cause</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Error: Upload job result failed</span>\n<span class=\"token comment\">// Caused by TypeError: Failed to fetch</span>\n</code></pre></div>\n<p><code>doUploadJob</code> がスローしているエラーメッセージは <code>\"Upload job result failed\"</code> ですが、その原因となったエラーを <code>cause</code> として渡すことで、キャッチする側でどのエラーが原因で失敗したのかを取得できます。</p>\n<p>この例では、<code>doUploadJob</code> が失敗した原因が <code>TypeError: Failed to fetch</code> であったことがわかります。</p>\n<h2>for Stage 3</h2>\n<p>今回は、for Stage 3 の提案はありませんでした。</p>\n<h2>for Stage 2</h2>\n<h3><a href=\"https://github.com/tc39/proposal-array-grouping\">Array Grouping</a></h3>\n<p><strong>Stage 2 になりました</strong></p>\n<p>Array Grouping は、<code>Array</code> に <code>groupBy</code> というインスタンスメソッドを追加する提案です。</p>\n<p>ユースケースは<a href=\"https://lodash.com/docs/4.17.15#groupBy\">Lodash の <code>groupBy</code></a> と同様です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narray<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">groupBy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"even\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"odd\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// =>  { odd: [1, 3, 5], even: [2, 4] }</span>\n</code></pre></div>\n<h3><a href=\"https://github.com/tc39/proposal-partial-application\">Partial Application</a></h3>\n<p><strong>Stage 2 になりませんでした</strong></p>\n<p>Partial Application は、関数の部分適用のための構文を導入します。</p>\n<p>例を示します。</p>\n<p><code>add</code> は 2 つの引数を受け取り、その 2 つを足し合わせて返すだけの単純な関数です。\nそして、Partial Application を使って <code>addOne</code> という新しい関数を作っています。<code>addOne</code> は、1 つの引数を受け取り、それに<code>1</code>を足して返す関数です。\nつまり、既存の関数の一部の引数だけ渡して、残りの引数を受け取るような関数を作ることができます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> addOne <span class=\"token operator\">=</span> add<span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">addOne</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n</code></pre></div>\n<p>現在の JavaScript で表現すると、次のようになります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">y</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> addOne <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">addOne</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n</code></pre></div>\n<p>Haskell のような関数型プログラミング言語では標準で備わっている機能です。</p>\n<h2>for Stage 1</h2>\n<h3><a href=\"https://github.com/bathos/proposal-string-cooked\"><code>String.cooked</code></a></h3>\n<p><strong>Stage 1 になりました</strong></p>\n<p><code>String.cooked</code> は <code>String</code> に新しいスタティックメソッド <code>cooked</code> を追加する提案です。\n<code>String.cooked</code> は <a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/String/raw\"><code>String.raw</code></a> と逆のことをします。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">raw</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">mmm ... \\u0064elicious cooked string</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// mmm ... \\u0064elicious cooked string</span>\n<span class=\"token known-class-name class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">cooked</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">mmm ... \\u0064elicious cooked string</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// \"mmm ... delicious cooked string\"</span>\n</code></pre></div>\n<p>つまり、通常のテンプレートリテラルとおなじ挙動です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">mmm ... \\u0064elicious cooked string</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// \"mmm ... delicious cooked string\"</span>\n</code></pre></div>\n<p>この機能がタグ付きテンプレートリテラルとして存在することで、これを用いて新しいタグ付きテンプレートリテラルを作るときに役にたちます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">myTag</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">strings<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>values</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">cooked</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>values<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token arrow operator\">=></span> <span class=\"token known-class-name class-name\">String</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nmyTag<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token string\">'world'</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token comment\">// \"hello WORLD\"</span>\n</code></pre></div>\n<h3><a href=\"https://github.com/jridgewell/proposal-destructuring-private\">Destructure Private Fields</a></h3>\n<p><strong>Stage 1 を飛ばして、Stage 2 になりました</strong></p>\n<p>Destructure Private Fields は、プライベートフィールドの分割代入のための構文を導入します。</p>\n<p><code>#</code> からはじまる識別子は通常であれば存在できないので、別の名前にリネームする必要があります。次の例では <code>this.#x</code> を <code>x</code> という名前にリネームしています。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n  #x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">#x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 1</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> #x<span class=\"token operator\">:</span> x <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 1</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3><a href=\"https://github.com/js-choi/proposal-bind-this\">Bind-this operator</a></h3>\n<p><strong>Stage 1 になりました</strong></p>\n<p>Bind this operator は、<a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\">Function.prototype.bind</a> と同様の方法で関数をバインドするための二項演算子を導入する提案です。</p>\n<p>以前から存在する Stage 0 の <a href=\"https://github.com/tc39/proposal-bind-operator\">Bind Operator</a> の後継であり、Stage 1 の <a href=\"https://github.com/tc39/proposal-extensions\">Extensions</a> の競合です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">hasOwnProperty</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token string\">\"foo\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token string\">\"foo\"</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<h3><a href=\"https://github.com/js-choi/proposal-function-helpers\">Function helpers</a></h3>\n<p><strong>Stage 1 になりませんでした。この提案に含まれる関数は個別の提案として再度提出されるかもしれません。</strong></p>\n<p>Function helpers は、<code>Function</code> のスタティックメソッドとして便利なヘルパー関数を追加する提案です。</p>\n<p><code>Function.flow</code> は引数に与えられた関数を合成した新しい関数を返します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> f <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Function</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">flow</span><span class=\"token punctuation\">(</span>f0<span class=\"token punctuation\">,</span> f1<span class=\"token punctuation\">,</span> f2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// f2(f1(f0(5, 7))).</span>\n</code></pre></div>\n<p><code>Function.pipe</code> は第 1 引数の値を、それ移行の引数として渡された関数を合成した関数に渡した結果を返します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Function</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> f0<span class=\"token punctuation\">,</span> f1<span class=\"token punctuation\">,</span> f2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// f2(f1(f0(5))).</span>\n</code></pre></div>\n<p><code>Function.constant</code> は、第 1 引数として渡された値を返し続ける関数を返します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> f <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Function</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">constant</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fooo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">3009</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token string\">\"foo\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n</code></pre></div>\n<p><code>Function.identifiy</code> は、第 1 引数に与えられた値をそのまま返します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Function</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">identity</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n<span class=\"token known-class-name class-name\">Function</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">identity</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\n</code></pre></div>\n<p><code>Function.tap</code> はコールバック関数を引数として受け取り、関数を返します。\n<code>Function.tape</code> が返した関数に引数を渡すと、それをコールバック関数に渡して実行し、その上でその引数をそのまま返します。\n言葉で説明すると難しいですが、例を見れば簡単だと思います。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> f <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Function</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">tap</span><span class=\"token punctuation\">(</span><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">log</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5 を出力して、5 を返す</span>\n</code></pre></div>\n<h3><a href=\"https://github.com/lucacasonato/proposal-evaluator-attributes\">Evaluator Attributes</a></h3>\n<p><strong>Stage 1 になりました</strong></p>\n<p>Evaluator Attributes は、インポートされたモジュールの評価方法を処理系に伝えるための構文を導入します。</p>\n<p>例にある通り、提案された目的は WebAssembly のモジュールを JavaScript の Import 文で読み込むためです。しかし、提案の仕様としては WebAssembly には限られていません。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">mod</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./foo.wasm\"</span> <span class=\"token keyword module\">as</span> <span class=\"token string\">\"wasm-module\"</span><span class=\"token punctuation\">;</span>\nmod <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">WebAssembly<span class=\"token punctuation\">.</span>Module</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<p>現在 Stage 3 の <a href=\"https://github.com/tc39/proposal-import-assertions\">Import Assertions</a> に似ていますが、Import Assertions はモジュールの評価方法に影響を与えることはできません。</p>\n<h3>RegExp Features</h3>\n<p>前回のミーティングで提案された<a href=\"https://github.com/rbuckton/proposal-regexp-features\">RegExp Features</a>が機能ごとに別々の提案に分割されました。</p>\n<h4><a href=\"https://github.com/rbuckton/proposal-regexp-modifiers\">RegExp Modifiers</a></h4>\n<p><strong>Stage 1 になりました</strong></p>\n<h4><a href=\"https://github.com/rbuckton/proposal-regexp-x-mode\">RegExp Extended Mode and Comments</a></h4>\n<p><strong>Stage 1 になりました</strong></p>\n<h4><a href=\"https://github.com/rbuckton/proposal-regexp-atomic-operators\">RegExp Atomic Operators</a></h4>\n<p><strong>Stage 1 になりませんでした</strong></p>\n<h4><a href=\"https://github.com/rbuckton/proposal-regexp-r-escape\">RegExp <code>\\R</code> Escape</a></h4>\n<p><strong>Stage 1 になりました</strong></p>\n<h4><a href=\"https://github.com/rbuckton/proposal-regexp-buffer-boundaries\">RegExp Buffer Boundaries</a></h4>\n<p><strong>Stage 1 になりました</strong></p>\n<h3>Updates</h3>\n<p>ステージの移動はないものの、アップデートがあった提案です。</p>\n<ul>\n<li><a href=\"https://github.com/tc39/proposal-change-array-by-copy\">Change Array by Copy</a></li>\n<li><a href=\"https://github.com/tc39/proposal-json-parse-with-source\">JSON.parse sourct text access</a></li>\n<li><a href=\"https://github.com/tc39/proposal-record-tuple/\">Records &#x26; Tuples</a></li>\n<li><a href=\"https://github.com/tc39/proposal-explicit-resource-management\">Explicit Resource Management</a></li>\n<li><a href=\"https://github.com/tc39/proposal-js-module-blocks\">JS Module Blocks</a></li>\n<li><a href=\"https://github.com/js-choi/proposal-array-from-async\">Array.fromAsync</a></li>\n</ul>\n<h2>その他</h2>\n<p>提案ではなく、仕様書の変更として扱われているものです。</p>\n<h3><a href=\"https://github.com/tc39/ecma262/pull/1321\">Extending null</a></h3>\n<p><strong>合意は得られませんでした</strong></p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">null</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</code></pre></div>\n","metaData":{"title":"ECMAScriptの最新動向 2021年11月版","author":"sosukesuzuki","editor":"nakajmg","createdAt":"2021-11-02","summary":"2021年10月25日~28日に開催された TC39 meeting 86th の内容を紹介します","tags":["TC39","ECMAScript"],"updatedAt":"2021-11-02"}}],"tag":"TC39"},"__N_SSG":true}
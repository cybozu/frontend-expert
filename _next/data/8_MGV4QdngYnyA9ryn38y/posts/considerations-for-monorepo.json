{"pageProps":{"post":{"slug":"considerations-for-monorepo","content":"<p>それっぽいタイトルを付けましたが特に意味はないです。</p>\n<p><a href=\"https://cybozu.github.io/frontend-expert/posts/turborepo\">workspace を使ったコマンドを最適化して実行する Turborepo について</a>のお話で Turborepo を軽く触ってみた際に<code>npx create-turbo@latest</code>で作られる構成がとてもわかりやすく、プロダクトの初期段階からモノレポを採用するのは選択肢の 1 つとしていいのでは、と思い続編を書きました。</p>\n<p>前回と同じくサンプルのリポジトリはこちらになります。<br>\n<a href=\"https://github.com/nus3/p-turborepo/tree/main/yarn\">https://github.com/nus3/p-turborepo/tree/main/yarn</a></p>\n<h2>概要</h2>\n<ul>\n<li>モノレポを採用することで、同一リポジトリ内で自作した汎用的なライブラリやコンポーネントを複数のアプリケーションで使いまわせる</li>\n<li>モノレポの規模が大きくなってきた場合には、モノレポ内のパッケージを npm に公開することでアプリケーションとパッケージを非同期に開発できる</li>\n<li>Yarn や npm の workspace はイイゾ！</li>\n</ul>\n<h2>モノレポとは</h2>\n<p>モノレポとは本記事では npm や Yarn の workspaces 機能を使い、1 つのリポジトリ内で複数の npm パッケージを管理している構成のこととします。</p>\n<h3>npm や Yarn の workspaces</h3>\n<p>npm や Yarn の workspaces は 1 つのリポジトリ内で複数の npm パッケージを管理するための機能です。</p>\n<ul>\n<li><a href=\"https://classic.yarnpkg.com/lang/en/docs/workspaces/\">Yarn(v1)</a></li>\n<li><a href=\"https://yarnpkg.com/features/workspaces\">Yarn(v2 以降)</a></li>\n<li><a href=\"https://docs.npmjs.com/cli/v8/using-npm/workspaces\">npm</a></li>\n</ul>\n<p>workspaces を使うにはリポジトリのルート直下にある<code>package.json</code>に<code>workspaces</code>を追加します。</p>\n<p>例えば<code>apps</code>配下にアプリケーションの npm パッケージを、<code>packages</code>配下に汎用的なコンポーネント、ライブラリなどの npm パッケージを入れる場合、次のようになります。</p>\n<div><pre><code><span>{</span>\n  <span>\"workspaces\"</span><span>:</span> <span>[</span><span>\"apps/*\"</span><span>,</span> <span>\"packages/*\"</span><span>]</span>\n<span>}</span>\n</code></pre></div>\n<p><code>apps</code> 配下にある<code>nus3-a</code>というアプリケーションから <code>packages</code> 配下にある<code>nus3-ui</code>という名前の npm パッケージを使う場合、それぞれ次のような<code>package.json</code>になります。</p>\n<p><code>apps/nus3-a</code></p>\n<div><pre><code><span>{</span>\n  <span>\"name\"</span><span>:</span> <span>\"nus3-a\"</span><span>,</span>\n  <span>\"version\"</span><span>:</span> <span>\"0.0.0\"</span><span>,</span>\n  <span>\"dependencies\"</span><span>:</span> <span>{</span>\n    <span>\"nus3-ui\"</span><span>:</span> <span>\"*\"</span>\n    <span>// Yarnのv2以降であれば`workspace:`構文が使えるようになる</span>\n    <span>// REF: (nus3) https://yarnpkg.com/features/workspaces#workspace-ranges-workspace</span>\n    <span>// \"nus3-ui\": \"workspace:*\"</span>\n  <span>}</span>\n<span>}</span>\n</code></pre></div>\n<p><code>packages/nus3-ui</code></p>\n<div><pre><code><span>{</span>\n  <span>\"name\"</span><span>:</span> <span>\"nus3-ui\"</span><span>,</span>\n  <span>\"version\"</span><span>:</span> <span>\"0.0.0\"</span>\n<span>}</span>\n</code></pre></div>\n<p>workspaces 内にある npm パッケージの名前が npm に公開されているパッケージ名と同じ場合は、 workspace 内の npm パッケージが優先してインストールされます。後々 workspaces 内の npm パッケージを公開する可能性がある場合、パッケージ名は npm で公開されているパッケージ名と被らない名前にした方が良いかもしれません。</p>\n<p>workspace 内の npm パッケージを依存関係に追加すると node_modules にシンボリックリンクが作成されます。次の画像のように node_modules 配下に<code>nus3-ui</code>と<code>nus3-a</code>のシンボリックリンクが追加されていることが確認できます。</p>\n<p></p>\n<p>シンボリックリンクにより依存する npm パッケージのコードを直接参照するので、npm に公開しバージョン管理するまでは、version は<code>0.0.0</code>、かつ、使う側は<code>\"nus3-ui\": \"*\"</code>のようにワイルドカードを指定するとバージョンのことを意識せずに管理できます。</p>\n<h3>create-turbo で作られるモノレポ構成</h3>\n<p>create-turbo(<code>npx create-turbo@latest</code>) では作られるモノレポ構成に次のようなものが含まれます。</p>\n<ul>\n<li>npm に公開せずに config をモノレポ内の別パッケージに分けて、複数のパッケージから使用する</li>\n<li>React を使った汎用的なコンポーネント(tsx)を別パッケージに分けて アプリケーション(Next.js)で使用する</li>\n</ul>\n<p>それぞれ見ていきましょう。</p>\n<h4>npm に公開せずに config をモノレポ内の別パッケージに分けて、複数のパッケージから使用する</h4>\n<p>ESLint や Stylelint の config は npm に公開することで、異なるプロジェクトで共通の設定を使えます。サイボウズでは<a href=\"https://github.com/cybozu/eslint-config\">@cybozu/eslint-config</a>や<a href=\"https://github.com/cybozu/stylelint-config\">@cybozu/stylelint-config</a>として npm に公開しています。</p>\n<p>モノレポ内であれば ESLint や Stylelint の設定を npm に公開・管理せずに共有することもできます。</p>\n<p><code>packages/nus3-config</code><br>\nで共通の ESLint や TSConfig を定義して、<code>package.json</code> の<code>files</code> に指定します。</p>\n<div><pre><code><span>{</span>\n  <span>\"name\"</span><span>:</span> <span>\"nus3-config\"</span><span>,</span>\n  <span>\"version\"</span><span>:</span> <span>\"0.0.0\"</span><span>,</span>\n  <span>\"files\"</span><span>:</span> <span>[</span>\n    <span>\"eslint-preset.js\"</span><span>,</span>\n    <span>\"tsconfig.base.json\"</span><span>,</span>\n    <span>\"tsconfig.nextjs.json\"</span><span>,</span>\n    <span>\"tsconfig.react-library.json\"</span>\n  <span>]</span>\n<span>}</span>\n</code></pre></div>\n<p><code>apps/nus3-a</code>\nで<code>nus3-config</code>を追加し、<code>nus3-config</code>から TSConfig や ESLint のルールを適用します。</p>\n<div><pre><code><span>{</span>\n  <span>\"name\"</span><span>:</span> <span>\"nus3-a\"</span><span>,</span>\n  <span>\"version\"</span><span>:</span> <span>\"0.0.0\"</span><span>,</span>\n  <span>\"devDependencies\"</span><span>:</span> <span>{</span>\n    <span>\"eslint\"</span><span>:</span> <span>\"8.6.0\"</span><span>,</span>\n    <span>\"nus3-config\"</span><span>:</span> <span>\"*\"</span>\n  <span>}</span>\n<span>}</span>\n</code></pre></div>\n<p><code>apps/nus3-a/tsconfig.json</code></p>\n<div><pre><code><span>{</span>\n  <span>\"extends\"</span><span>:</span> <span>\"nus3-config/tsconfig.nextjs.json\"</span>\n<span>}</span>\n</code></pre></div>\n<p><code>apps/nus3-a/.eslintrc</code></p>\n<div><pre><code>module<span>.</span><span>exports</span> <span>=</span> <span>require</span><span>(</span><span>\"nus3-config/eslint-preset\"</span><span>)</span><span>;</span>\n</code></pre></div>\n<h4>React を使った汎用的なコンポーネント(tsx)を別パッケージに分けて アプリケーション(Next.js)で使用する</h4>\n<p>create-turbo では汎用的な React コンポーネントを tsx ファイルのまま <code>packages</code> 配下の npm パッケージで管理し、Next.js の<a href=\"https://github.com/martpie/next-transpile-modules\">plugin</a>を使って アプリケーション 側でトランスパイルしています。</p>\n<p><code>packages/nus3-ui</code><br>\nで React(tsx)のコンポーネントを実装します。実装した tsx ファイルのパスをそのまま<code>main</code>と<code>types</code>に追加します。</p>\n<div><pre><code><span>{</span>\n  <span>\"name\"</span><span>:</span> <span>\"nus3-ui\"</span><span>,</span>\n  <span>\"version\"</span><span>:</span> <span>\"0.0.0\"</span><span>,</span>\n  <span>\"main\"</span><span>:</span> <span>\"./index.tsx\"</span><span>,</span>\n  <span>\"types\"</span><span>:</span> <span>\"./index.tsx\"</span><span>,</span>\n  <span>\"devDependencies\"</span><span>:</span> <span>{</span>\n    <span>\"@types/react\"</span><span>:</span> <span>\"17.0.37\"</span><span>,</span>\n    <span>\"@types/react-dom\"</span><span>:</span> <span>\"17.0.11\"</span><span>,</span>\n    <span>\"typescript\"</span><span>:</span> <span>\"4.5.4\"</span>\n  <span>}</span>\n<span>}</span>\n</code></pre></div>\n<p><code>packages/nus3-ui/index.tsx</code></p>\n<div><pre><code><span>import</span> <span>{</span> <span>VFC</span> <span>}</span> <span>from</span> <span>\"react\"</span><span>;</span>\n\n<span>export</span> <span>const</span> <span>Button</span><span>:</span> <span>VFC</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n  <span>return</span> <span><span><span>&#x3C;</span>button</span><span>></span></span><span>ボタン</span><span><span><span>&#x3C;/</span>button</span><span>></span></span><span>;</span>\n<span>}</span><span>;</span>\n</code></pre></div>\n<p><code>apps/nus3-a</code><br>\n<code>nus3-ui</code>の tsx ファイルを<code>nus3-a</code>で<code>next-transpile-modules</code>を使ってトランスパイルします。</p>\n<div><pre><code><span>{</span>\n  <span>\"name\"</span><span>:</span> <span>\"nus3-a\"</span><span>,</span>\n  <span>\"version\"</span><span>:</span> <span>\"0.0.0\"</span><span>,</span>\n  <span>\"devDependencies\"</span><span>:</span> <span>{</span>\n    <span>\"next-transpile-modules\"</span><span>:</span> <span>\"9.0.0\"</span>\n  <span>}</span>\n<span>}</span>\n</code></pre></div>\n<p><code>apps/nus3-a/next.config.js</code></p>\n<div><pre><code><span>const</span> withTM <span>=</span> <span>require</span><span>(</span><span>\"next-transpile-modules\"</span><span>)</span><span>(</span><span>[</span><span>\"nus3-ui\"</span><span>]</span><span>)</span><span>;</span>\nmodule<span>.</span><span>exports</span> <span>=</span> <span>withTM</span><span>(</span><span>{</span><span>}</span><span>)</span><span>;</span>\n</code></pre></div>\n<h2>フロントエンドのモノレポ戦略</h2>\n<p>筆者のこれまでの経験では、創業して間もない会社やプロダクトの初期フェーズで、複数のアプリケーションの開発が並列して始まることが多くありました。そういった状況では、モノレポを採用しておくと複数のアプリケーションで共通したコンポーネントやライブラリを少ないコストで使用できます。</p>\n<p>また、モノレポ内で共通して使っているパッケージに変更を加える際に、その影響範囲が把握できないくらいモノレポの規模が大きくなった場合には、パッケージを npm に公開してバージョン管理することで、バージョンの変更タイミングを各々のアプリケーションに任せることができ、アプリケーションとパッケージの開発を非同期に行うことができます。</p>\n<p>このように、初期段階では汎用的な npm パッケージをアセットとして複数のアプリケーションに提供することで開発スピードを上げられ、また、規模が大きくなってきた場合はパッケージを npm に公開するといった方針をとることもできます。</p>\n<p>もちろん、1 つのリポジトリですべてのパッケージを管理することやコードベースが大きく複雑になることなどデメリットもあり、モノレポを採用することが適切ではない場合もあります。メリット・デメリットを踏まえつつ、フロントエンドの技術選定の中にモノレポの採用を選択肢の 1 つとして入れてもいいかもしれません。</p>\n","metaData":{"title":"フロントエンドのモノレポ構成はスケーリングの夢を見るか","author":"nus3","editor":["nakajmg"],"createdAt":"2022-01-31","summary":"Turborepoのstarterでできるモノレポ構成からスケーリングするフロントエンドの構成について考える","tags":["Monorepo","Turborepo"],"updatedAt":"2022-01-31"}}},"__N_SSG":true}
{"pageProps":{"posts":[{"type":"zenn","slug":"__zenn-ecmascript-trim","href":"https://zenn.dev/cybozu_frontend/articles/ecmascript-trim","metaData":{"title":"✂️ String.prototype.trim() は何をトリムするのか？","author":"mugi","createdAt":"2022-10-28","tags":["zenn"]}},{"type":"markdown","href":"/posts/vite-3.0","slug":"vite-3.0","content":"<p>2022/7/13に、フロントエンドツールである Vite のバージョン 3.0 がリリースされました 🎉</p>\n<ul>\n<li><a href=\"https://vitejs.dev/blog/announcing-vite3.html\">Vite 3.0 is out! | Vite</a></li>\n<li><a href=\"https://github.com/vitejs/vite/blob/v3.0.0/packages/vite/CHANGELOG.md\">CHANGELOG</a></li>\n<li><a href=\"https://vitejs.dev/guide/migration.html\">Migration from v2 | Vite</a></li>\n</ul>\n<p>このエントリーでは、リリース時に公開されたアナウンス(<a href=\"https://github.com/vitejs/vite/releases/tag/v3.0.0\">Release v3.0.0 · vitejs/vite</a>)の内容をベースに、変更点を改めて１つずつ掘り下げて確認してみます。</p>\n<h3>New Documentation</h3>\n<p>公式ドキュメント(<a href=\"https://ja.vitejs.dev/\">vitejs.dev</a>)が <a href=\"https://vitepress.vuejs.org/\">VitePress</a> のデフォルトテーマを利用した形で刷新されました。ダークテーマ表示などが可能になっています。</p>\n<p>また、あわせて次のサブドメインでもドキュメントを閲覧できるようになっています。</p>\n<ul>\n<li><a href=\"https://v2.vitejs.dev/\">v2.vitejs.dev</a> - Vite 2.x 系のドキュメント</li>\n<li><a href=\"https://main.vitejs.dev/\">main.vitejs.dev</a> - Vite のメインブランチの内容</li>\n</ul>\n<h3>Create Vite Starter Templates</h3>\n<p>Vite プロジェクトの Scaffold ジェネレータである <a href=\"https://github.com/vitejs/vite/tree/main/packages/create-vite\"><code>create-vite</code></a> について、Vite 3.x が利用されるようになりました。</p>\n<h3>Dev Improvements</h3>\n<h4>Vite CLI</h4>\n<p>デフォルトの開発サーバーポートが <code>5173</code>、プレビューサーバーのポートが <code>4173</code> に変更されました。デフォルトポートは以前は <code>3000</code> と <code>5000</code> でしたが、MacOS でポートの衝突が発生するなどの<a href=\"https://github.com/vitejs/vite/issues/5707\">問題があった</a>ようです。</p>\n<p>ちなみになぜ <code>5173</code> という中途半端な数字なのだろう？と思い調べてみましたが、以下の Issue コメントを見つけました。</p>\n<p><a href=\"https://github.com/vitejs/vite/pull/6330#issuecomment-1003405068\">https://github.com/vitejs/vite/pull/6330#issuecomment-1003405068</a></p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">At a team meeting we thought about 5173\nLike 5173 in leet for Vite | V I T Ǝ | V === Roman 5</code></pre></div>\n<ul>\n<li>V … 5</li>\n<li>I … 1</li>\n<li>T … 7</li>\n<li>Ǝ … 3</li>\n</ul>\n<p>らしいです。cool</p>\n<h4>Improved WebSocket Connection Strategy</h4>\n<p>Vite 2.x までは、Proxy を経由したサーバー確立に課題があったとのことで、3.0 からはそれが改善されました。</p>\n<p><a href=\"https://github.com/sapphi-red/vite-setup-catalogue\"><code>vite-setup-catalogue</code></a> というセットアップのサンプルリポジトリ内にも追加されたことで、今後は同パターンは CI で検証されるようになったとのことです。</p>\n<h4>Cold Start Improvements</h4>\n<p>コールドスタート時に依存関係を後から解決する際に、依存の状態によってはフルリロードが発生する可能性があったのが、ブラウザに依存を渡すタイミングを調整することで効率化され、回避可能になったようです。</p>\n<p>詳細: <a href=\"https://github.com/vitejs/vite/pull/8869#issuecomment-1172902125\">https://github.com/vitejs/vite/pull/8869#issuecomment-1172902125</a></p>\n<h4>import.meta.glob</h4>\n<p>Vite では以前から <a href=\"https://vitejs.dev/guide/features.html#glob-import\"><code>Glob Import</code></a> と呼ばれる機能が存在し、特別な関数 <code>import.meta.glob</code> を介して glob 形式で記述してのモジュール一括インポートが可能です。</p>\n<p>Vite 3.0 では機能が強化され、より柔軟な指定が可能になりました。</p>\n<ul>\n<li>Multiple Patterns : 複数の glob パターンの記述</li>\n<li>Negative Patterns : 除外パターンの記述</li>\n<li>Named Imports : モジュールの一部のみを指定可能</li>\n<li>Custom Queries : クエリの付与</li>\n<li>Eager Imports : Dynamic import の回避</li>\n</ul>\n<h4>Aligning WASM Import with Future Standards</h4>\n<p>Vite 2.x から WebAssembly を</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">init</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./example.wasm'</span>\n</code></pre></div>\n<p>の形で import できましたが、将来的に ESM の仕様として WebAssembly が統合された場合のバッティングを考慮し、</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">init</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./example.wasm?init'</span>\n</code></pre></div>\n<p>と、<code>?init</code> オプションが付与された場合に Vite 2.x 以前と同様の挙動になるよう変更されました。</p>\n<p>現状で <code>?init</code> オプションを付与せずに ESM として処理する場合には <a href=\"https://github.com/Menci/vite-plugin-wasm\"><code>vite-plugin-wasm</code></a>のようなプラグインの利用が必須となります。</p>\n<h3>Build Improvements</h3>\n<h4>ESM SSR Build by Default</h4>\n<p>SSR 用フレームワークの大半が ESM ビルドを利用するようになったため、\nVite3 では SSR ビルドのデフォルト形式が ESM に変更されました。</p>\n<p>Vite では、モジュールの形式(CommonJS/ESM)などに応じて、適宜 Vite の変換から切り離す（外部化する）ことで SSR 時の処理を効率化しています。</p>\n<p>参考: <a href=\"https://v2.vitejs.dev/guide/ssr.html#ssr-externals\">https://v2.vitejs.dev/guide/ssr.html#ssr-externals</a></p>\n<p>ESM がデフォルトになったことで、デフォルトで外部化される依存が増え、より効率的に SSR ビルドが可能になるようです。</p>\n<p>なお、ESM になると困るケースのために <code>legacy.buildSsrCjsExternalHeuristics: true</code> というオプションも用意されているようです。</p>\n<h4>Improved Relative Base Support</h4>\n<p><code>base</code> に <code>''</code> を指定することで、相対的なベースパスの指定ができるようになりました。\nビルドの段階でベースパスが不明なケースなどで役に立つようです。</p>\n<h3>Experimental Features</h3>\n<h4>Built Asset Paths fine-grained Control (Experimental)</h4>\n<p><code>experimental.renderBuiltUrl</code> オプションが Experimental 機能として導入されました。</p>\n<p>CDN での配布などを前提とした場合、ビルドによって生成されたアセットのうち一部のみ URL が異なるケースが考えられます。</p>\n<p><code>experimental.renderBuiltUrl</code> を指定することで、ファイル名・ファイルタイプなどを利用して URL を切り分けられるようになります。</p>\n<p>※公式ドキュメントよりコードを抜粋\n<a href=\"https://vitejs.dev/guide/build.html#advanced-base-options\">https://vitejs.dev/guide/build.html#advanced-base-options</a></p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\">experimental<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">renderBuiltUrl</span><span class=\"token punctuation\">(</span>filename<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> hostType<span class=\"token operator\">:</span> <span class=\"token string\">'js'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'css'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'html'</span><span class=\"token punctuation\">,</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'public'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'asset'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'public'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">'https://www.domain.com/'</span> <span class=\"token operator\">+</span> filename\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">extname</span><span class=\"token punctuation\">(</span>importer<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'.js'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> runtime<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">window.__assetsPath(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">'https://cdn.domain.com/assets/'</span> <span class=\"token operator\">+</span> filename\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h4>Esbuild Deps Optimization at Build Time (Experimental)</h4>\n<p><code>optimizeDeps.disabled: false</code> 指定が Experimental 機能として可能になりました。\n<a href=\"https://vitejs.dev/guide/migration.html#experimental\">https://vitejs.dev/guide/migration.html#experimental</a></p>\n<p>Vite はデフォルトでは開発時には esbuild を用い、ビルド時には Rollup を利用します。\n開発時とビルド時で異なるツールを利用するため、Vite を利用する際に考慮すべき大きい要素の一つとして挙げられます。</p>\n<p>参考: <a href=\"https://vitejs.dev/guide/why.html#why-not-bundle-with-esbuild\">Why Not Bundle with esbuild?</a></p>\n<p><code>optimizeDeps.disabled: false</code> を用いると、ビルド時にも esbuild を利用するようになります。</p>\n<p>CJS のみの依存関係も ESM に変換されるため、<code>@rollup/plugin-commonjs</code> プラグインが不要となります。</p>\n<h4>HMR Partial Accept (Experimental)</h4>\n<p><code>experimental.hmrPartialAccept</code> オプションが Experimental 機能として導入されました。</p>\n<p>Vite ではフレームワークやツールの作成者向けに HMR 用の API を公開しています。\n<a href=\"https://vitejs.dev/guide/api-hmr.html\">https://vitejs.dev/guide/api-hmr.html</a></p>\n<p>現状の HMR API の仕組みでは、HMR 可能なモジュールとそうでないモジュールが混在していたファイルの場合、\nモジュールを部分的に差し替えることができず、非効率な更新が発生する可能性があります。</p>\n<p>参考: <a href=\"https://github.com/vitejs/vite/discussions/7309\">HMR partial accept · Discussion #7309 · vitejs/vite</a></p>\n<p>新しい API である <code>import.meta.hot.acceptExports</code> と組み合わせることで、\nexport されているモジュールについてより詳細かつ効率的に HMR の制御が可能になります。</p>\n<h3>Bundle Size Reduction</h3>\n<p>Vite 自体のサイズが小さくなりました。30%ほど軽量化されたそうです。</p>\n<p>Minify 用の Terser がオプションになったことや、 <code>node-forge</code> が <code>vitejs/plugin-basic-ssl</code> というプラグインに置き換わったことに起因しているようです。</p>\n<h3>Compatibility Notes</h3>\n<ul>\n<li>Node.js のサポートバージョンが 14.18+ / 16+ になりました</li>\n<li>Vite 自体が ESM として公開されています。CJS経由で利用する場合は CJS Proxy 経由となります\n<ul>\n<li>参考: teppeis/<a href=\"https://zenn.dev/teppeis/articles/2022-07-npm-dual-pacakge-cjs-proxy\">Vite 3 が採用した CJS Proxy による Dual Package 構成</a></li>\n</ul>\n</li>\n<li>サポートブラウザの基準が <code>\"Native ESM\"</code> <code>\"Native ESM dynamic import\"</code> <code>\"import.meta\"</code> の機能をサポートしているブラウザになりました</li>\n<li>SSR および ライブラリモードにおいて、JS の拡張子はフォーマットやパッケージタイプに応じて適切な拡張子が選択されるようになりました</li>\n</ul>\n<p>ブラウザバージョンが変わった点は注意が必要になるかもしれません。\nMigration Guide によると、主要ブラウザでは次のバージョンがサポート対象になるようです。</p>\n<ul>\n<li>Chrome >=87</li>\n<li>Firefox >=78</li>\n<li>Safari >=13</li>\n<li>Edge >=88</li>\n</ul>\n<hr>\n<p>というわけで簡単な Vite 3.0 の内容のおさらいでした。</p>\n<p>Vite はもともと Native ESM を前提とした仕組みをフル活用していることもあってか、\n今回の変更点でも ESM を考慮した変更が多く入った印象を受けます。</p>\n<p>個人的には、まだ Experimental ではありますが <code>Esbuild Deps Optimization at Build Time</code> にある、\nビルド時にも esbuild を利用可能になる未来が楽しみです。</p>\n","metaData":{"title":"Vite 3.0 の内容をおさらいする","author":"mugi","createdAt":"2022-07-27","summary":"Vite 3.0 の内容をおさらいします","tags":["Vite"],"updatedAt":"2022-07-27"}},{"type":"markdown","href":"/posts/why-is-import-meta-url-a-string","slug":"why-is-import-meta-url-a-string","content":"<p>数多くの Node.js ライブラリの作者として知られる Sindre Sorhus 氏が次のようなツイートをしていた。</p>\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Why is `import.meta.url` a string and not a `URL` instance?</p>&mdash; Sindre Sorhus 💙💛 (@sindresorhus) <a href=\"https://twitter.com/sindresorhus/status/1551202763383644161?ref_src=twsrc%5Etfw\">July 24, 2022</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>これを見て私も理由が気になったので調査してみた。</p>\n<h2>先にまとめ</h2>\n<p>URL の仕様にそうすべきと書いてあるから。</p>\n<h2>普通に考えると？</h2>\n<p>まず最初に思いつくであろうものが「<code>import.meta.url</code>はECMAScriptの仕様だが、<code>URL</code>オブジェクトはHTMLの仕様に含まれるため、仕様間のそういった参照はできない」という理由である。</p>\n<p>実際 Twitter 上ではそのように考えている人もいた。</p>\n<p>しかし、それは誤りである。</p>\n<p><a href=\"https://tc39.es/ecma262/#sec-meta-properties-runtime-semantics-evaluation\">ECMAScriptの<code>import.meta</code>の Runtime Semantics</a> を見れば明らかだが、ECMAScript の仕様の範囲内では <code>import.meta</code> はオブジェクトであることくらいしか定められていない。どのようなプロパティが提供されるかは各ホストに委ねられている。</p>\n<p>たとえば HTML や Node.js などの主要なホストでは、(ECMAScriptの立場から見れば偶然)同じ <code>import.meta.url</code> というプロパティが実装されているということになる。\nつまり、<code>import.meta.url</code> は ECMAScript には含まれていない。</p>\n<p>最近では Vite などのモジュールバンドラーが <code>import.meta</code> に独自のプロパティを実装しているが、それも ECMAScript の仕様としてはなんの問題もない。</p>\n<p>もちろん、<a href=\"https://html.spec.whatwg.org/multipage/webappapis.html#hostgetimportmetaproperties\">HTML の <code>import.meta.url</code> は HTML の仕様に定めらている。</a></p>\n<h2>実際には</h2>\n<p><a href=\"https://github.com/tc39/proposal-import-meta\">https://github.com/tc39/proposal-import-meta</a> に起票された issue に答えが書いてあった。</p>\n<p><div class=\"hatena-link\"><iframe class=\"hatena-link-frame\" src=\"https://hatenablog-parts.com/embed?url=https://github.com/tc39/proposal-import-meta/issues/13\" style=\"border: none;\"></iframe></div></p>\n<p>この issue はズバリ「<code>import.meta.url</code> は文字列ではなく <code>URL</code> オブジェクトであるべきでは？」という趣旨のものだ。</p>\n<p>それに対して Domenic Denicola 氏が <a href=\"https://url.spec.whatwg.org/#url-apis-elsewhere\">WHATWG の URL の仕様を参照して</a>回答している。</p>\n<p>参照された URL の仕様を読むと次のように書かれている。</p>\n<blockquote>\n<p>A standard that exposes URLs, should expose the URL as a string (by serializing an internal URL). A standard should not expose a URL using a URL object. URL objects are meant for URL manipulation.</p>\n</blockquote>\n<p>要約すると「<code>URL</code> オブジェクトは URL を操作するためのものなので、標準が URL を公開するときは <code>URL</code> オブジェクトではなく文字列として公開するべきである。」ということである。</p>\n<p>つまり、<code>import.meta.url</code> が文字列として提供されている理由は、<strong>URL の仕様に「URL を提供するときは <code>URL</code> オブジェクトではなく文字列として提供するべき」と記述されているから</strong>ということになる。</p>\n<h2>最後に</h2>\n<p>なぜ URL の仕様にそのような記述があるのか、という根本的な理由はわからなかった。</p>\n<p>仕様によれば</p>\n<blockquote>\n<p>URL objects are meant for URL manipulation.</p>\n</blockquote>\n<p>とのことなので、単純に用途と異なるからということなのだろうが、直感的には「別に <code>URL</code> オブジェクトとして提供されていてもいいんじゃなかろうか」とも思う。</p>\n<p>より詳しい背景を知っている人がいたら教えてほしい。</p>\n<h2>参考リンク</h2>\n<ul>\n<li>TC39\n<ul>\n<li><a href=\"https://github.com/tc39/proposal-import-meta\">tc39/proposal-import-meta: import.meta proposal for JavaScript</a></li>\n<li><a href=\"https://github.com/tc39/proposal-import-meta/issues/13\">Issues · tc39/proposal-import-meta</a></li>\n</ul>\n</li>\n<li>WHATWG\n<ul>\n<li><a href=\"https://url.spec.whatwg.org/\">URL Standard</a></li>\n<li><a href=\"https://html.spec.whatwg.org/\">HTML Standard</a></li>\n</ul>\n</li>\n</ul>\n","metaData":{"title":"なぜ import.meta.url は URL オブジェクトではなく文字列なのか","author":"sosukesuzuki","createdAt":"2022-07-26","summary":"なぜ import.meta.url は URL オブジェクトではなく文字列なのか","tags":["ECMAScript","HTML","URL"],"updatedAt":"2022-07-26"}},{"type":"markdown","href":"/posts/frontend-weekly-2022-06","slug":"frontend-weekly-2022-06","content":"<p>フロントエンドエキスパートチームでは週に 1 回、最近のフロントエンド情報を見てワイワイする Cybozu Frontend Weekly というイベントを社内で開催しています。</p>\n<p>今回は Cybozu Frontend Weekly で 6 月に話題に上がった記事をご紹介します。</p>\n<h2>💬 Languages</h2>\n<h3><a href=\"https://nodejs.org/en/blog/announcements/nodejs16-eol/\">Bringing forward the End-of-Life Date for Node.js 16 | Node.js</a></h3>\n<p>Node.js v16 の EOL が 当初の予定より 7 ヶ月早まり 2023/9/11 になるとのことです。OpenSSL 1.1.1 側の EOL にあわせるのが理由だそうです。</p>\n<h2>📖 Framework, Library</h2>\n<h3><a href=\"https://zenn.dev/mugi/articles/334f9556095a07\">RedwoodJS を Ruby on Rails と比較してみる</a></h3>\n<p>チームの<a href=\"https://twitter.com/mugi_uno\">@mugi_uno</a> が書いた RedwoodJS と Ruby on Rails の比較記事。本人曰く、RedwoodRecord という ORM が Rails の ActiveRecord にかなり近い体験を提供してくれるので感動したらしいです。また、RedwoodJS は RedwoodJS を利用する企業に対してファンドを実施するなど市場拡大に対して精力的なようです。</p>\n<h3><a href=\"https://github.com/eslint/rfcs/pull/91\">feat: create \"@eslint-community GitHub organization\" RFC #91</a></h3>\n<p>eslint-community org を作って ESLint に関係あるパッケージのメンテナンスをするという提案が進行しているようです。</p>\n<h3><a href=\"https://tailwindcss.com/blog/2022-05-23-headless-ui-v1-6-tailwind-ui-team-management\">Headless UI v1.6, Tailwind UI team management, Tailwind Play improvements, and more</a></h3>\n<p>Tailwind CSS のチームが最近行った活動のまとめです。</p>\n<ul>\n<li>HeadlessUI の 1.6 リリース</li>\n<li>VSCode の Tailwind CSS IntelliSense の拡張に Tailwind CSS language mode が追加</li>\n<li>Tailwind CSS templates が発表予定</li>\n</ul>\n<h3><a href=\"https://github.com/lerna/lerna/releases/tag/v5.0.0\"><code>lerna/lerna</code> v5.0.0 Release</a></h3>\n<p>Lerna が Nx に委譲されてから初のアップデートです。内部処理が Nx に切り替わリました。</p>\n<h3><a href=\"https://docs.google.com/presentation/d/1tPaimqwJEXinPYifwUvA4gLCI6SezZsViuJvieWGAug/edit\">State of Vuenion</a></h3>\n<p>Vue Amsterdam での Evan you の発表資料です。</p>\n<p>Vue 2.7 の内容や、直近リリース予定の Vue 3.3 での変更内容、エコシステムの状況などに加え、Vue の将来向けに検討されている vue/vapor と呼ばれる新しいコンパイルの仕組みについてなどが紹介されています。</p>\n<h3><a href=\"https://prettier.io/blog/2022/06/14/2.7.0.html\">Prettier 2.7</a></h3>\n<p><a href=\"https://twitter.com/PrettierCode/status/1536604535497854977\">https://twitter.com/PrettierCode/status/1536604535497854977</a></p>\n<p>Prettier 2.7 がリリースされました。\nTypeScript 4.7 サポートに加え、高速化のための --cache オプションが追加されたそうです。\nチェック高速化に寄与するとのことなので、ぜひ試していきましょう。</p>\n<h3><a href=\"https://twitter.com/kevmodrome/status/1534275183334277121?s=20&#x26;t=Fm2pmMNFKzMqzQTiUtLQSw\">Apple Music の新しいサイトで Svelte が採用された</a></h3>\n<p><a href=\"https://bundlescanner.com/website/beta.music.apple.com%2Fus%2Fbrowse/all\">https://bundlescanner.com/website/beta.music.apple.com%2Fus%2Fbrowse/all</a><br>\nを見ると、Svelte が採用されているのがわかります。</p>\n<h3><a href=\"https://storybook.js.org/blog/component-encyclopedia/\">Component Encyclopedia のアップデート</a></h3>\n<p>さまざまなプロダクトの Storybook コンポーネントを見れる Component Encyclopedia がアップデートされました。各コンポーネントの検索機能の追加などが追加されています。</p>\n<p>fonts や token といった検索を利用することで、 Design token の参考にできたり、デザインシステムやコンポーネントの見せ方、Storybook の Addon 活用方法なども調べることができ、辞書的に活用できるそうです。</p>\n<h3><a href=\"https://astro.build/blog/astro-1-release-update/\">Astro 1.0 Release Update | Astro</a></h3>\n<p>Astro v1.0.0 のリリースが 7 月下旬ごろになるそうです。パフォーマンス改善や Bugfix などにもう少し時間を費やすとのことです。</p>\n<h2>🖥 Browsers</h2>\n<h3><a href=\"https://web.dev/preload-scanner/\">Don't fight the browser preload scanner</a></h3>\n<p>重要なリソースの発見を遅らせるような処理は preload scanner と相性が悪く、かえってパフォーマンスが落ちることがあるので気をつけようねという記事です。</p>\n<p>Frontend Weekly 内では、 preload scanner を邪魔しないためにも SSR のような事前に最適化が施されるような処置をした方が良いのかという議論も。SSR を実施したからといって(lazy load 等の)クライアント側の最適化手法をスキップできるわけではないため、必ずしも SSR をすれば解決できる課題ではないという話をしたりしていました。</p>\n<h3><a href=\"https://webkit.org/blog/12824/news-from-wwdc-webkit-features-in-safari-16-beta/\">News from WWDC22: WebKit Features in Safari 16 Beta</a></h3>\n<p>Safari 16 Beta がきますという記事。Container Query や Web Push の実装や sub grid、flex box といったレイアウトのインスペクタが追加されるそうです。</p>\n<h3><a href=\"https://deep-space.blue/web/2263\">IE11 とさよならしたら全力で使える HTML/CSS まとめ【40 個以上】</a></h3>\n<p>IE11 のサポートを考えなかった場合に使えるようになる HTML, CSS のまとめです。position: sticky や object-fit など、必須に近いものが紹介されているので抑えておくと良さそうです。</p>\n<h2>📏 Web Standard</h2>\n<h3><a href=\"https://www.mnot.net/blog/2022/06/06/http-core\">A New Definition of HTTP</a></h3>\n<p>HTTP 関連 RFC がどばっと公開されました。</p>\n<ul>\n<li>RFC 9110: HTTP Semantics</li>\n<li>RFC 9111: HTTP Caching</li>\n<li>RFC 9112: HTTP/1.1</li>\n<li>RFC 9113: HTTP/2</li>\n<li>RFC 9114: HTTP/3</li>\n<li>RFC 9163: Expect-CT Extension for HTTP</li>\n<li>RFC 9204: QPACK: Field Compression for HTTP/3</li>\n<li>RFC 9205: Building Protocols with HTTP</li>\n<li>RFC 9209: The Proxy-Status HTTP Response Header Field</li>\n<li>RFC 9211: The Cache-Status HTTP Response Header Field</li>\n<li>RFC 9213: Targeted HTTP Cache Control</li>\n<li>RFC 9218: Extensible Prioritization Scheme for HTTP</li>\n<li>RFC 9220: Bootstrapping WebSockets with HTTP/3</li>\n<li>RFC 9230: Oblivious DNS over HTTPS</li>\n</ul>\n<p>各 RFC については<a href=\"https://blog.jxck.io/entries/2022-06-16/HTTP-RFCs.html\">HTTP 関連 RFC が大量に出た話と 3 行まとめ</a>で概要が紹介されています。</p>\n<p>なお、RFC 公開を祝い HTTP RFC Publication Study という、\n複数人の方で内容のキャッチアップを行うイベントが行われ、その動画が YouTube 上にアーカイブとして残っています。\n<a href=\"https://www.youtube.com/watch?v=_hfG0HCufbs\">https://www.youtube.com/watch?v=_hfG0HCufbs</a></p>\n<h3><a href=\"https://zenn.dev/jxck/books/cache-anatomia\">Web 技術解体新書「第二章 Cache 解体新書」リリース</a></h3>\n<p>Web における Caching の概念を <code>Cache-Control</code> だけでなく関連するあらゆる仕様の側面から解説した Zenn book がリリースされました。</p>\n<h2>🎨 Design</h2>\n<h3><a href=\"https://www.joshwcomeau.com/css/surprising-truth-about-pixels-and-accessibility/\">The Surprising Truth About Pixels and Accessibility</a></h3>\n<p>px と rem/em どっち使う？という話。\nフォントは rem 等を使って padding なんかは px でいいよね(場合による)、みたいな話でした。</p>\n<p>px と rem のマッピングを良い感じにするために body のフォントサイズに 62.5% を設定するのは良くないよという話が印象的でした。\n(1rem はあくまでユーザが読みやすい標準的なサイズにすべきという思想らしいです)</p>\n<h3><a href=\"https://material.io/blog/roboto-flex\">Roboto … But Make It Flex</a></h3>\n<p>Google Fonts に Roboto Flex という新しい Variable Fonts が追加されました。</p>\n<h3><a href=\"https://web.dev/building-a-button-component/\">Building a button component</a></h3>\n<p>ダークモード・ライトモードや a11y を意識したボタンコンポーネントの作り方の紹介です。<code>:is</code> を利用した <code>:hover</code>, <code>:focus</code> の一括設定や、 outline-offset を利用したフォーカス時のスタイル制御など、実際にすぐ現場で使えそうな例も多かったです。</p>\n<h3><a href=\"https://webkit.org/blog/12662/customizing-color-fonts-on-the-web/\">Customizing Color Fonts on the Web</a></h3>\n<p>Safari 15.4 から<code>@font-palette-values</code>がサポートされました。この記事では実際に<code>@font-palette-values</code>を使ってカラーフォントに定義されているパレットを指定する方法や、パレットの色を上書きする方法が紹介されています。</p>\n<hr>\n<p>nus3 が印象に残っているのは、<a href=\"https://web.dev/building-a-button-component/#interactive-focus-ring\">フォーカスされているボタンのスタイリング</a>の話です。フォーカスされたボタンのインタラクティブなデザインをシンプルな CSS で実装できるのでおすすめです！</p>\n","metaData":{"title":"Cybozu Frontend Weekly 2022年6月まとめ","author":"nus3","createdAt":"2022-07-25","summary":"6月にFrontend Weeklyで話したフロントエンドの話題まとめ","tags":["Cybozu","FrontendExpert","FrontendWeekly"],"updatedAt":"2022-07-25"}},{"type":"markdown","href":"/posts/team-activity-logs-2022-1st-half","slug":"team-activity-logs-2022-1st-half","content":"<p>サイボウズ フロントエンドエキスパートチームの 2022 年上期（１月〜6 月）の取り組みを紹介します。</p>\n<h2>プロダクトへの支援</h2>\n<p>プロダクト支援としておもに次の 2 つを行いました。</p>\n<ul>\n<li>kintone のフロントエンドリアーキテクチャ</li>\n<li>サイボウズ製品の販売管理システムのフロントエンドリアーキテクチャ</li>\n</ul>\n<p>これらの支援活動は現在（2022 年 7 月〜）も継続中です。</p>\n<h3>kintone のフロントエンドリアーキテクチャ</h3>\n<p>kintone のフロントエンドリアーキテクチャプロジェクト、通称フロリアへの支援を昨年から引き続いて行っています。メンバーはプロジェクトのチームに所属する形で支援活動をしています。</p>\n<p>フロリアの詳細については次の記事を参照ください。</p>\n<p><div class=\"hatena-link\"><iframe class=\"hatena-link-frame\" src=\"https://hatenablog-parts.com/embed?url=https://blog.cybozu.io/entry/2021/07/20/170000\" style=\"border: none;\"></iframe></div></p>\n<p>次の記事はメンバーによる活動のアウトプットです。</p>\n<p><div class=\"hatena-link\"><iframe class=\"hatena-link-frame\" src=\"https://hatenablog-parts.com/embed?url=https://blog.cybozu.io/entry/2022/03/18/100000\" style=\"border: none;\"></iframe></div></p>\n<p><div class=\"hatena-link\"><iframe class=\"hatena-link-frame\" src=\"https://hatenablog-parts.com/embed?url=https://blog.cybozu.io/entry/2022/04/14/110000\" style=\"border: none;\"></iframe></div></p>\n<p>また、直接的な支援ではありませんが、フロリアプロジェクトでの社外アウトプット（社の技術ブログへの執筆）を支援する活動も行っています。</p>\n<h3>サイボウズ製品の販売管理システムのフロントエンドリアーキテクチャ</h3>\n<p>kintone をはじめとした、サイボウズの製品をお客様に購入していただくときに使われるサービスがあります。</p>\n<p>販売管理システムは kintone と同じく Closure で構築された歴史のあるサービスです。このサービスに関しても、継続性の観点からフロントエンドの再構築を進めています。</p>\n<h2>社内への情報共有と相談</h2>\n<p>社内への Web フロントエンドの情報共有として Frontend Weekly を継続して開催しています。</p>\n<p>また、チームの相談窓口に来たほかチームからの相談に対して調査や支援を行っています。</p>\n<p>上期には次のような相談がありました。</p>\n<ul>\n<li>自社で提供している OSS ライブラリの特定フレームワークでの利用方法を説明したドキュメントのレビュー</li>\n<li>Jest v28 へのアップデート方法</li>\n<li>Dual Package の package を esbuild で利用する際のエラー</li>\n<li>コンポーネントのスタイリング方法について教えてほしい</li>\n</ul>\n<h3>新人研修のコンテンツ作成と講義の実施</h3>\n<p>社内向け新人研修のコンテンツとして「サイボウズの Web フロントエンドについて」というタイトルで研修資料を作成し、講義を行いました。</p>\n<p>サイボウズ社内の各プロダクトの現状確認とこれから向かう先を、レガシーフロントエンドとモダンフロントエンドの差異を交えながら解説するといった内容になっています。</p>\n<p>サイボウズの各プロダクトにはまだまだ課題がある状態ですので、現状を認識してもらったうえで未来に向けてどう解決していくかの足がかりにするとともに、やっていきを高められたかなと思います。</p>\n<h3>社内で IE 卒業式を実施</h3>\n<p>サイボウズは 2022/06/12 に IE 11 のサポートを終了しました。</p>\n<p>公開イベントとして開催された<a href=\"https://web-study.connpass.com/event/250191/\">IE 卒業式</a>の社内版として、チームを問わず社内から IE に関する LT をしてくれるメンバーを募集して LT 会を開催しました。</p>\n<p>社内向けならではの IE の思い出話が聞けた有意義な会となりました。</p>\n<h2>社外への発信</h2>\n<h3>Frontend Monthly</h3>\n<p>社外への発信として YouTube Live にて月イチで Frontend Monthly を 生配信・録画で開催しています。</p>\n<ul>\n<li><a href=\"https://cybozu.connpass.com/event/236989/\">Cybozu Frontend Monthly#19 - connpass</a></li>\n<li><a href=\"https://cybozu.connpass.com/event/239952/\">Cybozu Frontend Monthly#20 - connpass</a></li>\n<li><a href=\"https://cybozu.connpass.com/event/241837/\">Cybozu Frontend Monthly#21 (ゲスト：株式会社ログラス) - connpass</a></li>\n<li><a href=\"https://cybozu.connpass.com/event/246037/\">Cybozu Frontend Monthly#22 - connpass</a></li>\n<li><a href=\"https://cybozu.connpass.com/event/248124/\">Cybozu Frontend Monthly#23 - connpass</a></li>\n<li><a href=\"https://cybozu.connpass.com/event/250296/\">Cybozu Frontend Monthly#24 (ゲスト：LAPRAS 株式会社) - connpass</a></li>\n</ul>\n<p>ゲストとして参加して頂いた方々ありがとうございました。</p>\n<h3>チームのブログ</h3>\n<p>また、当ブログにてブラウザの更新情報や ECMAScript の最新動向などを発信しています。</p>\n<ul>\n<li><a href=\"https://cybozu.github.io/frontend-expert/posts/turborepo\">workspace を使ったコマンドを最適化して実行する Turborepo について</a></li>\n<li><a href=\"https://cybozu.github.io/frontend-expert/posts/release-firefox-96\">CSS color-scheme サポート追加等 Firefox 96.0 リリースノートまとめ</a></li>\n<li><a href=\"https://cybozu.github.io/frontend-expert/posts/release-chrome-97\">Web Transport のサポートなど、Chrome 97 リリースノートまとめ</a></li>\n<li><a href=\"https://cybozu.github.io/frontend-expert/posts/tc39-meeting-2021-12\">ECMAScript の最新動向 2021 年 12 月版</a></li>\n<li><a href=\"https://cybozu.github.io/frontend-expert/posts/considerations-for-monorepo\">フロントエンドのモノレポ構成はスケーリングの夢を見るか</a></li>\n<li><a href=\"https://cybozu.github.io/frontend-expert/posts/release-chrome-98\">COLRv1 font のサポートなど、Chrome 98 リリースノートまとめ</a></li>\n<li><a href=\"https://cybozu.github.io/frontend-expert/posts/tc39-meeting-2022-01\">ECMAScript の最新動向 2022 年 01 月版</a></li>\n<li><a href=\"https://cybozu.github.io/frontend-expert/posts/css-cascade-layers\">主要ブラウザで使える！CSS Cascade Layers で新しい CSS 設計の手法を考える</a></li>\n<li><a href=\"https://cybozu.github.io/frontend-expert/posts/release-chrome-99\">CSS Cascasde Layers の追加など、Chrome 99 リリースノートまとめ</a></li>\n<li><a href=\"https://cybozu.github.io/frontend-expert/posts/release-safari-15-4\">Safari 15.4 リリースノートまとめ | dialog Element や lazy-loading, CSS Cascade Layers サポートなど</a></li>\n<li><a href=\"https://cybozu.github.io/frontend-expert/posts/release-chrome-101\">Chrome 101 リリースノートまとめ</a></li>\n<li><a href=\"https://cybozu.github.io/frontend-expert/posts/tc39-meeting-2022-03\">ECMAScript の最新動向 2022 年 03 月版</a></li>\n</ul>\n<h2>探究活動</h2>\n<p>フロントエンドエキスパートチームでは支援・発信・啓蒙のほかに探究も業務の一環として行っています。</p>\n<p>今年の 4 月からは新たな取り組みとして「フロントエンドお触り会」を実施しています。</p>\n<p>この会はメンバーが気になっている技術をワイワイ触ってみる集まりです。不定期に誰かが思い立った日に開催されます。</p>\n<p>次のようなものについてワイワイと試していました。</p>\n<ul>\n<li>Remix</li>\n<li>Playwright を使ったコンポーネントテスト</li>\n<li>Rome</li>\n</ul>\n<p>下期はもう少し開催頻度を上げて、いろいろなものを触りたいです。</p>\n<h2>おわりに</h2>\n<p>2022 年下期も引き続き支援活動、発信を続けていきたいと思います。</p>\n<p>フロントエンドエキスパートチームではサイボウズのフロントエンドを最高にするメンバーを募集しています。採用サイトからの応募やカジュアル面談などお待ちしております。</p>\n<p><div class=\"hatena-link\"><iframe class=\"hatena-link-frame\" src=\"https://hatenablog-parts.com/embed?url=https://cybozu.co.jp/recruit/entry/career/front-end-expert.html\" style=\"border: none;\"></iframe></div></p>\n","metaData":{"title":"サイボウズ フロントエンドエキスパートチームの活動 2022年上期","author":"nakajmg","createdAt":"2022-07-12","summary":"サイボウズのフロントエンドエキスパートチームの2022年の上期の活動内容を紹介します。","tags":["Cybozu","FrontendExpert"],"updatedAt":"2022-07-12"}},{"type":"markdown","href":"/posts/tc39-meeting-2022-06","slug":"tc39-meeting-2022-06","content":"<p>この記事では2022年06月06日~09日に開催された TC39 meeting 90th で議題に上がったプロポーザルを紹介します。</p>\n<h3>For Stage 4</h3>\n<h3><a href=\"https://github.com/tc39/proposal-array-find-from-last/\"><code>findLast</code> / <code>findLastIndex</code></a></h3>\n<p><strong>Stage 4 に到達しました</strong></p>\n<p><code>findLast</code> と <code>findLastIndex</code> は、<code>Array.prototype.find</code> と <code>Array.prototype.findIndex</code> の逆から走査するバージョンです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">prop1</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">prop2</span><span class=\"token operator\">:</span> <span class=\"token string\">\"foo\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">prop1</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">props2</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bar\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj1 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> element<span class=\"token punctuation\">.</span><span class=\"token property-access\">prop1</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">.</span><span class=\"token property-access\">prop2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"foo\"</span>\n<span class=\"token keyword\">const</span> obj2 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">findLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> element<span class=\"token punctuation\">.</span><span class=\"token property-access\">prop1</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"bar\"</span>\n</code></pre></div>\n<p>このミーティングの時点で V8、JavaScriptCore(フラグ付き)、ChakraCore(フラグ付き) にはすでに実装されており、<a href=\"https://spidermonkey.dev/blog/2022/06/30/newsletter-firefox-102-103.html\">SpiderMonkey でも後日実装されたようです</a>。</p>\n<p>(余談ですが筆者は、このプロポーザルのスライド資料を読んで ChakraCore の開発が未だに継続されていることと TC39 プロセスにおける実装の一つとして数えられていることをはじめて知りました。)</p>\n<h2>For Stage 3</h2>\n<h3><a href=\"https://github.com/tc39/proposal-symbols-as-weakmap-keys\">Symbols as WeakMap keys</a></h3>\n<p><strong>Stage 3 に到達しました</strong></p>\n<p>Symbols as WeakMap keys は WeakMap のキーとして Symbol を使えるようにするプロポーザルです。</p>\n<p>提案の概要については</p>\n<p><div class=\"hatena-link\"><iframe class=\"hatena-link-frame\" src=\"https://hatenablog-parts.com/embed?url=https://sosukesuzuki.dev/posts/symbols-as-weakmap-keys\" style=\"border: none;\"></iframe></div></p>\n<p>を見てください。</p>\n<p>これまでの流れについては</p>\n<p><div class=\"hatena-link\"><iframe class=\"hatena-link-frame\" src=\"https://hatenablog-parts.com/embed?url=https://cybozu.github.io/frontend-expert/posts/tc39-meeting-2022-01\" style=\"border: none;\"></iframe></div></p>\n<p>を見てください。</p>\n<p>Symbols as WeakMap keys が一見シンプルながらこれまで Stage 2 のままだったのは、グローバルシンボルレジストリに登録された symbol や well-known symbols などのいわゆる eternal symbol を WeakMap のキーとして許容するかどうか、という論点のためでした。</p>\n<p>スライド( <a href=\"http://www.rricard.me/serve/tc39-jun2022-symbols-as-wm-keys.pdf\">http://www.rricard.me/serve/tc39-jun2022-symbols-as-wm-keys.pdf</a> ) 上では次のように書かれています。</p>\n<ul>\n<li>通常の Symbol コンストラクタで作られる unique symbols は WeakMap のキーとして許容する</li>\n<li><code>Symbol.for(\"...\")</code> で作られるグローバルシンボルレジストリに登録された registered symbols は WeakMap のキーとして許容しない</li>\n<li>well-known symbols は WeakMap のキーとして許容する</li>\n</ul>\n<p>実際 <a href=\"https://tc39.es/proposal-symbols-as-weakmap-keys/\">https://tc39.es/proposal-symbols-as-weakmap-keys/</a> を見る限り WeakMap のキーとして妥当かどうかを判断するために使われている abstract operation <a href=\"https://tc39.es/proposal-symbols-as-weakmap-keys/#sec-canbeheldweakly-abstract-operation\"><code>CanBeHeldWeakly</code></a> では registerd symbols を許容していないようです。</p>\n<h3><a href=\"https://github.com/tc39/proposal-regexp-modifiers\">RegExp Modifiers</a></h3>\n<p><strong>Stage 3 に到達しました</strong></p>\n<p>RegExp Modifiers は正規表現パターンの中でのフラグの変更を可能にするプロポーザルです。</p>\n<p>概要については 2021 年 12 月の記事を見てください。</p>\n<p><div class=\"hatena-link\"><iframe class=\"hatena-link-frame\" src=\"https://hatenablog-parts.com/embed?url=https://cybozu.github.io/frontend-expert/posts/tc39-meeting-2021-12\" style=\"border: none;\"></iframe></div></p>\n<h3><a href=\"https://github.com/tc39/proposal-json-parse-with-source\"><code>JSON.parse</code> source text access</a></h3>\n<p><strong>仕様のテキストの修正を待って条件付き Stage 3 にるようです</strong></p>\n<p><code>JSON.parse</code> source text access は、<code>JSON.parse</code> の第２引数として渡すことができる関数(reviver)の中でもとのテキストにアクセスできるようにするためのプロポーザルです。</p>\n<p>reviver ではパースした JSON のそれぞれのメンバーのキーとバリューにアクセスし、結果のオブジェクトを返す前になんらかの変換を施すことができます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">parse</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">{ \"foo\": 3 }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> value <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">return</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// { \"foo\": 5 }</span>\n</code></pre></div>\n<p>この reviver の引数としてキーとバリューが渡ってきた時点ですでにもとのテキストには存在する情報が失われていることがあります。</p>\n<p>たとえば <code>{ \"key\": 999999999999999999 }</code> という JSON を <code>JSON.parse</code> でパースするときに、reviver で受け取った引数をそのまま出力する例を考えてみましょう。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">parse</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">{ \"key\": 999999999999999999 }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword control-flow\">return</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 1000000000000000000</span>\n</code></pre></div>\n<p>もとの値は <code>999999999999999999</code> なのに実際に出力された値は <code>1000000000000000000</code> になっています。つまり、reviver の引数として受け取った時点でですでに <code>999999999999999999</code> ではなく <code>1000000000000000000</code> になってしまっています。</p>\n<p>なので、渡されたメンバーのバリューが <code>999999999999999999</code> なのかそれとも <code>1000000000000000000</code> なのか、reviver 側からは判断ができません。</p>\n<p>これでは困るので <code>JSON.parse</code> source text access では、次のようなインターフェースでもとのソーステキストにアクセスできます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">parse</span><span class=\"token punctuation\">(</span>\n  <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">{ \"key\": 999999999999999999 }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> source <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  　　<span class=\"token comment\">// ここで source には '999999999999999999' という文字列が入ってる</span>\n    <span class=\"token spread operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h2>For Stage 2</h2>\n<h3><a href=\"https://github.com/tc39/proposal-string-dedent\"><code>String.dedent</code></a></h3>\n<p><strong>Stage 2 に到達しました</strong></p>\n<p><code>String.dedent</code> はテンプレートリテラルの内部のインデントを適切に除去するためのタグ付きテンプレートリテラルを追加するプロポーザルです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"token string\">      create table student(</span>\n<span class=\"token string\">        id int primary key,</span>\n<span class=\"token string\">        name text</span>\n<span class=\"token string\">      )</span>\n<span class=\"token string\">    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>このようなコードを書くと、実際に出力される文字列には、通常プログラマーが期待するものとは異なるスペースが含まれることになります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninstance<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*</span>\n<span class=\"token comment\"></span>\n<span class=\"token comment\">      create table student(</span>\n<span class=\"token comment\">        id int primary key,</span>\n<span class=\"token comment\">        name text</span>\n<span class=\"token comment\">      )</span>\n<span class=\"token comment\">    </span>\n<span class=\"token comment\">*/</span>\n</code></pre></div>\n<p>こういうときのために適切にインデントを取り除いてくれるのが <code>String.dedent</code> です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">dedent</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"token string\">      create table student(</span>\n<span class=\"token string\">        id int primary key,</span>\n<span class=\"token string\">        name text</span>\n<span class=\"token string\">      )</span>\n<span class=\"token string\">    </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ninstance<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*</span>\n<span class=\"token comment\">create table student(</span>\n<span class=\"token comment\">  id int primary key,</span>\n<span class=\"token comment\">  name text</span>\n<span class=\"token comment\">)</span>\n<span class=\"token comment\">*/</span>     \n</code></pre></div>\n<h3><a href=\"https://github.com/tc39/proposal-grouped-and-auto-accessors\">Grouped and Auto-Accessors</a></h3>\n<p><strong>Stage 2 に到達しませんでした</strong></p>\n<p>Grouped and Auto-Accessors はクラスのアクセサを定義する新しい方法を導入するプロポーザルです。</p>\n<p>まず Grouped は次のようにして一つのプロパティのアクセサをまとめて定義できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span>\n  accessor x <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">}</span>\n    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  accessor x <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">}</span>\n    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>そして Auto-Accessors は Grouped に対するシンタックスシュガーのようなものです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span>\n  accessor a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// `accessor a { get; set; } = 1` と同じ</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>プロポーザルに README では様々なパターンが紹介されているので興味がある人はそちらを参照してください。</p>\n<h2>For Stage 1</h2>\n<h3><a href=\"https://github.com/bakkot/proposal-duplicate-named-capturing-groups\">Duplicate named capture groups</a></h3>\n<p><strong>Stage 2 に到達しました</strong></p>\n<p>この提案はもともと Stage 0 でしたが、アジェンダ上の議題は</p>\n<blockquote>\n<p>Duplicate named capture groups for stage 1, 2, or 3 reaches Stage 2</p>\n</blockquote>\n<p>でした。そして実際に Stage 1 をスキップして Stage 2 に到達しました。</p>\n<p>Duplicate named capture groups は正規表現の中で同名の名前付きグループを複数記述可能にするためのプロポーザルです。</p>\n<p>次のコードを見てください。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">str<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token group punctuation\">(?&#x3C;<span class=\"token group-name variable\">year</span>></span><span class=\"token char-class\"><span class=\"token char-class-punctuation punctuation\">[</span><span class=\"token range\">0<span class=\"token range-punctuation operator\">-</span>9</span><span class=\"token char-class-punctuation punctuation\">]</span></span><span class=\"token quantifier number\">{4}</span><span class=\"token group punctuation\">)</span>-<span class=\"token char-class\"><span class=\"token char-class-punctuation punctuation\">[</span><span class=\"token range\">0<span class=\"token range-punctuation operator\">-</span>9</span><span class=\"token char-class-punctuation punctuation\">]</span></span><span class=\"token quantifier number\">{2}</span><span class=\"token alternation keyword\">|</span><span class=\"token char-class\"><span class=\"token char-class-punctuation punctuation\">[</span><span class=\"token range\">0<span class=\"token range-punctuation operator\">-</span>9</span><span class=\"token char-class-punctuation punctuation\">]</span></span><span class=\"token quantifier number\">{2}</span>-<span class=\"token group punctuation\">(?&#x3C;<span class=\"token group-name variable\">year</span>></span><span class=\"token char-class\"><span class=\"token char-class-punctuation punctuation\">[</span><span class=\"token range\">0<span class=\"token range-punctuation operator\">-</span>9</span><span class=\"token char-class-punctuation punctuation\">]</span></span><span class=\"token quantifier number\">{4}</span><span class=\"token group punctuation\">)</span></span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これは yyyy-MM もしくは MM-yyyy の形をした文字列のマッチする正規表現ですが、現在の ECMAScript としてはインバリッドです。なぜなら同じ正規表現の中で同名の名前付きキャプチャグループが複数存在するからです。</p>\n<p>このようなケースでは、同じ正規表現の中に同名の名前付きキャプチャグループを複数記述できると便利です。</p>\n<h3><a href=\"https://github.com/hax/proposal-this-parameter\"><code>this</code> parameter</a></h3>\n<p><strong>Stage 1 に到達しませんでした</strong></p>\n<p><code>this</code> parameter は、TypeScript の <code>this</code> parameter のような構文を JavaScript に導入するためのプロポーザルです。</p>\n<p>次のようなモチベーションがあるようです。</p>\n<ul>\n<li>様々なツールチェインのために TypeScript の <code>this</code> parameter を標準化すること</li>\n<li>JavaScript と TypeScript の間のギャップを埋めることで初学者にとって易しくなるため</li>\n<li><a href=\"https://github.com/tc39/proposal-type-annotations\">Type Annotations</a> によってもたらされる負担をへらすため</li>\n<li>メソッドの構文を提供するため</li>\n</ul>\n<p>現在 Stage 1 の <a href=\"https://github.com/tc39/proposal-call-this\">call-this</a> においては、this を明示できるほうがわかりやすいのかもしれません。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">toHex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">this</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token number\">42</span><span class=\"token operator\">~</span><span class=\"token operator\">></span><span class=\"token function\">toHex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h3><a href=\"https://github.com/rbuckton/proposal-regexp-atomic-operators\">RegExp Atomic Operators</a></h3>\n<p><strong>Stage 1 に到達しました</strong></p>\n<p>RegExp Atomic Operators はバックトラックを制御するための新しい構文を正規表現に追加するプロポーザルです。</p>\n<p>たとえば <code>/a(bc|b)c/</code> という正規表現は <code>\"abcc\"</code> にも <code>\"abc\"</code> にもマッチします。\n<code>\"abcc\"</code> のときは単純で、まず先頭の <code>a</code> がマッチし、次に <code>(bc|b)</code> の <code>bc</code> にマッチして、最後に <code>c</code> がマッチします。\n一方で <code>\"abc\"</code> のときはやや複雑です。まず先頭の <code>a</code> がマッチし、次に <code>(bc|b)</code> の <code>bc</code> にマッチしますが、そうすると最後の <code>c</code> にはマッチできません。そこで <code>(bc|b)</code> までもどります。前回のマッチングにおいて <code>bc</code> ではマッチできなかったので、もう一つの選択肢である <code>b</code> にマッチさせます。そして最後の <code>c</code> にマッチします。</p>\n<p>このような後続のパターンがマッチしない場合に一つ前のパターンに戻ってマッチを試みることをバックトラックといいます。RegExp Atomic Operators はこのようなバックトラックを制御するための構文を追加します。</p>\n<p>たとえば前述の <code>/a(bc|b)c</code> というパターンでバックトラックが発生しないように Atomic Operators を使って書くと <code>/a(?>(bc|b))c</code> になります。このパターンでは <code>\"abcc\"</code> にはマッチしますが、<code>(bc|c)</code> へのバックトラックが発生しないため <code>\"abc\"</code> にはマッチしません。</p>\n<p>他にもいくつかの新しい構文があるみたいなので興味がある人はプロポーザルの README かスペックテキストを参照してください。</p>\n<h2>Updates</h2>\n<p>ステージの移動はないものの更新が紹介された提案を列挙します。ここでは詳細については説明しませんがスライドや関連するIssueへのリンクを貼ったので興味のある人は参照してください。</p>\n<h3><a href=\"https://github.com/tc39/proposal-array-grouping\">Array Grouping</a></h3>\n<p>Array Grouping は <a href=\"https://lodash.com/docs/4.17.15#groupBy\">Lodash の <code>groupBy</code></a> のように配列をグルーピングするメソッドを導入するプロポーザルです。</p>\n<p>今回の変更で <code>groupBy</code> と <code>groupByToMap</code> から <code>group</code> と <code>groupToMap</code> へとメソッドの名前が変更されました。</p>\n<p>詳細は該当の Pull Request( <a href=\"https://github.com/tc39/proposal-array-grouping/pull/39\">https://github.com/tc39/proposal-array-grouping/pull/39</a> )を見てください。</p>\n<h3><a href=\"https://github.com/tc39/proposal-decorators\">Decorators</a></h3>\n<ul>\n<li><a href=\"https://slides.com/pzuraq/decorators-normative-changes-2022-06\">https://slides.com/pzuraq/decorators-normative-changes-2022-06</a></li>\n</ul>\n<h3><a href=\"https://github.com/tc39/proposal-shadowrealm\">Shadow Realms</a></h3>\n<ul>\n<li><a href=\"https://github.com/tc39/proposal-shadowrealm/issues/365\">https://github.com/tc39/proposal-shadowrealm/issues/365</a></li>\n</ul>\n<h3><a href=\"https://tc39.es/proposal-temporal/\">Temporal</a></h3>\n<ul>\n<li><a href=\"http://ptomato.name/talks/tc39-2022-06/\">http://ptomato.name/talks/tc39-2022-06/</a></li>\n</ul>\n<h3><a href=\"https://github.com/tc39/proposal-function.sent\"><code>function.sent</code></a></h3>\n<ul>\n<li><a href=\"https://johnhax.net/2022/function-sent/slide#0\">https://johnhax.net/2022/function-sent/slide#0</a></li>\n</ul>\n<h3><a href=\"https://github.com/tc39/proposal-import-reflection\">Import Reflection</a></h3>\n<ul>\n<li><a href=\"https://docs.google.com/presentation/d/1y0MAo7ymIWzyyrU9o3oKLiHc4BtQwLtqlU4Z_8_XYjU/edit#slide=id.p\">https://docs.google.com/presentation/d/1y0MAo7ymIWzyyrU9o3oKLiHc4BtQwLtqlU4Z_8_XYjU/edit#slide=id.p</a></li>\n</ul>\n<h2>参考リンク</h2>\n<ul>\n<li>TC39\n<ul>\n<li><a href=\"https://github.com/tc39/agendas/blob/main/2022/06.md\">agendas/06.md at main · tc39/agendas</a></li>\n<li><a href=\"https://github.com/tc39/notes/blob/main/meetings/2022-06/jun-06.md\">notes/jun-06.md at main · tc39/notes</a></li>\n<li><a href=\"https://github.com/tc39/notes/blob/main/meetings/2022-06/jun-07.md\">notes/jun-07.md at main · tc39/notes</a></li>\n<li><a href=\"https://github.com/tc39/notes/blob/main/meetings/2022-06/jun-08.md\">notes/jun-08.md at main · tc39/notes</a></li>\n</ul>\n</li>\n<li>Babel\n<ul>\n<li><a href=\"https://github.com/babel/proposals/issues/82\">Jun 2022 · Issue #82 · babel/proposals</a></li>\n</ul>\n</li>\n<li>SpiderMonkey\n<ul>\n<li><a href=\"https://spidermonkey.dev/blog/2022/06/30/newsletter-firefox-102-103.html\">SpiderMonkey Newsletter (Firefox 102-103) | SpiderMonkey JavaScript/WebAssembly Engine</a></li>\n</ul>\n</li>\n</ul>\n","metaData":{"title":"ECMAScriptの最新動向 2022年06月版","author":"sosukesuzuki","createdAt":"2022-07-11","summary":"2022年06月06日~09日に開催された TC39 meeting 90th の内容を紹介します","tags":["TC39","ECMAScript"],"updatedAt":"2022-07-11"}},{"type":"markdown","href":"/posts/release-chrome-102","slug":"release-chrome-102","content":"<h1>Chrome 102</h1>\n<p>Chrome 102 のリリースノート関連の情報をまとめました。</p>\n<ul>\n<li><a href=\"https://developer.chrome.com/blog/new-in-chrome-102/\">https://developer.chrome.com/blog/new-in-chrome-102/</a></li>\n<li><a href=\"https://developer.chrome.com/blog/new-in-devtools-102/\">https://developer.chrome.com/blog/new-in-devtools-102/</a></li>\n<li><a href=\"https://developer.chrome.com/blog/deps-rems-102/\">https://developer.chrome.com/blog/deps-rems-102/</a></li>\n<li><a href=\"https://www.chromestatus.com/features#milestone%3D102\">https://www.chromestatus.com/features#milestone%3D102</a></li>\n<li><a href=\"https://v8.dev/blog/v8-release-102\">https://v8.dev/blog/v8-release-102</a></li>\n</ul>\n<h2>New In Chrome (Chrome102)</h2>\n<p>Chrome102 で新しく追加された機能です。</p>\n<h3>File Handling API</h3>\n<p>PWA に MIME タイプや拡張子を紐づけることができる File Handling API がサポートされました。</p>\n<p>PWA のマニフェストに関連づけたい MIME タイプや拡張子を設定することで、Mac だと「このアプリケーションで開く」の候補に PWA のアプリケーションが選択できるようになります。</p>\n<p>参考: Let installed web applications be file handlers</p>\n<p><a href=\"https://web.dev/file-handling/\">https://web.dev/file-handling/</a></p>\n<h3>The inert property</h3>\n<p><code>inert</code>プロパティは、グローバルな HTML 属性です。<code>inert</code>属性のついた要素は、フォーカスイベントや支援技術からのイベントなど、ユーザー入力イベントを無視します。</p>\n<p><code>inert</code>属性はモーダルダイアログやドロワーなどの UI パーツを作成するのに便利です。モーダルダイアログでは、モーダルが表示されている間、フォーカスをモーダル内に限定したくなりますが、これはモーダル外の要素に<code>inert</code>属性をつけることで実現できます。また、ユーザーから常に見えるわけではないドロワーでは、開閉時に<code>inert</code>属性を切り替えることで、「画面外にあるドロワーを誤ってキーボードで操作してしまう」ような誤作動を防止できます。</p>\n<p><code>inert</code>属性の利用例です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Button 1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>label</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>inertではない<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>div</span> <span class=\"token attr-name\">inert</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Button 2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>label</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>inertである<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<p>この例では二つ目の<code>div</code>に<code>inert</code>属性を付与しています。そのため内包された<code>&#x3C;label></code>要素や<code>&#x3C;button></code>要素はフォーカスやクリックできない要素になります。</p>\n<p><code>inert</code>属性は Chrome では 102 からサポートされますが、FireFox や Safari でも同様にサポートされる予定です。(執筆現在、Safari は 15.5 から、FireFox は Nightly で利用可能です。)</p>\n<h3>Navigation API</h3>\n<p>近年の多く見られる SPA で作られたアプリでは、ページ移動なしで URL を更新します。この挙動を実現するため、一般的に<code>History API</code>が利用されますが、<code>History API</code>ではうまく用件を満たせないことや、動作がわかりにくくなることがあります。</p>\n<p>このような History API の問題点をカバーするべく作られた API 仕様が Navigation API です。</p>\n<h4>利用方法</h4>\n<p>Navigation API を使用するには、グローバルに生えた<code>navigation</code>オブジェクトに navigate リスナーを追加します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\">navigation<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'navigate'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">navigateEvent</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">switch</span> <span class=\"token punctuation\">(</span>navigateEvent<span class=\"token punctuation\">.</span><span class=\"token property-access\">destination</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'https://example.com/'</span><span class=\"token operator\">:</span>\n      navigateEvent<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">transitionWhile</span><span class=\"token punctuation\">(</span><span class=\"token function\">loadIndexPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword control-flow\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'https://example.com/cats'</span><span class=\"token operator\">:</span>\n      navigateEvent<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">transitionWhile</span><span class=\"token punctuation\">(</span><span class=\"token function\">loadCatsPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword control-flow\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>ナビゲーションイベントは、<code>navigate</code>リスナーによって一元化されており、以下のような条件の有無に関わらずあらゆるタイプのナビゲーションイベントで発火します。</p>\n<ul>\n<li>フォームを送信したかどうか</li>\n<li>戻る・進むアクションによる遷移か</li>\n<li>プログラムによって引き起こされたものかどうか</li>\n</ul>\n<p>その上で、ほとんどの遷移に関するアクションに対して、デフォルトの動作を上書きすることができます。</p>\n<p>詳細に関しては<a href=\"https://developer.chrome.com/docs/web-platform/navigation-api/\">Modern client-side routing: the Navigation API</a>をご覧ください。</p>\n<h3>And more!</h3>\n<ul>\n<li>ページ内検索等でヒットするまで表示されない<code>hidden=unfil-found</code>の指定ができるようになります</li>\n</ul>\n<h2>What's New In DevTools (Chrome 102)</h2>\n<p>DevTools についてはこちらの日本語訳を参照ください。</p>\n<p><a href=\"https://developer.chrome.com/ja/blog/new-in-devtools-102/\">https://developer.chrome.com/ja/blog/new-in-devtools-102/</a></p>\n<h2>Deprecations and removals in Chrome 102</h2>\n<h3>Deprecate PaymentRequest.show() without User Activation</h3>\n<p>ユーザーのアクティベーションなしに<code>PaymentRequest.show()</code>を実行できなくなりました。</p>\n<p><code>PaymentRequest.show()</code>はクリックなどのユーザーイベント内で行う必要があります。</p>\n<h3>Remove SDP Plan B</h3>\n<p>WebRTC でセッションを確立するために使用される <code>Session Description Protocol</code> (SDP) は、Chromium 上で<code>Unified Plan</code>と<code>Plan B</code>という 2 種類の異なる実装が存在しています。\n<code>Plan B</code>はクロスブラウザでの互換性がないなどの問題を抱えていたため、102 から削除されます。</p>\n<p>このバージョンから Chrome では<code>Plan B</code>を利用すると例外が投げられるようになります。これを回避したい場合は 2022 年 5 月 25 日までに<a href=\"https://developer.chrome.com/origintrials/#/view_trial/3892235977954951169\">非推奨のトライアル</a>に参加してください。また 12 月に終了した前回の非推奨トライアルに参加していて、今回のトライアルにも参加したい場合は、新しくトークンをリクエストする必要があることに注意してください。</p>\n<h2>その他 Chrome Platform Status に記載されていたもの</h2>\n<h3>Add Save Data Client Hint</h3>\n<p>Permissions-Policy に<code>CH-Save-Data</code>を追加することで Client Hint として<code>Save-Data</code>が扱えるようになります。</p>\n<p><code>Sec-CH-Save-Data</code>が適切な Client Hint になり、Permissions-Policy を介してサードパーティへ送信されることを防ぐことができます。</p>\n<p>参考: Save-Data</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Save-Data\">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Save-Data</a></p>\n<h3>AudioContext.outputLatency</h3>\n<p><code>AudioContext.outputLatency</code>プロパティが追加されました。</p>\n<p>このプロパティは音声出力レイテンシーの推定値(秒数)を返します。技術的には、UserAgent がホストシステムにバッファの再生を要求してから、バッファ内の最初のサンプルが実際に音声出力デバイスによって処理されるまで(スピーカーなどであれば音が出るまで)の間隔を指します。</p>\n<p>このプロパティは入力から出力までのレイテンシーを調整するために必要で、ビデオとオーディオストリームの同期などに非常に有効です。</p>\n<h3>Capture Handle</h3>\n<p>ビデオキャプチャを行う他のアプリケーションに対して、特定の情報やコントロールを opt-in で公開できる仕組みを導入します。</p>\n<p>たとえば、プレゼンテーション・アプリを開いたタブをビデオキャプチャしているアプリケーションがあったとします。この機能でプレゼンテーションアプリがキャプチャをしているアプリに対して、プレゼンテーションを操作を公開するとキャプチャをしているアプリからプレゼンテーションアプリを操作できるようになります。</p>\n<p>ディスプレイキャプチャを行うアプリケーションは、キャプチャされるアプリケーションが Capture Handle 機能を提供していることを前提に、ユーザーに優れた機能性を提供できます。今までに似たような技術はありましたが、Capture Handle では、何を公開するか(オリジン・ハンドル・ID...etc)を選択可能にすることで、よりシンプルで信頼性が高く、安全な仕組みを提供します。</p>\n<p>また私たちが提案するメカニズムでは、キャプチャされたアプリケーション側で、キャプチャする側のアプリケーションを制限できます。具体的には全ての web か特定の origin かを選択できます。</p>\n<h3>HTTP->HTTPS redirect for HTTPS DNS records</h3>\n<p>DNS に問い合わせをする際に、従来の<code>A</code>および<code>AAAA</code>クエリと並行して、<code>HTTPS</code>レコードを問い合わせるようになります。ウェブサイトが<code>HTTPS</code>DNS レコードを設定していて、Chrome がそれを受信すると、Chrome は常に HTTPS で接続します。</p>\n<h3>WebHID exclusionFilters option in requestDevice()</h3>\n<p>navigator.hid.requestDevice()に<code>exclusionFilters</code>が追加されました。</p>\n<p><code>exclusionFilters</code>を指定することでブラウザから扱いたくない HID デバイスを除外することができるようになります。</p>\n<p>参考:</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HID/requestDevice\">https://developer.mozilla.org/en-US/docs/Web/API/HID/requestDevice</a></p>\n","metaData":{"title":"Chrome 102 リリースノートまとめ","author":"Saji","editor":"nus3","createdAt":"2022-07-05","summary":"Chrome 102 のリリースノートの要約です","tags":["Releasenote","Browser"],"updatedAt":"2022-07-05"}},{"type":"markdown","href":"/posts/tc39-meeting-2022-03","slug":"tc39-meeting-2022-03","content":"<p>この記事では2022年03月28日~31日に開催された TC39 meeting 89th で議題に上がったプロポーザルを紹介します。</p>\n<h2>For Stage 4</h2>\n<p>For Stage 4 の提案はありませんでした。</p>\n<h2>For Stage 3</h2>\n<h3><a href=\"https://github.com/tc39/proposal-regexp-v-flag\">RegExp set notation + Unicode properties of strings</a></h3>\n<p><strong>Stage 3 に到達しました</strong></p>\n<p>このプロポーザルは正規表現に新しく<code>v</code>フラグを導入し、その中で set notation と Unicode properties of strings を使えるようにします。\n(翻訳するとしたら set notation は「集合の表記」、properties of strings は「文字列プロパティ」でしょうか。定訳がわからないのでこの記事ではこれらの用語を英語のまま表記します。)</p>\n<p>まず、set notation とは次のような記法のことです。\n(<code>A</code> や <code>B</code> は character class (<code>[a-z]</code>など) もしくは Unicode property escape (<code>\\p{ASCII}</code>など) とします)</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">// 差(difference/subtraction)\n[A--B]\n\n// 共通部分(intersection)\n[A&#x26;amp;&#x26;amp;B]\n\n// nested character class\n[A--[0-9]]</code></pre></div>\n<p><a href=\"https://github.com/tc39/proposal-regexp-v-flag#illustrative-examples\">プロポーザルのリポジトリでは実用的なユースケースが紹介されています。</a></p>\n<p>次に Unicode properties of strings は、domain が character や code point ではなく string (character の sequence) であるような Unicode property のことです。\n(Unicode の property については Unicode の <a href=\"https://www.unicode.org/reports/tr18/#Categories\">UTS18</a> の Properties を読むのがわかりやすいと思います)</p>\n<p>このプロポーザルの中では次の property of string がサポートされるようです。(ref: <a href=\"https://github.com/tc39/ecma262/pull/2418/files#diff-00f81a4e81713d00d0ebd710c18a798b699d244361ceb04fecbb06db6b32e8ba\">https://github.com/tc39/ecma262/pull/2418/files#diff-00f81a4e81713d00d0ebd710c18a798b699d244361ceb04fecbb06db6b32e8ba</a>)<br>\n(見たところどれも Binary のものしかありませんが、今後他の datatype のものも追加されるかどうかはわかりません)</p>\n<ul>\n<li><code>Basic_Emoji</code></li>\n<li><code>Emoji_Keycap_Sequence</code></li>\n<li><code>RGI_Emoji_Modifier_Sequence</code></li>\n<li><code>RGI_Emoji_Flag_Sequence</code></li>\n<li><code>RGI_Emoji_Tag_Sequence</code></li>\n<li><code>RGI_Emoji_ZWJ_Sequence</code></li>\n<li><code>RGI_Emoji</code></li>\n</ul>\n<p>これによって複数の code point からなる Emoji に対して Unicode property escape を使ってマッチさせられるようです。</p>\n<p>(Unicode についてはあまり詳しくないので記述について誤りを見つけた人は教えてほしいです。)</p>\n<p>ちなみに Unicode properties of strings はもともとは<a href=\"https://github.com/tc39/proposal-regexp-unicode-sequence-properties\">別のプロポーザル</a>でしたが、2021年5月にこのプロポーザルにマージされました。</p>\n<h3><a href=\"https://github.com/tc39/proposal-change-array-by-copy\">Change Array by Copy</a></h3>\n<p><strong>Stage 3 に到達しました</strong></p>\n<p>Change Array by Copy は Array と TypedArray にいくつかのイミュータブルなメソッドを追加するプロポーザルです。</p>\n<p>以前この提案について記事を書いたのでより深く知りたい場合はそちらも参照してください(この記事は約1年前に書かれたものなので、現在提案されている仕様とは異なる部分があります)。</p>\n<p><div class=\"hatena-link\"><iframe class=\"hatena-link-frame\" src=\"https://hatenablog-parts.com/embed?url=https://sosukesuzuki.dev/posts/change-array-by-copy\" style=\"border: none;\"></iframe></div></p>\n<p>このプロポーザルについての議論では、新たに追加されるメソッドをどのように命名するかが主な論点にあがっていました。</p>\n<p>現在では次のような <code>with</code> + <code>メソッド名の過去形(過去分詞形?)</code> という形で落ち着いたようです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ミュータブルなメソッド</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// イミュータブルなメソッド</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">withReversed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これらのメソッドは便利な一方、配列をコピーして返すため配列の要素数に応じて発生するオーバーヘッドを考慮して使う必要があります。</p>\n<h3><a href=\"https://github.com/tc39/proposal-decorators\">Decorators</a></h3>\n<p><strong>Stage 3 に到達しました</strong></p>\n<p>Decorators はクラスを拡張するための構文を導入するプロポーザルです。</p>\n<p>このプロポーザルは5年以上に渡って議論が行われてきた上、TypeScript によって早期からサポートされていたため開発者に広く認知されています。</p>\n<p>ミーティングで使われたスライドの冒頭では</p>\n<blockquote>\n<p>What is a decorator?\nDecorators are <em>functions</em> which have four main capabilities when applied to a class or class element</p>\n<ul>\n<li>Replacement</li>\n<li>Initialization</li>\n<li>Metadata</li>\n<li>Access</li>\n</ul>\n</blockquote>\n<p>と説明されています。</p>\n<p>ちなみに現在 TypeScript に実装されている Decorators は現在の TC39 の Decorators とは異なるものです。<a href=\"https://github.com/microsoft/TypeScript/issues/49074\">TypeScript 4.8 で TC39 の Decorators を実装することが検討されています。</a></p>\n<p>筆者としては、Decorators はコードを書くときの体験を大きく変えうる機能である一方で、複雑で厄介なコードを生み出す可能性も高い機能だと考えています。\nしたがって一般的な Web アプリケーション開発にとっては、ライブラリが提供する Decorators を使用する程度にとどめておくのが、適切な関わり方なのではないかと思っています。</p>\n<p>この新しい Decorators に対してコミュニティがどのように向き合っていくのか、動向が気になるところです。</p>\n<h2>For Stage 2</h2>\n<h3><a href=\"https://github.com/tc39/proposal-pattern-matching\">Pattern Matcing</a></h3>\n<p><strong>Stage 2 に到達しませんでした</strong></p>\n<p>Pattern Matching は名前の通りパターンマッチを導入するためのプロポーザルです。</p>\n<p>現在の ECMAScript では正規表現を除き値のマッチングを行うことができません。\nまた、<code>switch</code> 文にはよく知られたいくつかの問題があります。</p>\n<ul>\n<li>式として使えない</li>\n<li>各 <code>case</code> に明示的な <code>break</code> で必要である</li>\n<li>各 <code>case</code> でスコープが曖昧である</li>\n<li>など</li>\n</ul>\n<p>Pattern Matching ではこれらの問題に対処するための新しい構文を導入します。</p>\n<p>例を示します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">match</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">when</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> status<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">handleData</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">,</span> rest<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">when</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> status<span class=\"token punctuation\">,</span> destination<span class=\"token operator\">:</span> url <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">300</span> <span class=\"token operator\">&#x3C;=</span> status <span class=\"token operator\">&#x26;&#x26;</span> status <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">handleRedirect</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">when</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> status<span class=\"token operator\">:</span> <span class=\"token number\">500</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hasRetried<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">retry</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hasRetried <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token function\">throwSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li><code>match</code> からはじまるブロック全体は match construct と呼ばれます。match construct 全体で一つの式として振る舞います。</li>\n<li><code>match(res)</code> の <code>res</code> は matchable と呼ばれます。matchable は任意の式です。</li>\n<li><code>when</code> や <code>default</code> で始まる部分を clause (句) と呼びます。clause は <code>:</code> で LHS と RHS に区切られます。\n<ul>\n<li>clause の LHS は <code>when</code> もしくは <code>default</code> で始まる必要があります。\n<ul>\n<li><code>when</code> clause は、<code>when</code> というキーワードのあとにカッコで囲まれた pattern を記述します。\n<ul>\n<li>カッコで囲まれた pattern のあとには <code>if</code> と条件式で構成された guard を記述することができます。pattern の表現力では不十分だった場合に guard を使ってさらなるロジックを記述できます。</li>\n</ul>\n</li>\n<li><code>default</code> clause は他のどの clause にもマッチしなかった場合にマッチします。\n<ul>\n<li><code>default</code> clause はなくても問題ありませんが、使う場合はからなず最後に置かなければいけません。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>clause の RHS は任意の式です。ブロックステートメント(<code>{ }</code>)を書くことはできません。なので、複雑なロジックを記述したいときは現在では即時実行関数を使う必要があります。将来的には、現在提案されている <a href=\"\">do expression</a> がここで役に立つでしょう。</li>\n</ul>\n</li>\n</ul>\n<p><code>when</code> clause に続く pattern では、実際にはもっと複雑なパターンを記述できます。(ref: <a href=\"https://github.com/tc39/proposal-pattern-matching#pattern\">https://github.com/tc39/proposal-pattern-matching#pattern</a>)</p>\n<p>Pattern Mathcing は JavaScript のコーディングスタイルを大きく変えうる強力な機能です。</p>\n<p>今回のミーティングでは仕様のテキストに懸念があり、時間内に Stage 2 に到達する合意は得られなかったようです。</p>\n<h2>For Stage 1</h2>\n<h3><a href=\"https://github.com/tc39/proposal-function-once\">Function.prototype.once</a></h3>\n<p><strong>Stage 1 に到達しました</strong></p>\n<ul>\n<li><a href=\"https://docs.google.com/presentation/d/1M0bzEEBZGfb_gIDVjIytbfYnLUhG7EN9iUTx6KJE2po/edit#slide=id.gfacc5909b0_0_5\">https://docs.google.com/presentation/d/1M0bzEEBZGfb_gIDVjIytbfYnLUhG7EN9iUTx6KJE2po/edit#slide=id.gfacc5909b0_0_5</a></li>\n</ul>\n<p><code>Function.prototype.once</code> は、<code>Function</code> に一度だけ呼び出されるような関数を作るためのインスタンスメソッドを導入するプロポーザルです。</p>\n<p>例を示します。関数 <code>f</code> は受け取った引数を出力し、それに2をかけた数を返す関数です。\nこのとき <code>f.once()</code> は、一度だけ <code>f</code> を呼び出す関数を返します。<code>f.once()</code> の返り値の関数を二度以上呼び出しても <code>f</code> が再度呼び出されることはなく、その返り値は最初の<code>f</code>の返り値となります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">f</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword control-flow\">return</span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> fOnce <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">once</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">fOnce</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// `3` が出力され、`6` が返される</span>\n<span class=\"token function\">fOnce</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 何も出力されず、`6` が返される</span>\n<span class=\"token function\">fOnce</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 何も出力されず、`6` が返される</span>\n</code></pre></div>\n<p><a href=\"https://github.com/tc39/proposal-function-once/tree/15c443d07d65fc0f20d4b17f3c11a78086029bc7#real-world-examples\">プロポーザルのリポジトリでは実用的なユースケースが紹介されています。</a></p>\n<h3><a href=\"https://github.com/tc39/proposal-type-annotations\">Type Annotations</a></h3>\n<p><strong>Stage 1 に到達しました</strong></p>\n<p>Type Annotations プロポーザルは、ECMAScript の仕様に TypeScript や Flow のような型の構文を導入するプロポーザルです。</p>\n<p>たとえば、次に示すような型注釈を含むコードが JavaScript のプログラムとして妥当になります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> foo<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span>param<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> param<span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>このプロポーザルでは ECMAScript に型チェックを導入するのではなく、あくまで型の構文だけを導入します。つまり型による静的チェックを行う場合はこれまで通り統合開発環境やTypeScript Compilerなどを使う必要があります。</p>\n<p>このプロポーザルについて以前記事を書いたので興味のある人はそちらも参照してください。</p>\n<p><div class=\"hatena-link\"><iframe class=\"hatena-link-frame\" src=\"https://hatenablog-parts.com/embed?url=https://sosukesuzuki.dev/posts/stage-1-type-annotations\" style=\"border: none;\"></iframe></div></p>\n<p>また、過去に Harajuku.ts という勉強会で <a href=\"https://twitter.com/uhyo_\">@uhyo_</a> さんと <a href=\"https://twitter.com/okunokentaro\">@okunokentaro</a> さんと議論したので興味のある人はそのときのアーカイブも御覧ください。</p>\n<p><a href=\"https://youtu.be/eS51szIxGTQ\">https://youtu.be/eS51szIxGTQ</a></p>\n<h2>Updates</h2>\n<p>ステージの移動はないものの更新が紹介された提案を列挙します。ここでは詳細については説明しませんがスライドや関連するIssueへのリンクを貼ったので興味のある人は参照してください。</p>\n<h3><a href=\"https://github.com/tc39/proposal-array-grouping\">Array Grouping</a></h3>\n<ul>\n<li><a href=\"https://github.com/tc39/proposal-array-grouping/issues/37\">https://github.com/tc39/proposal-array-grouping/issues/37</a></li>\n</ul>\n<h3><a href=\"https://github.com/tc39/proposal-resizablearraybuffer\">Resizable Array Buffer</a></h3>\n<ul>\n<li><a href=\"https://docs.google.com/presentation/d/1QBbEnfWn9QAn48J1SAm3l5xJARE5wcKt3MlTlcVKIek/edit#slide=id.p\">https://docs.google.com/presentation/d/1QBbEnfWn9QAn48J1SAm3l5xJARE5wcKt3MlTlcVKIek/edit#slide=id.p</a></li>\n</ul>\n<h3><a href=\"https://github.com/tc39/proposal-temporal\">Temporal</a></h3>\n<ul>\n<li><a href=\"http://ptomato.name/talks/tc39-2022-03/\">http://ptomato.name/talks/tc39-2022-03/</a></li>\n</ul>\n<h3><a href=\"https://github.com/tc39/proposal-shadowrealm\">Shadow Realms</a></h3>\n<ul>\n<li><a href=\"https://docs.google.com/presentation/d/1Juv36nUTfcvb_E2NUeAPGuToCCBWIX0NLObx_h5qDYU/edit#slide=id.p\">https://docs.google.com/presentation/d/1Juv36nUTfcvb_E2NUeAPGuToCCBWIX0NLObx_h5qDYU/edit#slide=id.p</a></li>\n</ul>\n<h3><a href=\"https://github.com/tc39/proposal-pipeline-operator\">Pipe Operator</a></h3>\n<ul>\n<li><a href=\"https://docs.google.com/presentation/d/1dDucwsW8qM22yWLr_NHFmAiAltQSht3AXYW00kET4GA/edit#slide=id.gfacc5909b0_0_5\">https://docs.google.com/presentation/d/1dDucwsW8qM22yWLr_NHFmAiAltQSht3AXYW00kET4GA/edit#slide=id.gfacc5909b0_0_5</a></li>\n</ul>\n<h3><a href=\"https://github.com/tc39/proposal-call-this\">Call-this operator</a></h3>\n<ul>\n<li><a href=\"https://docs.google.com/presentation/d/1-MLGCibETPX8NiIvNJ1xOxiMS-NB8GCbDGNcB5patiU/edit#slide=id.gfacc5909b0_0_5\">https://docs.google.com/presentation/d/1-MLGCibETPX8NiIvNJ1xOxiMS-NB8GCbDGNcB5patiU/edit#slide=id.gfacc5909b0_0_5</a></li>\n</ul>\n<h3><a href=\"https://github.com/tc39/proposal-string-dedent\">String.dedent</a></h3>\n<ul>\n<li><a href=\"https://docs.google.com/presentation/d/1fF4TqU6eLcj74s0wa1VSq5wGORSY1m1naekTNF9JAz4/edit#slide=id.gc6f73a04f_0_0\">https://docs.google.com/presentation/d/1fF4TqU6eLcj74s0wa1VSq5wGORSY1m1naekTNF9JAz4/edit#slide=id.gc6f73a04f_0_0</a></li>\n</ul>\n<h2>参考リンク</h2>\n<ul>\n<li>TC39\n<ul>\n<li><a href=\"https://github.com/tc39/agendas/blob/main/2022/03.md\">agendas/03.md at main · tc39/agendas</a></li>\n<li><a href=\"https://github.com/tc39/notes/blob/main/meetings/2022-03/mar-28.md\">notes/mar-28.md at main · tc39/notes</a></li>\n<li><a href=\"https://github.com/tc39/notes/blob/main/meetings/2022-03/mar-29.md\">notes/mar-29.md at main · tc39/notes</a></li>\n<li><a href=\"https://github.com/tc39/notes/blob/main/meetings/2022-03/mar-30.md\">notes/mar-30.md at main · tc39/notes</a></li>\n<li><a href=\"https://github.com/tc39/notes/blob/main/meetings/2022-03/mar-31.md\">notes/mar-31.md at main · tc39/notes</a></li>\n</ul>\n</li>\n<li>Babel\n<ul>\n<li><a href=\"https://github.com/babel/proposals/issues/81\">March 2022 · Issue #81 · babel/proposals</a></li>\n</ul>\n</li>\n<li>TypeScript\n<ul>\n<li><a href=\"https://github.com/microsoft/TypeScript/issues/49074\">TypeScript 4.8 Iteration Plan · Issue #49074 · microsoft/TypeScript</a></li>\n<li><a href=\"https://github.com/microsoft/TypeScript/issues/48885\">Implement the updated JS decorators proposal · Issue #48885 · microsoft/TypeScript</a></li>\n</ul>\n</li>\n<li>Unicode\n<ul>\n<li><a href=\"https://www.unicode.org/reports/tr18/\">UTS #18: Unicode Regular Expressions</a></li>\n<li><a href=\"https://util.unicode.org/UnicodeJsps/properties.jsp\">Unicode Utilities: Character Property Index</a></li>\n</ul>\n</li>\n</ul>\n","metaData":{"title":"ECMAScriptの最新動向 2022年03月版","author":"sosukesuzuki","createdAt":"2022-06-13","summary":"2022年03月28日~31日に開催された TC39 meeting 89th の内容を紹介します","tags":["TC39","ECMAScript"],"updatedAt":"2022-06-13"}},{"type":"markdown","href":"/posts/release-chrome-101","slug":"release-chrome-101","content":"<h1>Chrome101</h1>\n<p>Chrome 101 のリリースノート関連の情報をまとめました。</p>\n<p><a href=\"https://developer.chrome.com/blog/new-in-chrome-101/\">https://developer.chrome.com/blog/new-in-chrome-101/</a>\n<a href=\"https://developer.chrome.com/blog/new-in-devtools-101/\">https://developer.chrome.com/blog/new-in-devtools-101/</a>\n<a href=\"https://developer.chrome.com/blog/deps-rems-101/\">https://developer.chrome.com/blog/deps-rems-101/</a>\n<a href=\"https://www.chromestatus.com/features#milestone%3D101\">https://www.chromestatus.com/features#milestone%3D101</a></p>\n<h2>New In Chrome (Chrome 101)</h2>\n<p>Chrome101 で新しく追加された機能です。</p>\n<h3><code>hwb()</code> color notation</h3>\n<p>CSSの色指定方法として<code>hwb()</code>値がサポートされました。</p>\n<p>hwb() は、色相、白色度、黒色度にしたがって色を指定します。他の色表記と同様に、オプションのアルファ成分で不透明度を指定することもできます。以下の例では<code>#00c3ff</code>の色を50%透過度で指定しています。</p>\n<div class=\"remark-highlight\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">h1</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">hwb</span><span class=\"token punctuation\">(</span><span class=\"token number\">194</span> <span class=\"token number\">0</span><span class=\"token unit\">%</span> <span class=\"token number\">0</span><span class=\"token unit\">%</span> <span class=\"token operator\">/</span> <span class=\"token number\">.5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">/* #00c3ff with 50% opacity */</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>FireFoxではv96から、Safariではv15からこの<code>hwb()</code>値をサポートしているため、今回のChromeのサポートにより、多くのブラウザでこの記法が使えることになります。</p>\n<h3>Priority Hints</h3>\n<p>ブラウザがページ内リソース(<code>image</code>,<code>script</code>,<code>CSS</code>)を読み込む際の優先度ヒントを明示的に宣言できる<code>Priority Hints</code>機能がリリースされました。</p>\n<p>htmlで読み込みの優先度ヒントを書く場合は、<code>fetchpriority</code>属性に<code>high</code>,<code>low</code>,<code>auto</code>のいずれかを指定します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&#x3C;!-- 優先度 low で画像を読み込む場合 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/images/in_viewport_but_not_important.svg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">fetchpriority</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>low<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>I<span class=\"token punctuation\">'</span>m an unimportant image!<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<p>この機能はChrome96からOriginTrialとして試験的に実装されており、当時は<code>importance</code>属性を用いる方法をとっていましたが、Web標準化プロセスの中で、HTMLでは<code>fetchpriority</code>、JavaScriptのFetch APIでは<code>priority</code>というプロパティを利用するよう仕様が変更されました。</p>\n<p>優先度指定における細かい挙動やユースケースについては<a href=\"https://web.dev/priority-hints/\">Optimize resource loading with Priority Hints</a>を参照してください。</p>\n<h3>Also in this release</h3>\n<h4>USBDevice forget()</h4>\n<p><code>USBDevice</code>オブジェクトで<code>forgot()</code>メソッドがサポートされました。このメソッドでは以前許可されていたデバイスの登録を削除することができます。例えば多くのデバイスで共有されているコンピューターで使用されているアプリケーションなどでは有用です。</p>\n<h4>Web USB sameObject behavior</h4>\n<p><code>USBConfiguration</code>、<code>USBInterface</code>、<code>USBAlternateInterface</code>、<code>USBEndpoint</code> の4つのインスタンスが厳密な同値（<code>===</code>）なるのは、同じ<code>USBDevice</code>のアクセッサから取得した場合のみに変更されます。</p>\n<h4>Secure context fix for dedicated workers</h4>\n<p>全な(HTTPSの)Originからロードされていますが、安全でない(HTTPSでない)コンテキストでインスタンス化された専用ワーカーは安全だとはみなされなくなりました。</p>\n<p>具体的に上記のような状況において、以下のような変更が入ります</p>\n<ul>\n<li><code>self.isSecureContext</code>が<code>false</code>を返すようになる</li>\n<li><code>self.caches</code> と <code>self.storageFoundation</code> が使用できなくなる</li>\n</ul>\n<p>この修正により、上記のようなワーカーの挙動においてHTML標準やGeckoと互換性を持つようになりました。</p>\n<h4>Make 'true' a truthy value for window.open boolean features</h4>\n<p>chrome98から、<code>window.open()</code>に対し<code>popup=yes</code>または<code>popup=1</code>のように指定することで、ポップアップウィンドウで開くことをブラウザに要求することが出来るようになりました。</p>\n<p>このpopup値として<code>yes</code>,<code>1</code>などがサポートされていたものの、<code>true/false</code>がサポートされていなかったため、<code>popup=true</code>はpopupを開かないことを意味していました。</p>\n<p>このように<code>popup=true</code>がfalseとして評価されるのは直感に反しているため、Chrome101からは<code>popup=true</code>がtrueとして評価されるようになります。</p>\n<h2>What's New In DevTools (Chrome 101)</h2>\n<p>DevTools についてはこちらの日本語訳を参照ください。</p>\n<p><a href=\"https://developer.chrome.com/ja/blog/new-in-devtools-101/\">https://developer.chrome.com/ja/blog/new-in-devtools-101/</a></p>\n<h2>Deprecations and removals in Chrome 101</h2>\n<h3>Reduce user agent string information</h3>\n<p>ChromeではHTTPリクエストやnavigatorで利用されるUser-Agent文字列の削減に取り組んでいます。この取り組みはUser-Agent文字列がユーザーフィンガープリンティング(webブラウザからの情報だけで個人の情報を特定する技術)に利用されるのを防ぐために行われています。現在はOriginTrialとしてこれらの取り組みを進めています。</p>\n<h3>Remove WebSQL in third-party contexts</h3>\n<p>サードパーティーのコンテキストにおけるWebSQL機能を削除しました。Web SQL Database標準は2009年4月に提案され、2010年11月に放棄された標準で、FireFoxはこの機能を搭載せず、Safariも2019年から非推奨としています。またW3Cは代替手段として、Web StorageとIndexed Databaseを推奨しています。Chromeとしても使用率が十分に低くなった時点で完全に非推奨とし、削除する予定です。</p>\n<h2>その他 Chrome Platform Status に記載されていたもの</h2>\n<h3>MediaCapabilities API for WebRTC</h3>\n<p><code>MediaCapabilities API</code>でWebRTCストリームをサポートするようになりました。</p>\n<p><code>MediaCapabilities API</code>は、動画再生に使用できるコーデックや解像度などの情報を提供するAPIです。これらの情報によりwebアプリケーションは使用するコーデクなどがサポートされているかどうか、スムーズな再生が期待できるかどうかを判断できるようになります。</p>\n<p>今回のリリースからWebRTCストリームについての情報もこの<code>MediaCapabilities API</code>から取得できるようになります。この機能がない場合、アプリケーションが不必要に低い解像度やフレームレートを使用して品質が低下したり、クライアントが希望するフレームレートでストリームを処理できずスタッタリングが発生したりする可能性があります。</p>\n<h3>font-palette and custom @font-palette-values palettes</h3>\n<p>カラーフォントで利用するパレットを選択することができる、<code>font-palette</code> CSSプロパティがサポートされました。</p>\n<p>また<code>@font-palette-values</code>ルールを利用することで、ベースとなるカラーパレットを選択したり、カラーパレットの上書きなどができるようになります。</p>\n<p>ベースとなるカラーパレットを選択する例</p>\n<div class=\"remark-highlight\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@font-palette-values</span> <span class=\"token variable\">--Pinks</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> MultiColorFont<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">base-palette</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* パレットを番号で指定 */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\"><span class=\"token class\">.text-pink</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-palette</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">--Pinks</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* @font-palette-valuesで作成したパレットを指定 */</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>カラーパレットを上書きする例</p>\n<div class=\"remark-highlight\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@font-palette-values</span> <span class=\"token variable\">--SkyAndYellow</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> MultiColorFont<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">override-colors</span><span class=\"token punctuation\">:</span>　\n    <span class=\"token number\">0</span> <span class=\"token hexcode color\">#87dbe8</span><span class=\"token punctuation\">,</span> \n    <span class=\"token number\">1</span> <span class=\"token hexcode color\">#f7ca25</span><span class=\"token punctuation\">;</span>　<span class=\"token comment\">/* 対応する番号のカラーを上書き */</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>このように<code>font-palette</code> CSSプロパティのサポートは、すでにサポートしているCOLR/CPALカラーフォントの有用性を向上するものです。ダークモード対応をはじめとして、アイコンフォントをコンテンツの配色に合わせたいユースケースでこの機能はとても有用です。</p>\n","metaData":{"title":"Chrome 101 リリースノートまとめ","author":"Saji","editor":"nus3","createdAt":"2022-05-16","summary":"Chrome 101 のリリースノートの要約です","tags":["Releasenote","Browser"],"updatedAt":"2022-05-16"}},{"type":"markdown","href":"/posts/release-safari-15-4","slug":"release-safari-15-4","content":"<p>🔗 <a href=\"https://webkit.org/blog/12445/new-webkit-features-in-safari-15-4/\">https://webkit.org/blog/12445/new-webkit-features-in-safari-15-4/</a></p>\n<p>Safari 15.4 がリリースされました 🎉<br>\nこれまで Technology Preview として公開されていた様々な変更が含まれています。</p>\n<h2>HTML</h2>\n<ul>\n<li>遅延読み込みのための <code>lazy-loading</code> のサポート\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/Performance/Lazy_loading\">https://developer.mozilla.org/en-US/docs/Web/Performance/Lazy_loading</a></li>\n</ul>\n</li>\n<li><code>&#x3C;dialog></code> Element のサポート\n<ul>\n<li><a href=\"https://html.spec.whatwg.org/multipage/interactive-elements.html#the-dialog-element\">https://html.spec.whatwg.org/multipage/interactive-elements.html#the-dialog-element</a></li>\n</ul>\n</li>\n<li><code>::backdrop</code> 疑似要素のサポート\n<ul>\n<li><a href=\"https://developer.mozilla.org/ja/docs/Web/CSS/::backdrop\">https://developer.mozilla.org/ja/docs/Web/CSS/::backdrop</a></li>\n</ul>\n</li>\n<li><code>autofocus</code> 属性のサポート\n<ul>\n<li>dialog 表示時にどの要素にフォーカスをセットするかを指定できる</li>\n</ul>\n</li>\n</ul>\n<h2>CSS</h2>\n<h3>Features for CSS Architecture</h3>\n<ul>\n<li><code>:has()</code> のサポート (現状 Safari のみサポート)\n<ul>\n<li><a href=\"https://developer.mozilla.org/ja/docs/Web/CSS/:has\">https://developer.mozilla.org/ja/docs/Web/CSS/:has</a></li>\n</ul>\n</li>\n<li>CSS Cascade Layers のサポート\n<ul>\n<li>FEE チームの @nus3 が書いた CSS Cascade Layers の紹介エントリ: <a href=\"https://cybozu.github.io/frontend-expert/posts/css-cascade-layers\">https://cybozu.github.io/frontend-expert/posts/css-cascade-layers</a>)</li>\n</ul>\n</li>\n</ul>\n<h3>Solving Pain Points</h3>\n<ul>\n<li>主にモバイル向けに、viewport に応じた新しい値の指定が可能に\n<ul>\n<li><code>svh</code>, <code>svw</code> → メニューバーなどを除いた最小の viewport</li>\n<li><code>dvh</code>, <code>dvw</code> → スクロールによるメニューバーなどの表示切り替えに応じて変化する viewport</li>\n<li><code>lvh</code>, <code>lvw</code> → メニューバーなどが存在しない状態を想定した最大の viewport</li>\n<li><code>svmin</code>, <code>svmax</code>, <code>lvmin</code>, <code>lvmax</code>, <code>dvmin</code>, <code>dvmax</code> → <code>vw</code>, <code>vh</code>, <code>vmin</code>, <code>vmax</code> の上記 CSS 値版 (幅, 高さに対する割合指定)</li>\n</ul>\n</li>\n<li><code>:focus-visible</code> 疑似要素のサポート</li>\n<li><code>accent-color</code> プロパティのサポート\n<ul>\n<li>checkbox, radio, progress, select, datalist (iPad OS と iOS のみ range, button) にアクセントカラー指定が可能になる</li>\n</ul>\n</li>\n<li><code>calc()</code> 数学関数のサポート</li>\n</ul>\n<h3>Typography</h3>\n<ul>\n<li><code>font-palette</code> と <code>@font-palette-values</code> CSS プロパティのサポート\n<ul>\n<li>カラーフォントに含まれるパレットの指定と、カラーパレットの独自定義</li>\n</ul>\n</li>\n<li><code>text-decoration-skip-ink</code> CSS プロパティのサポート\n<ul>\n<li>text-decoration (underline とか)を文字に被らず表示できる</li>\n</ul>\n</li>\n<li><code>ic</code> 単位のサポート\n<ul>\n<li><code>1ic</code> が <code>水</code> の文字の幅と同等になる</li>\n</ul>\n</li>\n</ul>\n<h3>Retiring WebKit prefixes</h3>\n<ul>\n<li><code>-webkit</code> vendor prefix の付与が必要だった様々なプロパティが廃止。また、廃止に伴い prefix 不要で利用可能なプロパティのサポート追加\n<ul>\n<li><code>appearance</code></li>\n<li><code>mask</code></li>\n<li><code>backface-visibility</code></li>\n<li><code>text-combine-upright</code></li>\n<li><code>print-color-adjust</code></li>\n<li><code>match-parent</code> (<code>text-align</code> プロパティに指定可能な値)</li>\n<li>削除: <code>-webkit-border-fit</code>, <code>-webkit-margin-collapse</code>, <code>-webkit-margin-top-collapse</code>, <code>-webkit-margin-bottom-collapse</code>, <code>-webkit-margin-before-collapse</code>, <code>-webkit-margin-after-collapse</code>, <code>-webkit-background-composite</code></li>\n</ul>\n</li>\n</ul>\n<h2>Web APIs</h2>\n<ul>\n<li>BroadcastCannel のサポート\n<ul>\n<li><a href=\"https://html.spec.whatwg.org/multipage/web-messaging.html#broadcasting-to-other-browsing-contexts\">https://html.spec.whatwg.org/multipage/web-messaging.html#broadcasting-to-other-browsing-contexts</a></li>\n<li>タブ、ウィンドウ、iframe, worker の相互通信が可能になる</li>\n</ul>\n</li>\n<li>Web Locks API のサポート\n<ul>\n<li><a href=\"https://w3c.github.io/web-locks/\">https://w3c.github.io/web-locks/</a></li>\n<li>タブ、ウィンドウ、iframe, worker 間でリソースのロックコントロールを行う</li>\n</ul>\n</li>\n<li><code>scroll-behavior</code> または <code>window.scroll()</code>, <code>window.scrollTo()</code>, <code>window.scrollBy()</code> の <code>behivior</code> オプションでスクロール制御を可能に</li>\n<li><code>ResizeObserver API</code> で <code>ResizeObserverSize</code> インタフェースのサポート\n<ul>\n<li>対象要素の <code>box-sizing</code> プロパティの変更を監視可能に</li>\n</ul>\n</li>\n<li><code>structuredClone</code> のサポート\n<ul>\n<li>DeepClone</li>\n<li>Chrome/Edge/Firefox/Safari のすべてがサポートされました 🎉</li>\n</ul>\n</li>\n<li><code>Origin Private File System</code> のサポート\n<ul>\n<li>詳細はこちら: <a href=\"https://webkit.org/blog/12257/the-file-system-access-api-with-origin-private-file-system/\">https://webkit.org/blog/12257/the-file-system-access-api-with-origin-private-file-system/</a></li>\n</ul>\n</li>\n</ul>\n<h2>JavaScript</h2>\n<ul>\n<li><code>findLast()</code>, <code>findLastIndex()</code> メソッドのサポート</li>\n<li><code>at()</code> のサポート</li>\n<li><code>Object.hasOwn()</code> のサポート</li>\n</ul>\n<h3>Internationalization</h3>\n<ul>\n<li><code>Intl Enumeration API</code> (<a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Intl\">https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Intl</a>) の強化\n<ul>\n<li><code>Intl.Locale</code> で、暦週・書く方向・12h/24h のサイクル・番号システムといった情報を取得可能になった</li>\n<li><code>Intl.DisplayNames</code> で calendar・dateTimeField のサポート追加および languageDisplay オプションのサポート</li>\n<li><code>Intl.PluralRules</code> に <code>selectRange()</code> メソッドの追加\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/selectRange\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/selectRange</a></li>\n<li><a href=\"https://unicode-org.github.io/cldr-staging/charts/37/supplemental/language_plural_rules.html#rules\">https://unicode-org.github.io/cldr-staging/charts/37/supplemental/language_plural_rules.html#rules</a> に従い、数値の複数形のルールを示す文字列を得る</li>\n</ul>\n</li>\n<li><code>Intl.NumberFormat</code> に <code>formatRange()</code> と <code>formatRangeToParts()</code> メソッドの追加\n<ul>\n<li>数値範囲を示す文字列にフォーマットする</li>\n</ul>\n</li>\n<li><code>Intl.DateTimeFormat</code> に 複数の <code>timeZoneName</code> オプションの追加</li>\n</ul>\n</li>\n</ul>\n<h2>Web Apps</h2>\n<ul>\n<li>Web App Manifest 周りのアップデート (≒ PWA 絡みでのアップデート)\n<ul>\n<li>Manifest ファイルをページロード時に常にフェッチするようになる</li>\n<li>Manifest ファイルでのアイコン宣言のサポート\n<ul>\n<li><code>purpose</code> 指定に応じて <code>apple-touch-icon</code> 以外のアイコンを利用する</li>\n</ul>\n</li>\n<li>ServiceWorker で Navigation Preload が使えるように\n<ul>\n<li>ServiceWorker の起動時のブロッキングを回避できるように</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>Media</h2>\n<ul>\n<li>WebRTC negotiation API が WebRTC 1.0 仕様に準拠</li>\n<li>in-band chapter tracks のサポート\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/TextTrack/kind\">https://developer.mozilla.org/en-US/docs/Web/API/TextTrack/kind</a></li>\n</ul>\n</li>\n<li><code>&#x3C;video></code> で <code>requestVideoFrameCallback()</code> のサポート追加\n<ul>\n<li>ビデオフレームの表示可能タイミングでのコールバックとメタデータ受け取りが可能になる</li>\n</ul>\n</li>\n</ul>\n<h2>Privacy</h2>\n<ul>\n<li>Private Click Measurement (<a href=\"https://webkit.org/blog/11940/pcm-click-fraud-prevention-and-attribution-sent-to-advertiser/\">https://webkit.org/blog/11940/pcm-click-fraud-prevention-and-attribution-sent-to-advertiser/</a>) 周りで幾つかのアップデート</li>\n</ul>\n<h2>Security</h2>\n<ul>\n<li>Inline Script / Style / eval などでリソースがブロックされた場合のレポートが Web 標準にあわせて更新</li>\n<li>XSS 対策機能の XSS Auditor サポート削除 (CSP や COEP で代替)</li>\n</ul>\n<h2>WKWebView</h2>\n<ul>\n<li>iOS, iPadOS, macOS 上のアプリケーションの場合、FullScreen API 利用の制御が可能になった</li>\n<li>iPadOS で Media Source Extensions を利用するコンテンツが動作するようになった\n<ul>\n<li><a href=\"https://developer.mozilla.org/ja/docs/Web/API/Media_Source_Extensions_API\">https://developer.mozilla.org/ja/docs/Web/API/Media_Source_Extensions_API</a></li>\n</ul>\n</li>\n</ul>\n<h2>Safari Web Extensions</h2>\n<ul>\n<li>クロスブラウザでの拡張機能サポートに伴う <code>manifest_version 3</code> のサポートなど\n<ul>\n<li>バックグラウンドスクリプトで <code>service_worker</code> のサポート</li>\n<li><code>browser.scripting</code> によるスクリプトとスタイルのインジェクション</li>\n<li><code>browser.declarativeNetRequest</code> を介したネットワークリクエストの動的ルールやセッションルール</li>\n<li><code>externally_connectable:matches</code> による、Web ページから拡張機能へのメッセージング</li>\n</ul>\n</li>\n</ul>\n<h2>Web Inspector</h2>\n<ul>\n<li>CSS Cascade Layer サポート追加に伴い、Web Inspector 上で <code>@layer</code> ルールセットが確認可能になった</li>\n<li>Flexbox および Grid で、視覚的なコントロールの追加</li>\n<li>Style パネルでのプロパティや値の変更時の自動補完の強化</li>\n<li>CSS 表示の改善。未使用の継承値の非表示や、フィルタによる検索、種類でのグループ化など</li>\n</ul>\n<hr>\n<p><code>&#x3C;dialog></code> のサポートや <code>:focus-visible</code> などは身近な感じがありますね。</p>\n<p>また、Web Extensions で manifest_version 3 のサポートが強化されたことで、クロスブラウザ向けのブラウザ拡張で Safari も含めやすくなるかもしれません。</p>\n","metaData":{"title":"Safari 15.4 リリースノートまとめ | dialog Element や lazy-loading, CSS Cascade Layers サポートなど","author":"mugi","createdAt":"2022-03-25","summary":"New WebKit Features in Safari 15.4 のリリースノートのまとめです","tags":["Releasenote","Browser"],"updatedAt":"2022-03-25"}}],"totalPage":4,"pageNum":1},"__N_SSG":true}
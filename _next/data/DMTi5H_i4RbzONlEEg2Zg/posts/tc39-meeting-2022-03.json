{"pageProps":{"post":{"slug":"tc39-meeting-2022-03","content":"<p>この記事では2022年03月28日~31日に開催された TC39 meeting 89th で議題に上がったプロポーザルを紹介します。</p>\n<h2>For Stage 4</h2>\n<p>For Stage 4 の提案はありませんでした。</p>\n<h2>For Stage 3</h2>\n<h3><a href=\"https://github.com/tc39/proposal-regexp-v-flag\">RegExp set notation + Unicode properties of strings</a></h3>\n<p><strong>Stage 3 に到達しました</strong></p>\n<p>このプロポーザルは正規表現に新しく<code>v</code>フラグを導入し、その中で set notation と Unicode properties of strings を使えるようにします。\n(翻訳するとしたら set notation は「集合の表記」、properties of strings は「文字列プロパティ」でしょうか。定訳がわからないのでこの記事ではこれらの用語を英語のまま表記します。)</p>\n<p>まず、set notation とは次のような記法のことです。\n(<code>A</code> や <code>B</code> は character class (<code>[a-z]</code>など) もしくは Unicode property escape (<code>\\p{ASCII}</code>など) とします)</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">// 差(difference/subtraction)\n[A--B]\n\n// 共通部分(intersection)\n[A&#x26;amp;&#x26;amp;B]\n\n// nested character class\n[A--[0-9]]</code></pre></div>\n<p><a href=\"https://github.com/tc39/proposal-regexp-v-flag#illustrative-examples\">プロポーザルのリポジトリでは実用的なユースケースが紹介されています。</a></p>\n<p>次に Unicode properties of strings は、domain が character や code point ではなく string (character の sequence) であるような Unicode property のことです。\n(Unicode の property については Unicode の <a href=\"https://www.unicode.org/reports/tr18/#Categories\">UTS18</a> の Properties を読むのがわかりやすいと思います)</p>\n<p>このプロポーザルの中では次の property of string がサポートされるようです。(ref: <a href=\"https://github.com/tc39/ecma262/pull/2418/files#diff-00f81a4e81713d00d0ebd710c18a798b699d244361ceb04fecbb06db6b32e8ba\">https://github.com/tc39/ecma262/pull/2418/files#diff-00f81a4e81713d00d0ebd710c18a798b699d244361ceb04fecbb06db6b32e8ba</a>)<br>\n(見たところどれも Binary のものしかありませんが、今後他の datatype のものも追加されるかどうかはわかりません)</p>\n<ul>\n<li><code>Basic_Emoji</code></li>\n<li><code>Emoji_Keycap_Sequence</code></li>\n<li><code>RGI_Emoji_Modifier_Sequence</code></li>\n<li><code>RGI_Emoji_Flag_Sequence</code></li>\n<li><code>RGI_Emoji_Tag_Sequence</code></li>\n<li><code>RGI_Emoji_ZWJ_Sequence</code></li>\n<li><code>RGI_Emoji</code></li>\n</ul>\n<p>これによって複数の code point からなる Emoji に対して Unicode property escape を使ってマッチさせられるようです。</p>\n<p>(Unicode についてはあまり詳しくないので記述について誤りを見つけた人は教えてほしいです。)</p>\n<p>ちなみに Unicode properties of strings はもともとは<a href=\"https://github.com/tc39/proposal-regexp-unicode-sequence-properties\">別のプロポーザル</a>でしたが、2021年5月にこのプロポーザルにマージされました。</p>\n<h3><a href=\"https://github.com/tc39/proposal-change-array-by-copy\">Change Array by Copy</a></h3>\n<p><strong>Stage 3 に到達しました</strong></p>\n<p>Change Array by Copy は Array と TypedArray にいくつかのイミュータブルなメソッドを追加するプロポーザルです。</p>\n<p>以前この提案について記事を書いたのでより深く知りたい場合はそちらも参照してください(この記事は約1年前に書かれたものなので、現在提案されている仕様とは異なる部分があります)。</p>\n<p><div class=\"hatena-link\"><iframe class=\"hatena-link-frame\" src=\"https://hatenablog-parts.com/embed?url=https://sosukesuzuki.dev/posts/change-array-by-copy\" style=\"border: none;\"></iframe></div></p>\n<p>このプロポーザルについての議論では、新たに追加されるメソッドをどのように命名するかが主な論点にあがっていました。</p>\n<p>現在では次のような <code>with</code> + <code>メソッド名の過去形(過去分詞形?)</code> という形で落ち着いたようです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ミュータブルなメソッド</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// イミュータブルなメソッド</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">withReversed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これらのメソッドは便利な一方、配列をコピーして返すため配列の要素数に応じて発生するオーバーヘッドを考慮して使う必要があります。</p>\n<h3><a href=\"https://github.com/tc39/proposal-decorators\">Decorators</a></h3>\n<p><strong>Stage 3 に到達しました</strong></p>\n<p>Decorators はクラスを拡張するための構文を導入するプロポーザルです。</p>\n<p>このプロポーザルは5年以上に渡って議論が行われてきた上、TypeScript によって早期からサポートされていたため開発者に広く認知されています。</p>\n<p>ミーティングで使われたスライドの冒頭では</p>\n<blockquote>\n<p>What is a decorator?\nDecorators are <em>functions</em> which have four main capabilities when applied to a class or class element</p>\n<ul>\n<li>Replacement</li>\n<li>Initialization</li>\n<li>Metadata</li>\n<li>Access</li>\n</ul>\n</blockquote>\n<p>と説明されています。</p>\n<p>ちなみに現在 TypeScript に実装されている Decorators は現在の TC39 の Decorators とは異なるものです。<a href=\"https://github.com/microsoft/TypeScript/issues/49074\">TypeScript 4.8 で TC39 の Decorators を実装することが検討されています。</a></p>\n<p>筆者としては、Decorators はコードを書くときの体験を大きく変えうる機能である一方で、複雑で厄介なコードを生み出す可能性も高い機能だと考えています。\nしたがって一般的な Web アプリケーション開発にとっては、ライブラリが提供する Decorators を使用する程度にとどめておくのが、適切な関わり方なのではないかと思っています。</p>\n<p>この新しい Decorators に対してコミュニティがどのように向き合っていくのか、動向が気になるところです。</p>\n<h2>For Stage 2</h2>\n<h3><a href=\"https://github.com/tc39/proposal-pattern-matching\">Pattern Matcing</a></h3>\n<p><strong>Stage 2 に到達しませんでした</strong></p>\n<p>Pattern Matching は名前の通りパターンマッチを導入するためのプロポーザルです。</p>\n<p>現在の ECMAScript では正規表現を除き値のマッチングを行うことができません。\nまた、<code>switch</code> 文にはよく知られたいくつかの問題があります。</p>\n<ul>\n<li>式として使えない</li>\n<li>各 <code>case</code> に明示的な <code>break</code> で必要である</li>\n<li>各 <code>case</code> でスコープが曖昧である</li>\n<li>など</li>\n</ul>\n<p>Pattern Matching ではこれらの問題に対処するための新しい構文を導入します。</p>\n<p>例を示します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">match</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">when</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> status<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">handleData</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">,</span> rest<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">when</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> status<span class=\"token punctuation\">,</span> destination<span class=\"token operator\">:</span> url <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">300</span> <span class=\"token operator\">&#x3C;=</span> status <span class=\"token operator\">&#x26;&#x26;</span> status <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">handleRedirect</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">when</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> status<span class=\"token operator\">:</span> <span class=\"token number\">500</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hasRetried<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">retry</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hasRetried <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token function\">throwSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li><code>match</code> からはじまるブロック全体は match construct と呼ばれます。match construct 全体で一つの式として振る舞います。</li>\n<li><code>match(res)</code> の <code>res</code> は matchable と呼ばれます。matchable は任意の式です。</li>\n<li><code>when</code> や <code>default</code> で始まる部分を clause (句) と呼びます。clause は <code>:</code> で LHS と RHS に区切られます。\n<ul>\n<li>clause の LHS は <code>when</code> もしくは <code>default</code> で始まる必要があります。\n<ul>\n<li><code>when</code> clause は、<code>when</code> というキーワードのあとにカッコで囲まれた pattern を記述します。\n<ul>\n<li>カッコで囲まれた pattern のあとには <code>if</code> と条件式で構成された guard を記述することができます。pattern の表現力では不十分だった場合に guard を使ってさらなるロジックを記述できます。</li>\n</ul>\n</li>\n<li><code>default</code> clause は他のどの clause にもマッチしなかった場合にマッチします。\n<ul>\n<li><code>default</code> clause はなくても問題ありませんが、使う場合はからなず最後に置かなければいけません。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>clause の RHS は任意の式です。ブロックステートメント(<code>{ }</code>)を書くことはできません。なので、複雑なロジックを記述したいときは現在では即時実行関数を使う必要があります。将来的には、現在提案されている <a href=\"\">do expression</a> がここで役に立つでしょう。</li>\n</ul>\n</li>\n</ul>\n<p><code>when</code> clause に続く pattern では、実際にはもっと複雑なパターンを記述できます。(ref: <a href=\"https://github.com/tc39/proposal-pattern-matching#pattern\">https://github.com/tc39/proposal-pattern-matching#pattern</a>)</p>\n<p>Pattern Mathcing は JavaScript のコーディングスタイルを大きく変えうる強力な機能です。</p>\n<p>今回のミーティングでは仕様のテキストに懸念があり、時間内に Stage 2 に到達する合意は得られなかったようです。</p>\n<h2>For Stage 1</h2>\n<h3><a href=\"https://github.com/tc39/proposal-function-once\">Function.prototype.once</a></h3>\n<p><strong>Stage 1 に到達しました</strong></p>\n<ul>\n<li><a href=\"https://docs.google.com/presentation/d/1M0bzEEBZGfb_gIDVjIytbfYnLUhG7EN9iUTx6KJE2po/edit#slide=id.gfacc5909b0_0_5\">https://docs.google.com/presentation/d/1M0bzEEBZGfb_gIDVjIytbfYnLUhG7EN9iUTx6KJE2po/edit#slide=id.gfacc5909b0_0_5</a></li>\n</ul>\n<p><code>Function.prototype.once</code> は、<code>Function</code> に一度だけ呼び出されるような関数を作るためのインスタンスメソッドを導入するプロポーザルです。</p>\n<p>例を示します。関数 <code>f</code> は受け取った引数を出力し、それに2をかけた数を返す関数です。\nこのとき <code>f.once()</code> は、一度だけ <code>f</code> を呼び出す関数を返します。<code>f.once()</code> の返り値の関数を二度以上呼び出しても <code>f</code> が再度呼び出されることはなく、その返り値は最初の<code>f</code>の返り値となります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">f</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword control-flow\">return</span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> fOnce <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">once</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">fOnce</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// `3` が出力され、`6` が返される</span>\n<span class=\"token function\">fOnce</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 何も出力されず、`6` が返される</span>\n<span class=\"token function\">fOnce</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 何も出力されず、`6` が返される</span>\n</code></pre></div>\n<p><a href=\"https://github.com/tc39/proposal-function-once/tree/15c443d07d65fc0f20d4b17f3c11a78086029bc7#real-world-examples\">プロポーザルのリポジトリでは実用的なユースケースが紹介されています。</a></p>\n<h3><a href=\"https://github.com/tc39/proposal-type-annotations\">Type Annotations</a></h3>\n<p><strong>Stage 1 に到達しました</strong></p>\n<p>Type Annotations プロポーザルは、ECMAScript の仕様に TypeScript や Flow のような型の構文を導入するプロポーザルです。</p>\n<p>たとえば、次に示すような型注釈を含むコードが JavaScript のプログラムとして妥当になります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> foo<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span>param<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> param<span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>このプロポーザルでは ECMAScript に型チェックを導入するのではなく、あくまで型の構文だけを導入します。つまり型による静的チェックを行う場合はこれまで通り統合開発環境やTypeScript Compilerなどを使う必要があります。</p>\n<p>このプロポーザルについて以前記事を書いたので興味のある人はそちらも参照してください。</p>\n<p><div class=\"hatena-link\"><iframe class=\"hatena-link-frame\" src=\"https://hatenablog-parts.com/embed?url=https://sosukesuzuki.dev/posts/stage-1-type-annotations\" style=\"border: none;\"></iframe></div></p>\n<p>また、過去に Harajuku.ts という勉強会で <a href=\"https://twitter.com/uhyo_\">@uhyo_</a> さんと <a href=\"https://twitter.com/okunokentaro\">@okunokentaro</a> さんと議論したので興味のある人はそのときのアーカイブも御覧ください。</p>\n<p><a href=\"https://youtu.be/eS51szIxGTQ\">https://youtu.be/eS51szIxGTQ</a></p>\n<h2>Updates</h2>\n<p>ステージの移動はないものの更新が紹介された提案を列挙します。ここでは詳細については説明しませんがスライドや関連するIssueへのリンクを貼ったので興味のある人は参照してください。</p>\n<h3><a href=\"https://github.com/tc39/proposal-array-grouping\">Array Grouping</a></h3>\n<ul>\n<li><a href=\"https://github.com/tc39/proposal-array-grouping/issues/37\">https://github.com/tc39/proposal-array-grouping/issues/37</a></li>\n</ul>\n<h3><a href=\"https://github.com/tc39/proposal-resizablearraybuffer\">Resizable Array Buffer</a></h3>\n<ul>\n<li><a href=\"https://docs.google.com/presentation/d/1QBbEnfWn9QAn48J1SAm3l5xJARE5wcKt3MlTlcVKIek/edit#slide=id.p\">https://docs.google.com/presentation/d/1QBbEnfWn9QAn48J1SAm3l5xJARE5wcKt3MlTlcVKIek/edit#slide=id.p</a></li>\n</ul>\n<h3><a href=\"https://github.com/tc39/proposal-temporal\">Temporal</a></h3>\n<ul>\n<li><a href=\"http://ptomato.name/talks/tc39-2022-03/\">http://ptomato.name/talks/tc39-2022-03/</a></li>\n</ul>\n<h3><a href=\"https://github.com/tc39/proposal-shadowrealm\">Shadow Realms</a></h3>\n<ul>\n<li><a href=\"https://docs.google.com/presentation/d/1Juv36nUTfcvb_E2NUeAPGuToCCBWIX0NLObx_h5qDYU/edit#slide=id.p\">https://docs.google.com/presentation/d/1Juv36nUTfcvb_E2NUeAPGuToCCBWIX0NLObx_h5qDYU/edit#slide=id.p</a></li>\n</ul>\n<h3><a href=\"https://github.com/tc39/proposal-pipeline-operator\">Pipe Operator</a></h3>\n<ul>\n<li><a href=\"https://docs.google.com/presentation/d/1dDucwsW8qM22yWLr_NHFmAiAltQSht3AXYW00kET4GA/edit#slide=id.gfacc5909b0_0_5\">https://docs.google.com/presentation/d/1dDucwsW8qM22yWLr_NHFmAiAltQSht3AXYW00kET4GA/edit#slide=id.gfacc5909b0_0_5</a></li>\n</ul>\n<h3><a href=\"https://github.com/tc39/proposal-call-this\">Call-this operator</a></h3>\n<ul>\n<li><a href=\"https://docs.google.com/presentation/d/1-MLGCibETPX8NiIvNJ1xOxiMS-NB8GCbDGNcB5patiU/edit#slide=id.gfacc5909b0_0_5\">https://docs.google.com/presentation/d/1-MLGCibETPX8NiIvNJ1xOxiMS-NB8GCbDGNcB5patiU/edit#slide=id.gfacc5909b0_0_5</a></li>\n</ul>\n<h3><a href=\"https://github.com/tc39/proposal-string-dedent\">String.dedent</a></h3>\n<ul>\n<li><a href=\"https://docs.google.com/presentation/d/1fF4TqU6eLcj74s0wa1VSq5wGORSY1m1naekTNF9JAz4/edit#slide=id.gc6f73a04f_0_0\">https://docs.google.com/presentation/d/1fF4TqU6eLcj74s0wa1VSq5wGORSY1m1naekTNF9JAz4/edit#slide=id.gc6f73a04f_0_0</a></li>\n</ul>\n<h2>参考リンク</h2>\n<ul>\n<li>TC39\n<ul>\n<li><a href=\"https://github.com/tc39/agendas/blob/main/2022/03.md\">agendas/03.md at main · tc39/agendas</a></li>\n<li><a href=\"https://github.com/tc39/notes/blob/main/meetings/2022-03/mar-28.md\">notes/mar-28.md at main · tc39/notes</a></li>\n<li><a href=\"https://github.com/tc39/notes/blob/main/meetings/2022-03/mar-29.md\">notes/mar-29.md at main · tc39/notes</a></li>\n<li><a href=\"https://github.com/tc39/notes/blob/main/meetings/2022-03/mar-30.md\">notes/mar-30.md at main · tc39/notes</a></li>\n<li><a href=\"https://github.com/tc39/notes/blob/main/meetings/2022-03/mar-31.md\">notes/mar-31.md at main · tc39/notes</a></li>\n</ul>\n</li>\n<li>Babel\n<ul>\n<li><a href=\"https://github.com/babel/proposals/issues/81\">March 2022 · Issue #81 · babel/proposals</a></li>\n</ul>\n</li>\n<li>TypeScript\n<ul>\n<li><a href=\"https://github.com/microsoft/TypeScript/issues/49074\">TypeScript 4.8 Iteration Plan · Issue #49074 · microsoft/TypeScript</a></li>\n<li><a href=\"https://github.com/microsoft/TypeScript/issues/48885\">Implement the updated JS decorators proposal · Issue #48885 · microsoft/TypeScript</a></li>\n</ul>\n</li>\n<li>Unicode\n<ul>\n<li><a href=\"https://www.unicode.org/reports/tr18/\">UTS #18: Unicode Regular Expressions</a></li>\n<li><a href=\"https://util.unicode.org/UnicodeJsps/properties.jsp\">Unicode Utilities: Character Property Index</a></li>\n</ul>\n</li>\n</ul>\n","metaData":{"title":"ECMAScriptの最新動向 2022年03月版","author":"sosukesuzuki","createdAt":"2022-06-13","summary":"2022年03月28日~31日に開催された TC39 meeting 89th の内容を紹介します","tags":["TC39","ECMAScript"],"updatedAt":"2022-06-13"}}},"__N_SSG":true}
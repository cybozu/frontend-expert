{"pageProps":{"posts":[{"slug":"release-chrome-102","content":"<h1>Chrome 102</h1>\n<p>Chrome 102 のリリースノート関連の情報をまとめました。</p>\n<ul>\n<li><a href=\"https://developer.chrome.com/blog/new-in-chrome-102/\">https://developer.chrome.com/blog/new-in-chrome-102/</a></li>\n<li><a href=\"https://developer.chrome.com/blog/new-in-devtools-102/\">https://developer.chrome.com/blog/new-in-devtools-102/</a></li>\n<li><a href=\"https://developer.chrome.com/blog/deps-rems-102/\">https://developer.chrome.com/blog/deps-rems-102/</a></li>\n<li><a href=\"https://www.chromestatus.com/features#milestone%3D102\">https://www.chromestatus.com/features#milestone%3D102</a></li>\n<li><a href=\"https://v8.dev/blog/v8-release-102\">https://v8.dev/blog/v8-release-102</a></li>\n</ul>\n<h2>New In Chrome (Chrome102)</h2>\n<p>Chrome102 で新しく追加された機能です。</p>\n<h3>File Handling API</h3>\n<p>PWA に MIME タイプや拡張子を紐づけることができる File Handling API がサポートされました。</p>\n<p>PWA のマニフェストに関連づけたい MIME タイプや拡張子を設定することで、Mac だと「このアプリケーションで開く」の候補に PWA のアプリケーションが選択できるようになります。</p>\n<p>参考: Let installed web applications be file handlers</p>\n<p><a href=\"https://web.dev/file-handling/\">https://web.dev/file-handling/</a></p>\n<h3>The inert property</h3>\n<p><code>inert</code>プロパティは、グローバルな HTML 属性です。<code>inert</code>属性のついた要素は、フォーカスイベントや支援技術からのイベントなど、ユーザー入力イベントを無視します。</p>\n<p><code>inert</code>属性はモーダルダイアログやドロワーなどの UI パーツを作成するのに便利です。モーダルダイアログでは、モーダルが表示されている間、フォーカスをモーダル内に限定したくなりますが、これはモーダル外の要素に<code>inert</code>属性をつけることで実現できます。また、ユーザーから常に見えるわけではないドロワーでは、開閉時に<code>inert</code>属性を切り替えることで、「画面外にあるドロワーを誤ってキーボードで操作してしまう」ような誤作動を防止できます。</p>\n<p><code>inert</code>属性の利用例です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Button 1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>label</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>inertではない<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>div</span> <span class=\"token attr-name\">inert</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Button 2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>label</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>inertである<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<p>この例では二つ目の<code>div</code>に<code>inert</code>属性を付与しています。そのため内包された<code>&#x3C;label></code>要素や<code>&#x3C;button></code>要素はフォーカスやクリックできない要素になります。</p>\n<p><code>inert</code>属性は Chrome では 102 からサポートされますが、FireFox や Safari でも同様にサポートされる予定です。(執筆現在、Safari は 15.5 から、FireFox は Nightly で利用可能です。)</p>\n<h3>Navigation API</h3>\n<p>近年の多く見られる SPA で作られたアプリでは、ページ移動なしで URL を更新します。この挙動を実現するため、一般的に<code>History API</code>が利用されますが、<code>History API</code>ではうまく用件を満たせないことや、動作がわかりにくくなることがあります。</p>\n<p>このような History API の問題点をカバーするべく作られた API 仕様が Navigation API です。</p>\n<h4>利用方法</h4>\n<p>Navigation API を使用するには、グローバルに生えた<code>navigation</code>オブジェクトに navigate リスナーを追加します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\">navigation<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'navigate'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">navigateEvent</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">switch</span> <span class=\"token punctuation\">(</span>navigateEvent<span class=\"token punctuation\">.</span><span class=\"token property-access\">destination</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'https://example.com/'</span><span class=\"token operator\">:</span>\n      navigateEvent<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">transitionWhile</span><span class=\"token punctuation\">(</span><span class=\"token function\">loadIndexPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword control-flow\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'https://example.com/cats'</span><span class=\"token operator\">:</span>\n      navigateEvent<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">transitionWhile</span><span class=\"token punctuation\">(</span><span class=\"token function\">loadCatsPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword control-flow\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>ナビゲーションイベントは、<code>navigate</code>リスナーによって一元化されており、以下のような条件の有無に関わらずあらゆるタイプのナビゲーションイベントで発火します。</p>\n<ul>\n<li>フォームを送信したかどうか</li>\n<li>戻る・進むアクションによる遷移か</li>\n<li>プログラムによって引き起こされたものかどうか</li>\n</ul>\n<p>その上で、ほとんどの遷移に関するアクションに対して、デフォルトの動作を上書きすることができます。</p>\n<p>詳細に関しては<a href=\"https://developer.chrome.com/docs/web-platform/navigation-api/\">Modern client-side routing: the Navigation API</a>をご覧ください。</p>\n<h3>And more!</h3>\n<ul>\n<li>ページ内検索等でヒットするまで表示されない<code>hidden=unfil-found</code>の指定ができるようになります</li>\n</ul>\n<h2>What's New In DevTools (Chrome 102)</h2>\n<p>DevTools についてはこちらの日本語訳を参照ください。</p>\n<p><a href=\"https://developer.chrome.com/ja/blog/new-in-devtools-102/\">https://developer.chrome.com/ja/blog/new-in-devtools-102/</a></p>\n<h2>Deprecations and removals in Chrome 102</h2>\n<h3>Deprecate PaymentRequest.show() without User Activation</h3>\n<p>ユーザーのアクティベーションなしに<code>PaymentRequest.show()</code>を実行できなくなりました。</p>\n<p><code>PaymentRequest.show()</code>はクリックなどのユーザーイベント内で行う必要があります。</p>\n<h3>Remove SDP Plan B</h3>\n<p>WebRTC でセッションを確立するために使用される <code>Session Description Protocol</code> (SDP) は、Chromium 上で<code>Unified Plan</code>と<code>Plan B</code>という 2 種類の異なる実装が存在しています。\n<code>Plan B</code>はクロスブラウザでの互換性がないなどの問題を抱えていたため、102 から削除されます。</p>\n<p>このバージョンから Chrome では<code>Plan B</code>を利用すると例外が投げられるようになります。これを回避したい場合は 2022 年 5 月 25 日までに<a href=\"https://developer.chrome.com/origintrials/#/view_trial/3892235977954951169\">非推奨のトライアル</a>に参加してください。また 12 月に終了した前回の非推奨トライアルに参加していて、今回のトライアルにも参加したい場合は、新しくトークンをリクエストする必要があることに注意してください。</p>\n<h2>その他 Chrome Platform Status に記載されていたもの</h2>\n<h3>Add Save Data Client Hint</h3>\n<p>Permissions-Policy に<code>CH-Save-Data</code>を追加することで Client Hint として<code>Save-Data</code>が扱えるようになります。</p>\n<p><code>Sec-CH-Save-Data</code>が適切な Client Hint になり、Permissions-Policy を介してサードパーティへ送信されることを防ぐことができます。</p>\n<p>参考: Save-Data</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Save-Data\">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Save-Data</a></p>\n<h3>AudioContext.outputLatency</h3>\n<p><code>AudioContext.outputLatency</code>プロパティが追加されました。</p>\n<p>このプロパティは音声出力レイテンシーの推定値(秒数)を返します。技術的には、UserAgent がホストシステムにバッファの再生を要求してから、バッファ内の最初のサンプルが実際に音声出力デバイスによって処理されるまで(スピーカーなどであれば音が出るまで)の間隔を指します。</p>\n<p>このプロパティは入力から出力までのレイテンシーを調整するために必要で、ビデオとオーディオストリームの同期などに非常に有効です。</p>\n<h3>Capture Handle</h3>\n<p>ビデオキャプチャを行う他のアプリケーションに対して、特定の情報やコントロールを opt-in で公開できる仕組みを導入します。</p>\n<p>たとえば、プレゼンテーション・アプリを開いたタブをビデオキャプチャしているアプリケーションがあったとします。この機能でプレゼンテーションアプリがキャプチャをしているアプリに対して、プレゼンテーションを操作を公開するとキャプチャをしているアプリからプレゼンテーションアプリを操作できるようになります。</p>\n<p>ディスプレイキャプチャを行うアプリケーションは、キャプチャされるアプリケーションが Capture Handle 機能を提供していることを前提に、ユーザーに優れた機能性を提供できます。今までに似たような技術はありましたが、Capture Handle では、何を公開するか(オリジン・ハンドル・ID...etc)を選択可能にすることで、よりシンプルで信頼性が高く、安全な仕組みを提供します。</p>\n<p>また私たちが提案するメカニズムでは、キャプチャされたアプリケーション側で、キャプチャする側のアプリケーションを制限できます。具体的には全ての web か特定の origin かを選択できます。</p>\n<h3>HTTP->HTTPS redirect for HTTPS DNS records</h3>\n<p>DNS に問い合わせをする際に、従来の<code>A</code>および<code>AAAA</code>クエリと並行して、<code>HTTPS</code>レコードを問い合わせるようになります。ウェブサイトが<code>HTTPS</code>DNS レコードを設定していて、Chrome がそれを受信すると、Chrome は常に HTTPS で接続します。</p>\n<h3>WebHID exclusionFilters option in requestDevice()</h3>\n<p>navigator.hid.requestDevice()に<code>exclusionFilters</code>が追加されました。</p>\n<p><code>exclusionFilters</code>を指定することでブラウザから扱いたくない HID デバイスを除外することができるようになります。</p>\n<p>参考:</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HID/requestDevice\">https://developer.mozilla.org/en-US/docs/Web/API/HID/requestDevice</a></p>\n","metaData":{"title":"Chrome 102 リリースノートまとめ","author":"Saji","editor":"nus3","createdAt":"2022-07-05","summary":"Chrome 102 のリリースノートの要約です","tags":["Releasenote","Browser"],"updatedAt":"2022-07-05"}},{"slug":"tc39-meeting-2022-03","content":"<p>この記事では2022年03月28日~31日に開催された TC39 meeting 89th で議題に上がったプロポーザルを紹介します。</p>\n<h2>For Stage 4</h2>\n<p>For Stage 4 の提案はありませんでした。</p>\n<h2>For Stage 3</h2>\n<h3><a href=\"https://github.com/tc39/proposal-regexp-v-flag\">RegExp set notation + Unicode properties of strings</a></h3>\n<p><strong>Stage 3 に到達しました</strong></p>\n<p>このプロポーザルは正規表現に新しく<code>v</code>フラグを導入し、その中で set notation と Unicode properties of strings を使えるようにします。\n(翻訳するとしたら set notation は「集合の表記」、properties of strings は「文字列プロパティ」でしょうか。定訳がわからないのでこの記事ではこれらの用語を英語のまま表記します。)</p>\n<p>まず、set notation とは次のような記法のことです。\n(<code>A</code> や <code>B</code> は character class (<code>[a-z]</code>など) もしくは Unicode property escape (<code>\\p{ASCII}</code>など) とします)</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">// 差(difference/subtraction)\n[A--B]\n\n// 共通部分(intersection)\n[A&#x26;amp;&#x26;amp;B]\n\n// nested character class\n[A--[0-9]]</code></pre></div>\n<p><a href=\"https://github.com/tc39/proposal-regexp-v-flag#illustrative-examples\">プロポーザルのリポジトリでは実用的なユースケースが紹介されています。</a></p>\n<p>次に Unicode properties of strings は、domain が character や code point ではなく string (character の sequence) であるような Unicode property のことです。\n(Unicode の property については Unicode の <a href=\"https://www.unicode.org/reports/tr18/#Categories\">UTS18</a> の Properties を読むのがわかりやすいと思います)</p>\n<p>このプロポーザルの中では次の property of string がサポートされるようです。(ref: <a href=\"https://github.com/tc39/ecma262/pull/2418/files#diff-00f81a4e81713d00d0ebd710c18a798b699d244361ceb04fecbb06db6b32e8ba\">https://github.com/tc39/ecma262/pull/2418/files#diff-00f81a4e81713d00d0ebd710c18a798b699d244361ceb04fecbb06db6b32e8ba</a>)<br>\n(見たところどれも Binary のものしかありませんが、今後他の datatype のものも追加されるかどうかはわかりません)</p>\n<ul>\n<li><code>Basic_Emoji</code></li>\n<li><code>Emoji_Keycap_Sequence</code></li>\n<li><code>RGI_Emoji_Modifier_Sequence</code></li>\n<li><code>RGI_Emoji_Flag_Sequence</code></li>\n<li><code>RGI_Emoji_Tag_Sequence</code></li>\n<li><code>RGI_Emoji_ZWJ_Sequence</code></li>\n<li><code>RGI_Emoji</code></li>\n</ul>\n<p>これによって複数の code point からなる Emoji に対して Unicode property escape を使ってマッチさせられるようです。</p>\n<p>(Unicode についてはあまり詳しくないので記述について誤りを見つけた人は教えてほしいです。)</p>\n<p>ちなみに Unicode properties of strings はもともとは<a href=\"https://github.com/tc39/proposal-regexp-unicode-sequence-properties\">別のプロポーザル</a>でしたが、2021年5月にこのプロポーザルにマージされました。</p>\n<h3><a href=\"https://github.com/tc39/proposal-change-array-by-copy\">Change Array by Copy</a></h3>\n<p><strong>Stage 3 に到達しました</strong></p>\n<p>Change Array by Copy は Array と TypedArray にいくつかのイミュータブルなメソッドを追加するプロポーザルです。</p>\n<p>以前この提案について記事を書いたのでより深く知りたい場合はそちらも参照してください(この記事は約1年前に書かれたものなので、現在提案されている仕様とは異なる部分があります)。</p>\n<p><div class=\"hatena-link\"><iframe class=\"hatena-link-frame\" src=\"https://hatenablog-parts.com/embed?url=https://sosukesuzuki.dev/posts/change-array-by-copy\" style=\"border: none;\"></iframe></div></p>\n<p>このプロポーザルについての議論では、新たに追加されるメソッドをどのように命名するかが主な論点にあがっていました。</p>\n<p>現在では次のような <code>with</code> + <code>メソッド名の過去形(過去分詞形?)</code> という形で落ち着いたようです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ミュータブルなメソッド</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// イミュータブルなメソッド</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">withReversed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>これらのメソッドは便利な一方、配列をコピーして返すため配列の要素数に応じて発生するオーバーヘッドを考慮して使う必要があります。</p>\n<h3><a href=\"https://github.com/tc39/proposal-decorators\">Decorators</a></h3>\n<p><strong>Stage 3 に到達しました</strong></p>\n<p>Decorators はクラスを拡張するための構文を導入するプロポーザルです。</p>\n<p>このプロポーザルは5年以上に渡って議論が行われてきた上、TypeScript によって早期からサポートされていたため開発者に広く認知されています。</p>\n<p>ミーティングで使われたスライドの冒頭では</p>\n<blockquote>\n<p>What is a decorator?\nDecorators are <em>functions</em> which have four main capabilities when applied to a class or class element</p>\n<ul>\n<li>Replacement</li>\n<li>Initialization</li>\n<li>Metadata</li>\n<li>Access</li>\n</ul>\n</blockquote>\n<p>と説明されています。</p>\n<p>ちなみに現在 TypeScript に実装されている Decorators は現在の TC39 の Decorators とは異なるものです。<a href=\"https://github.com/microsoft/TypeScript/issues/49074\">TypeScript 4.8 で TC39 の Decorators を実装することが検討されています。</a></p>\n<p>筆者としては、Decorators はコードを書くときの体験を大きく変えうる機能である一方で、複雑で厄介なコードを生み出す可能性も高い機能だと考えています。\nしたがって一般的な Web アプリケーション開発にとっては、ライブラリが提供する Decorators を使用する程度にとどめておくのが、適切な関わり方なのではないかと思っています。</p>\n<p>この新しい Decorators に対してコミュニティがどのように向き合っていくのか、動向が気になるところです。</p>\n<h2>For Stage 2</h2>\n<h3><a href=\"https://github.com/tc39/proposal-pattern-matching\">Pattern Matcing</a></h3>\n<p><strong>Stage 2 に到達しませんでした</strong></p>\n<p>Pattern Matching は名前の通りパターンマッチを導入するためのプロポーザルです。</p>\n<p>現在の ECMAScript では正規表現を除き値のマッチングを行うことができません。\nまた、<code>switch</code> 文にはよく知られたいくつかの問題があります。</p>\n<ul>\n<li>式として使えない</li>\n<li>各 <code>case</code> に明示的な <code>break</code> で必要である</li>\n<li>各 <code>case</code> でスコープが曖昧である</li>\n<li>など</li>\n</ul>\n<p>Pattern Matching ではこれらの問題に対処するための新しい構文を導入します。</p>\n<p>例を示します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">match</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">when</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> status<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">handleData</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">,</span> rest<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">when</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> status<span class=\"token punctuation\">,</span> destination<span class=\"token operator\">:</span> url <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">300</span> <span class=\"token operator\">&#x3C;=</span> status <span class=\"token operator\">&#x26;&#x26;</span> status <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">handleRedirect</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">when</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> status<span class=\"token operator\">:</span> <span class=\"token number\">500</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hasRetried<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">retry</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hasRetried <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token function\">throwSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<ul>\n<li><code>match</code> からはじまるブロック全体は match construct と呼ばれます。match construct 全体で一つの式として振る舞います。</li>\n<li><code>match(res)</code> の <code>res</code> は matchable と呼ばれます。matchable は任意の式です。</li>\n<li><code>when</code> や <code>default</code> で始まる部分を clause (句) と呼びます。clause は <code>:</code> で LHS と RHS に区切られます。\n<ul>\n<li>clause の LHS は <code>when</code> もしくは <code>default</code> で始まる必要があります。\n<ul>\n<li><code>when</code> clause は、<code>when</code> というキーワードのあとにカッコで囲まれた pattern を記述します。\n<ul>\n<li>カッコで囲まれた pattern のあとには <code>if</code> と条件式で構成された guard を記述することができます。pattern の表現力では不十分だった場合に guard を使ってさらなるロジックを記述できます。</li>\n</ul>\n</li>\n<li><code>default</code> clause は他のどの clause にもマッチしなかった場合にマッチします。\n<ul>\n<li><code>default</code> clause はなくても問題ありませんが、使う場合はからなず最後に置かなければいけません。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>clause の RHS は任意の式です。ブロックステートメント(<code>{ }</code>)を書くことはできません。なので、複雑なロジックを記述したいときは現在では即時実行関数を使う必要があります。将来的には、現在提案されている <a href=\"\">do expression</a> がここで役に立つでしょう。</li>\n</ul>\n</li>\n</ul>\n<p><code>when</code> clause に続く pattern では、実際にはもっと複雑なパターンを記述できます。(ref: <a href=\"https://github.com/tc39/proposal-pattern-matching#pattern\">https://github.com/tc39/proposal-pattern-matching#pattern</a>)</p>\n<p>Pattern Mathcing は JavaScript のコーディングスタイルを大きく変えうる強力な機能です。</p>\n<p>今回のミーティングでは仕様のテキストに懸念があり、時間内に Stage 2 に到達する合意は得られなかったようです。</p>\n<h2>For Stage 1</h2>\n<h3><a href=\"https://github.com/tc39/proposal-function-once\">Function.prototype.once</a></h3>\n<p><strong>Stage 1 に到達しました</strong></p>\n<ul>\n<li><a href=\"https://docs.google.com/presentation/d/1M0bzEEBZGfb_gIDVjIytbfYnLUhG7EN9iUTx6KJE2po/edit#slide=id.gfacc5909b0_0_5\">https://docs.google.com/presentation/d/1M0bzEEBZGfb_gIDVjIytbfYnLUhG7EN9iUTx6KJE2po/edit#slide=id.gfacc5909b0_0_5</a></li>\n</ul>\n<p><code>Function.prototype.once</code> は、<code>Function</code> に一度だけ呼び出されるような関数を作るためのインスタンスメソッドを導入するプロポーザルです。</p>\n<p>例を示します。関数 <code>f</code> は受け取った引数を出力し、それに2をかけた数を返す関数です。\nこのとき <code>f.once()</code> は、一度だけ <code>f</code> を呼び出す関数を返します。<code>f.once()</code> の返り値の関数を二度以上呼び出しても <code>f</code> が再度呼び出されることはなく、その返り値は最初の<code>f</code>の返り値となります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">f</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword control-flow\">return</span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> fOnce <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">once</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">fOnce</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// `3` が出力され、`6` が返される</span>\n<span class=\"token function\">fOnce</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 何も出力されず、`6` が返される</span>\n<span class=\"token function\">fOnce</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 何も出力されず、`6` が返される</span>\n</code></pre></div>\n<p><a href=\"https://github.com/tc39/proposal-function-once/tree/15c443d07d65fc0f20d4b17f3c11a78086029bc7#real-world-examples\">プロポーザルのリポジトリでは実用的なユースケースが紹介されています。</a></p>\n<h3><a href=\"https://github.com/tc39/proposal-type-annotations\">Type Annotations</a></h3>\n<p><strong>Stage 1 に到達しました</strong></p>\n<p>Type Annotations プロポーザルは、ECMAScript の仕様に TypeScript や Flow のような型の構文を導入するプロポーザルです。</p>\n<p>たとえば、次に示すような型注釈を含むコードが JavaScript のプログラムとして妥当になります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> foo<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span>param<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> param<span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>このプロポーザルでは ECMAScript に型チェックを導入するのではなく、あくまで型の構文だけを導入します。つまり型による静的チェックを行う場合はこれまで通り統合開発環境やTypeScript Compilerなどを使う必要があります。</p>\n<p>このプロポーザルについて以前記事を書いたので興味のある人はそちらも参照してください。</p>\n<p><div class=\"hatena-link\"><iframe class=\"hatena-link-frame\" src=\"https://hatenablog-parts.com/embed?url=https://sosukesuzuki.dev/posts/stage-1-type-annotations\" style=\"border: none;\"></iframe></div></p>\n<p>また、過去に Harajuku.ts という勉強会で <a href=\"https://twitter.com/uhyo_\">@uhyo_</a> さんと <a href=\"https://twitter.com/okunokentaro\">@okunokentaro</a> さんと議論したので興味のある人はそのときのアーカイブも御覧ください。</p>\n<p><a href=\"https://youtu.be/eS51szIxGTQ\">https://youtu.be/eS51szIxGTQ</a></p>\n<h2>Updates</h2>\n<p>ステージの移動はないものの更新が紹介された提案を列挙します。ここでは詳細については説明しませんがスライドや関連するIssueへのリンクを貼ったので興味のある人は参照してください。</p>\n<h3><a href=\"https://github.com/tc39/proposal-array-grouping\">Array Grouping</a></h3>\n<ul>\n<li><a href=\"https://github.com/tc39/proposal-array-grouping/issues/37\">https://github.com/tc39/proposal-array-grouping/issues/37</a></li>\n</ul>\n<h3><a href=\"https://github.com/tc39/proposal-resizablearraybuffer\">Resizable Array Buffer</a></h3>\n<ul>\n<li><a href=\"https://docs.google.com/presentation/d/1QBbEnfWn9QAn48J1SAm3l5xJARE5wcKt3MlTlcVKIek/edit#slide=id.p\">https://docs.google.com/presentation/d/1QBbEnfWn9QAn48J1SAm3l5xJARE5wcKt3MlTlcVKIek/edit#slide=id.p</a></li>\n</ul>\n<h3><a href=\"https://github.com/tc39/proposal-temporal\">Temporal</a></h3>\n<ul>\n<li><a href=\"http://ptomato.name/talks/tc39-2022-03/\">http://ptomato.name/talks/tc39-2022-03/</a></li>\n</ul>\n<h3><a href=\"https://github.com/tc39/proposal-shadowrealm\">Shadow Realms</a></h3>\n<ul>\n<li><a href=\"https://docs.google.com/presentation/d/1Juv36nUTfcvb_E2NUeAPGuToCCBWIX0NLObx_h5qDYU/edit#slide=id.p\">https://docs.google.com/presentation/d/1Juv36nUTfcvb_E2NUeAPGuToCCBWIX0NLObx_h5qDYU/edit#slide=id.p</a></li>\n</ul>\n<h3><a href=\"https://github.com/tc39/proposal-pipeline-operator\">Pipe Operator</a></h3>\n<ul>\n<li><a href=\"https://docs.google.com/presentation/d/1dDucwsW8qM22yWLr_NHFmAiAltQSht3AXYW00kET4GA/edit#slide=id.gfacc5909b0_0_5\">https://docs.google.com/presentation/d/1dDucwsW8qM22yWLr_NHFmAiAltQSht3AXYW00kET4GA/edit#slide=id.gfacc5909b0_0_5</a></li>\n</ul>\n<h3><a href=\"https://github.com/tc39/proposal-call-this\">Call-this operator</a></h3>\n<ul>\n<li><a href=\"https://docs.google.com/presentation/d/1-MLGCibETPX8NiIvNJ1xOxiMS-NB8GCbDGNcB5patiU/edit#slide=id.gfacc5909b0_0_5\">https://docs.google.com/presentation/d/1-MLGCibETPX8NiIvNJ1xOxiMS-NB8GCbDGNcB5patiU/edit#slide=id.gfacc5909b0_0_5</a></li>\n</ul>\n<h3><a href=\"https://github.com/tc39/proposal-string-dedent\">String.dedent</a></h3>\n<ul>\n<li><a href=\"https://docs.google.com/presentation/d/1fF4TqU6eLcj74s0wa1VSq5wGORSY1m1naekTNF9JAz4/edit#slide=id.gc6f73a04f_0_0\">https://docs.google.com/presentation/d/1fF4TqU6eLcj74s0wa1VSq5wGORSY1m1naekTNF9JAz4/edit#slide=id.gc6f73a04f_0_0</a></li>\n</ul>\n<h2>参考リンク</h2>\n<ul>\n<li>TC39\n<ul>\n<li><a href=\"https://github.com/tc39/agendas/blob/main/2022/03.md\">agendas/03.md at main · tc39/agendas</a></li>\n<li><a href=\"https://github.com/tc39/notes/blob/main/meetings/2022-03/mar-28.md\">notes/mar-28.md at main · tc39/notes</a></li>\n<li><a href=\"https://github.com/tc39/notes/blob/main/meetings/2022-03/mar-29.md\">notes/mar-29.md at main · tc39/notes</a></li>\n<li><a href=\"https://github.com/tc39/notes/blob/main/meetings/2022-03/mar-30.md\">notes/mar-30.md at main · tc39/notes</a></li>\n<li><a href=\"https://github.com/tc39/notes/blob/main/meetings/2022-03/mar-31.md\">notes/mar-31.md at main · tc39/notes</a></li>\n</ul>\n</li>\n<li>Babel\n<ul>\n<li><a href=\"https://github.com/babel/proposals/issues/81\">March 2022 · Issue #81 · babel/proposals</a></li>\n</ul>\n</li>\n<li>TypeScript\n<ul>\n<li><a href=\"https://github.com/microsoft/TypeScript/issues/49074\">TypeScript 4.8 Iteration Plan · Issue #49074 · microsoft/TypeScript</a></li>\n<li><a href=\"https://github.com/microsoft/TypeScript/issues/48885\">Implement the updated JS decorators proposal · Issue #48885 · microsoft/TypeScript</a></li>\n</ul>\n</li>\n<li>Unicode\n<ul>\n<li><a href=\"https://www.unicode.org/reports/tr18/\">UTS #18: Unicode Regular Expressions</a></li>\n<li><a href=\"https://util.unicode.org/UnicodeJsps/properties.jsp\">Unicode Utilities: Character Property Index</a></li>\n</ul>\n</li>\n</ul>\n","metaData":{"title":"ECMAScriptの最新動向 2022年03月版","author":"sosukesuzuki","createdAt":"2022-06-13","summary":"2022年03月28日~31日に開催された TC39 meeting 89th の内容を紹介します","tags":["TC39","ECMAScript"],"updatedAt":"2022-06-13"}},{"slug":"release-chrome-101","content":"<h1>Chrome101</h1>\n<p>Chrome 101 のリリースノート関連の情報をまとめました。</p>\n<p><a href=\"https://developer.chrome.com/blog/new-in-chrome-101/\">https://developer.chrome.com/blog/new-in-chrome-101/</a>\n<a href=\"https://developer.chrome.com/blog/new-in-devtools-101/\">https://developer.chrome.com/blog/new-in-devtools-101/</a>\n<a href=\"https://developer.chrome.com/blog/deps-rems-101/\">https://developer.chrome.com/blog/deps-rems-101/</a>\n<a href=\"https://www.chromestatus.com/features#milestone%3D101\">https://www.chromestatus.com/features#milestone%3D101</a></p>\n<h2>New In Chrome (Chrome 101)</h2>\n<p>Chrome101 で新しく追加された機能です。</p>\n<h3><code>hwb()</code> color notation</h3>\n<p>CSSの色指定方法として<code>hwb()</code>値がサポートされました。</p>\n<p>hwb() は、色相、白色度、黒色度にしたがって色を指定します。他の色表記と同様に、オプションのアルファ成分で不透明度を指定することもできます。以下の例では<code>#00c3ff</code>の色を50%透過度で指定しています。</p>\n<div class=\"remark-highlight\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">h1</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">hwb</span><span class=\"token punctuation\">(</span><span class=\"token number\">194</span> <span class=\"token number\">0</span><span class=\"token unit\">%</span> <span class=\"token number\">0</span><span class=\"token unit\">%</span> <span class=\"token operator\">/</span> <span class=\"token number\">.5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">/* #00c3ff with 50% opacity */</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>FireFoxではv96から、Safariではv15からこの<code>hwb()</code>値をサポートしているため、今回のChromeのサポートにより、多くのブラウザでこの記法が使えることになります。</p>\n<h3>Priority Hints</h3>\n<p>ブラウザがページ内リソース(<code>image</code>,<code>script</code>,<code>CSS</code>)を読み込む際の優先度ヒントを明示的に宣言できる<code>Priority Hints</code>機能がリリースされました。</p>\n<p>htmlで読み込みの優先度ヒントを書く場合は、<code>fetchpriority</code>属性に<code>high</code>,<code>low</code>,<code>auto</code>のいずれかを指定します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&#x3C;!-- 優先度 low で画像を読み込む場合 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/images/in_viewport_but_not_important.svg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">fetchpriority</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>low<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>I<span class=\"token punctuation\">'</span>m an unimportant image!<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<p>この機能はChrome96からOriginTrialとして試験的に実装されており、当時は<code>importance</code>属性を用いる方法をとっていましたが、Web標準化プロセスの中で、HTMLでは<code>fetchpriority</code>、JavaScriptのFetch APIでは<code>priority</code>というプロパティを利用するよう仕様が変更されました。</p>\n<p>優先度指定における細かい挙動やユースケースについては<a href=\"https://web.dev/priority-hints/\">Optimize resource loading with Priority Hints</a>を参照してください。</p>\n<h3>Also in this release</h3>\n<h4>USBDevice forget()</h4>\n<p><code>USBDevice</code>オブジェクトで<code>forgot()</code>メソッドがサポートされました。このメソッドでは以前許可されていたデバイスの登録を削除することができます。例えば多くのデバイスで共有されているコンピューターで使用されているアプリケーションなどでは有用です。</p>\n<h4>Web USB sameObject behavior</h4>\n<p><code>USBConfiguration</code>、<code>USBInterface</code>、<code>USBAlternateInterface</code>、<code>USBEndpoint</code> の4つのインスタンスが厳密な同値（<code>===</code>）なるのは、同じ<code>USBDevice</code>のアクセッサから取得した場合のみに変更されます。</p>\n<h4>Secure context fix for dedicated workers</h4>\n<p>全な(HTTPSの)Originからロードされていますが、安全でない(HTTPSでない)コンテキストでインスタンス化された専用ワーカーは安全だとはみなされなくなりました。</p>\n<p>具体的に上記のような状況において、以下のような変更が入ります</p>\n<ul>\n<li><code>self.isSecureContext</code>が<code>false</code>を返すようになる</li>\n<li><code>self.caches</code> と <code>self.storageFoundation</code> が使用できなくなる</li>\n</ul>\n<p>この修正により、上記のようなワーカーの挙動においてHTML標準やGeckoと互換性を持つようになりました。</p>\n<h4>Make 'true' a truthy value for window.open boolean features</h4>\n<p>chrome98から、<code>window.open()</code>に対し<code>popup=yes</code>または<code>popup=1</code>のように指定することで、ポップアップウィンドウで開くことをブラウザに要求することが出来るようになりました。</p>\n<p>このpopup値として<code>yes</code>,<code>1</code>などがサポートされていたものの、<code>true/false</code>がサポートされていなかったため、<code>popup=true</code>はpopupを開かないことを意味していました。</p>\n<p>このように<code>popup=true</code>がfalseとして評価されるのは直感に反しているため、Chrome101からは<code>popup=true</code>がtrueとして評価されるようになります。</p>\n<h2>What's New In DevTools (Chrome 101)</h2>\n<p>DevTools についてはこちらの日本語訳を参照ください。</p>\n<p><a href=\"https://developer.chrome.com/ja/blog/new-in-devtools-101/\">https://developer.chrome.com/ja/blog/new-in-devtools-101/</a></p>\n<h2>Deprecations and removals in Chrome 101</h2>\n<h3>Reduce user agent string information</h3>\n<p>ChromeではHTTPリクエストやnavigatorで利用されるUser-Agent文字列の削減に取り組んでいます。この取り組みはUser-Agent文字列がユーザーフィンガープリンティング(webブラウザからの情報だけで個人の情報を特定する技術)に利用されるのを防ぐために行われています。現在はOriginTrialとしてこれらの取り組みを進めています。</p>\n<h3>Remove WebSQL in third-party contexts</h3>\n<p>サードパーティーのコンテキストにおけるWebSQL機能を削除しました。Web SQL Database標準は2009年4月に提案され、2010年11月に放棄された標準で、FireFoxはこの機能を搭載せず、Safariも2019年から非推奨としています。またW3Cは代替手段として、Web StorageとIndexed Databaseを推奨しています。Chromeとしても使用率が十分に低くなった時点で完全に非推奨とし、削除する予定です。</p>\n<h2>その他 Chrome Platform Status に記載されていたもの</h2>\n<h3>MediaCapabilities API for WebRTC</h3>\n<p><code>MediaCapabilities API</code>でWebRTCストリームをサポートするようになりました。</p>\n<p><code>MediaCapabilities API</code>は、動画再生に使用できるコーデックや解像度などの情報を提供するAPIです。これらの情報によりwebアプリケーションは使用するコーデクなどがサポートされているかどうか、スムーズな再生が期待できるかどうかを判断できるようになります。</p>\n<p>今回のリリースからWebRTCストリームについての情報もこの<code>MediaCapabilities API</code>から取得できるようになります。この機能がない場合、アプリケーションが不必要に低い解像度やフレームレートを使用して品質が低下したり、クライアントが希望するフレームレートでストリームを処理できずスタッタリングが発生したりする可能性があります。</p>\n<h3>font-palette and custom @font-palette-values palettes</h3>\n<p>カラーフォントで利用するパレットを選択することができる、<code>font-palette</code> CSSプロパティがサポートされました。</p>\n<p>また<code>@font-palette-values</code>ルールを利用することで、ベースとなるカラーパレットを選択したり、カラーパレットの上書きなどができるようになります。</p>\n<p>ベースとなるカラーパレットを選択する例</p>\n<div class=\"remark-highlight\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@font-palette-values</span> <span class=\"token variable\">--Pinks</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> MultiColorFont<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">base-palette</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* パレットを番号で指定 */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\"><span class=\"token class\">.text-pink</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-palette</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">--Pinks</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* @font-palette-valuesで作成したパレットを指定 */</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>カラーパレットを上書きする例</p>\n<div class=\"remark-highlight\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@font-palette-values</span> <span class=\"token variable\">--SkyAndYellow</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> MultiColorFont<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">override-colors</span><span class=\"token punctuation\">:</span>　\n    <span class=\"token number\">0</span> <span class=\"token hexcode color\">#87dbe8</span><span class=\"token punctuation\">,</span> \n    <span class=\"token number\">1</span> <span class=\"token hexcode color\">#f7ca25</span><span class=\"token punctuation\">;</span>　<span class=\"token comment\">/* 対応する番号のカラーを上書き */</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>このように<code>font-palette</code> CSSプロパティのサポートは、すでにサポートしているCOLR/CPALカラーフォントの有用性を向上するものです。ダークモード対応をはじめとして、アイコンフォントをコンテンツの配色に合わせたいユースケースでこの機能はとても有用です。</p>\n","metaData":{"title":"Chrome 101 リリースノートまとめ","author":"Saji","editor":"nus3","createdAt":"2022-05-16","summary":"Chrome 101 のリリースノートの要約です","tags":["Releasenote","Browser"],"updatedAt":"2022-05-16"}},{"slug":"release-safari-15-4","content":"<p>🔗 <a href=\"https://webkit.org/blog/12445/new-webkit-features-in-safari-15-4/\">https://webkit.org/blog/12445/new-webkit-features-in-safari-15-4/</a></p>\n<p>Safari 15.4 がリリースされました 🎉<br>\nこれまで Technology Preview として公開されていた様々な変更が含まれています。</p>\n<h2>HTML</h2>\n<ul>\n<li>遅延読み込みのための <code>lazy-loading</code> のサポート\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/Performance/Lazy_loading\">https://developer.mozilla.org/en-US/docs/Web/Performance/Lazy_loading</a></li>\n</ul>\n</li>\n<li><code>&#x3C;dialog></code> Element のサポート\n<ul>\n<li><a href=\"https://html.spec.whatwg.org/multipage/interactive-elements.html#the-dialog-element\">https://html.spec.whatwg.org/multipage/interactive-elements.html#the-dialog-element</a></li>\n</ul>\n</li>\n<li><code>::backdrop</code> 疑似要素のサポート\n<ul>\n<li><a href=\"https://developer.mozilla.org/ja/docs/Web/CSS/::backdrop\">https://developer.mozilla.org/ja/docs/Web/CSS/::backdrop</a></li>\n</ul>\n</li>\n<li><code>autofocus</code> 属性のサポート\n<ul>\n<li>dialog 表示時にどの要素にフォーカスをセットするかを指定できる</li>\n</ul>\n</li>\n</ul>\n<h2>CSS</h2>\n<h3>Features for CSS Architecture</h3>\n<ul>\n<li><code>:has()</code> のサポート (現状 Safari のみサポート)\n<ul>\n<li><a href=\"https://developer.mozilla.org/ja/docs/Web/CSS/:has\">https://developer.mozilla.org/ja/docs/Web/CSS/:has</a></li>\n</ul>\n</li>\n<li>CSS Cascade Layers のサポート\n<ul>\n<li>FEE チームの @nus3 が書いた CSS Cascade Layers の紹介エントリ: <a href=\"https://cybozu.github.io/frontend-expert/posts/css-cascade-layers\">https://cybozu.github.io/frontend-expert/posts/css-cascade-layers</a>)</li>\n</ul>\n</li>\n</ul>\n<h3>Solving Pain Points</h3>\n<ul>\n<li>主にモバイル向けに、viewport に応じた新しい値の指定が可能に\n<ul>\n<li><code>svh</code>, <code>svw</code> → メニューバーなどを除いた最小の viewport</li>\n<li><code>dvh</code>, <code>dvw</code> → スクロールによるメニューバーなどの表示切り替えに応じて変化する viewport</li>\n<li><code>lvh</code>, <code>lvw</code> → メニューバーなどが存在しない状態を想定した最大の viewport</li>\n<li><code>svmin</code>, <code>svmax</code>, <code>lvmin</code>, <code>lvmax</code>, <code>dvmin</code>, <code>dvmax</code> → <code>vw</code>, <code>vh</code>, <code>vmin</code>, <code>vmax</code> の上記 CSS 値版 (幅, 高さに対する割合指定)</li>\n</ul>\n</li>\n<li><code>:focus-visible</code> 疑似要素のサポート</li>\n<li><code>accent-color</code> プロパティのサポート\n<ul>\n<li>checkbox, radio, progress, select, datalist (iPad OS と iOS のみ range, button) にアクセントカラー指定が可能になる</li>\n</ul>\n</li>\n<li><code>calc()</code> 数学関数のサポート</li>\n</ul>\n<h3>Typography</h3>\n<ul>\n<li><code>font-palette</code> と <code>@font-palette-values</code> CSS プロパティのサポート\n<ul>\n<li>カラーフォントに含まれるパレットの指定と、カラーパレットの独自定義</li>\n</ul>\n</li>\n<li><code>text-decoration-skip-ink</code> CSS プロパティのサポート\n<ul>\n<li>text-decoration (underline とか)を文字に被らず表示できる</li>\n</ul>\n</li>\n<li><code>ic</code> 単位のサポート\n<ul>\n<li><code>1ic</code> が <code>水</code> の文字の幅と同等になる</li>\n</ul>\n</li>\n</ul>\n<h3>Retiring WebKit prefixes</h3>\n<ul>\n<li><code>-webkit</code> vendor prefix の付与が必要だった様々なプロパティが廃止。また、廃止に伴い prefix 不要で利用可能なプロパティのサポート追加\n<ul>\n<li><code>appearance</code></li>\n<li><code>mask</code></li>\n<li><code>backface-visibility</code></li>\n<li><code>text-combine-upright</code></li>\n<li><code>print-color-adjust</code></li>\n<li><code>match-parent</code> (<code>text-align</code> プロパティに指定可能な値)</li>\n<li>削除: <code>-webkit-border-fit</code>, <code>-webkit-margin-collapse</code>, <code>-webkit-margin-top-collapse</code>, <code>-webkit-margin-bottom-collapse</code>, <code>-webkit-margin-before-collapse</code>, <code>-webkit-margin-after-collapse</code>, <code>-webkit-background-composite</code></li>\n</ul>\n</li>\n</ul>\n<h2>Web APIs</h2>\n<ul>\n<li>BroadcastCannel のサポート\n<ul>\n<li><a href=\"https://html.spec.whatwg.org/multipage/web-messaging.html#broadcasting-to-other-browsing-contexts\">https://html.spec.whatwg.org/multipage/web-messaging.html#broadcasting-to-other-browsing-contexts</a></li>\n<li>タブ、ウィンドウ、iframe, worker の相互通信が可能になる</li>\n</ul>\n</li>\n<li>Web Locks API のサポート\n<ul>\n<li><a href=\"https://w3c.github.io/web-locks/\">https://w3c.github.io/web-locks/</a></li>\n<li>タブ、ウィンドウ、iframe, worker 間でリソースのロックコントロールを行う</li>\n</ul>\n</li>\n<li><code>scroll-behavior</code> または <code>window.scroll()</code>, <code>window.scrollTo()</code>, <code>window.scrollBy()</code> の <code>behivior</code> オプションでスクロール制御を可能に</li>\n<li><code>ResizeObserver API</code> で <code>ResizeObserverSize</code> インタフェースのサポート\n<ul>\n<li>対象要素の <code>box-sizing</code> プロパティの変更を監視可能に</li>\n</ul>\n</li>\n<li><code>structuredClone</code> のサポート\n<ul>\n<li>DeepClone</li>\n<li>Chrome/Edge/Firefox/Safari のすべてがサポートされました 🎉</li>\n</ul>\n</li>\n<li><code>Origin Private File System</code> のサポート\n<ul>\n<li>詳細はこちら: <a href=\"https://webkit.org/blog/12257/the-file-system-access-api-with-origin-private-file-system/\">https://webkit.org/blog/12257/the-file-system-access-api-with-origin-private-file-system/</a></li>\n</ul>\n</li>\n</ul>\n<h2>JavaScript</h2>\n<ul>\n<li><code>findLast()</code>, <code>findLastIndex()</code> メソッドのサポート</li>\n<li><code>at()</code> のサポート</li>\n<li><code>Object.hasOwn()</code> のサポート</li>\n</ul>\n<h3>Internationalization</h3>\n<ul>\n<li><code>Intl Enumeration API</code> (<a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Intl\">https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Intl</a>) の強化\n<ul>\n<li><code>Intl.Locale</code> で、暦週・書く方向・12h/24h のサイクル・番号システムといった情報を取得可能になった</li>\n<li><code>Intl.DisplayNames</code> で calendar・dateTimeField のサポート追加および languageDisplay オプションのサポート</li>\n<li><code>Intl.PluralRules</code> に <code>selectRange()</code> メソッドの追加\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/selectRange\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules/selectRange</a></li>\n<li><a href=\"https://unicode-org.github.io/cldr-staging/charts/37/supplemental/language_plural_rules.html#rules\">https://unicode-org.github.io/cldr-staging/charts/37/supplemental/language_plural_rules.html#rules</a> に従い、数値の複数形のルールを示す文字列を得る</li>\n</ul>\n</li>\n<li><code>Intl.NumberFormat</code> に <code>formatRange()</code> と <code>formatRangeToParts()</code> メソッドの追加\n<ul>\n<li>数値範囲を示す文字列にフォーマットする</li>\n</ul>\n</li>\n<li><code>Intl.DateTimeFormat</code> に 複数の <code>timeZoneName</code> オプションの追加</li>\n</ul>\n</li>\n</ul>\n<h2>Web Apps</h2>\n<ul>\n<li>Web App Manifest 周りのアップデート (≒ PWA 絡みでのアップデート)\n<ul>\n<li>Manifest ファイルをページロード時に常にフェッチするようになる</li>\n<li>Manifest ファイルでのアイコン宣言のサポート\n<ul>\n<li><code>purpose</code> 指定に応じて <code>apple-touch-icon</code> 以外のアイコンを利用する</li>\n</ul>\n</li>\n<li>ServiceWorker で Navigation Preload が使えるように\n<ul>\n<li>ServiceWorker の起動時のブロッキングを回避できるように</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>Media</h2>\n<ul>\n<li>WebRTC negotiation API が WebRTC 1.0 仕様に準拠</li>\n<li>in-band chapter tracks のサポート\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/TextTrack/kind\">https://developer.mozilla.org/en-US/docs/Web/API/TextTrack/kind</a></li>\n</ul>\n</li>\n<li><code>&#x3C;video></code> で <code>requestVideoFrameCallback()</code> のサポート追加\n<ul>\n<li>ビデオフレームの表示可能タイミングでのコールバックとメタデータ受け取りが可能になる</li>\n</ul>\n</li>\n</ul>\n<h2>Privacy</h2>\n<ul>\n<li>Private Click Measurement (<a href=\"https://webkit.org/blog/11940/pcm-click-fraud-prevention-and-attribution-sent-to-advertiser/\">https://webkit.org/blog/11940/pcm-click-fraud-prevention-and-attribution-sent-to-advertiser/</a>) 周りで幾つかのアップデート</li>\n</ul>\n<h2>Security</h2>\n<ul>\n<li>Inline Script / Style / eval などでリソースがブロックされた場合のレポートが Web 標準にあわせて更新</li>\n<li>XSS 対策機能の XSS Auditor サポート削除 (CSP や COEP で代替)</li>\n</ul>\n<h2>WKWebView</h2>\n<ul>\n<li>iOS, iPadOS, macOS 上のアプリケーションの場合、FullScreen API 利用の制御が可能になった</li>\n<li>iPadOS で Media Source Extensions を利用するコンテンツが動作するようになった\n<ul>\n<li><a href=\"https://developer.mozilla.org/ja/docs/Web/API/Media_Source_Extensions_API\">https://developer.mozilla.org/ja/docs/Web/API/Media_Source_Extensions_API</a></li>\n</ul>\n</li>\n</ul>\n<h2>Safari Web Extensions</h2>\n<ul>\n<li>クロスブラウザでの拡張機能サポートに伴う <code>manifest_version 3</code> のサポートなど\n<ul>\n<li>バックグラウンドスクリプトで <code>service_worker</code> のサポート</li>\n<li><code>browser.scripting</code> によるスクリプトとスタイルのインジェクション</li>\n<li><code>browser.declarativeNetRequest</code> を介したネットワークリクエストの動的ルールやセッションルール</li>\n<li><code>externally_connectable:matches</code> による、Web ページから拡張機能へのメッセージング</li>\n</ul>\n</li>\n</ul>\n<h2>Web Inspector</h2>\n<ul>\n<li>CSS Cascade Layer サポート追加に伴い、Web Inspector 上で <code>@layer</code> ルールセットが確認可能になった</li>\n<li>Flexbox および Grid で、視覚的なコントロールの追加</li>\n<li>Style パネルでのプロパティや値の変更時の自動補完の強化</li>\n<li>CSS 表示の改善。未使用の継承値の非表示や、フィルタによる検索、種類でのグループ化など</li>\n</ul>\n<hr>\n<p><code>&#x3C;dialog></code> のサポートや <code>:focus-visible</code> などは身近な感じがありますね。</p>\n<p>また、Web Extensions で manifest_version 3 のサポートが強化されたことで、クロスブラウザ向けのブラウザ拡張で Safari も含めやすくなるかもしれません。</p>\n","metaData":{"title":"Safari 15.4 リリースノートまとめ | dialog Element や lazy-loading, CSS Cascade Layers サポートなど","author":"mugi","createdAt":"2022-03-25","summary":"New WebKit Features in Safari 15.4 のリリースノートのまとめです","tags":["Releasenote","Browser"],"updatedAt":"2022-03-25"}},{"slug":"release-chrome-99","content":"<p>Chrome 99 のリリースノート関連の情報をまとめました。</p>\n<ul>\n<li><a href=\"https://developer.chrome.com/blog/new-in-chrome-99/\">https://developer.chrome.com/blog/new-in-chrome-99/</a></li>\n<li><a href=\"https://developer.chrome.com/blog/new-in-devtools-99/\">https://developer.chrome.com/blog/new-in-devtools-99/</a></li>\n<li><a href=\"https://developer.chrome.com/blog/deps-rems-99/\">https://developer.chrome.com/blog/deps-rems-99/</a></li>\n<li><a href=\"https://www.chromestatus.com/features#milestone%3D99\">https://www.chromestatus.com/features#milestone%3D99</a></li>\n<li><a href=\"https://v8.dev/blog/v8-release-99\">https://v8.dev/blog/v8-release-99</a></li>\n</ul>\n<h2>New In Chrome (Chrome 99)</h2>\n<p>Chrome99 で新しく追加された機能です。</p>\n<h3>Chrome 100 and Firefox 100</h3>\n<p>Chrome 100 は今年の 3 月下旬、Firefox100 は 5 月上旬にリリースされます。 これらは両方ともメジャーバージョン番号が 3 桁にロールオーバーするアップデートです。 UserAgent をパースしたバージョン番号を２桁として解釈しているコードがある場合、新しいバージョン番号によって問題が発生する可能性があります。</p>\n<p>Chrome では、<code>＃force-major-version-to-100</code> フラグを有効にすることで現在のバージョンを 100 に上書きし、挙動を確認することができます。</p>\n<p>また、Firefox Nightly では「設定」メニューで、「Firefox100 ユーザーエージェント文字列」オプションを有効にすることで同様の確認が可能です。 両ブラウザでバージョン番号の解釈が期待どおりに機能することを確認できるように、サイトをテストすることをお勧めします。</p>\n<h3>CSS Cascasde Layers</h3>\n<p>CSS Cascade Layers が Chrome99、Firefox 97、Safari 15.4 Beta でサポートされました！</p>\n<p>CSS セレクタの詳細度を上回るルールを<code>@layer</code>で定義することができるようになります。</p>\n<p>詳細は <a href=\"https://twitter.com/nus3_\">@nus3</a> が別途記事を書いたので次のリンクをご参考ください。</p>\n<p><a href=\"https://cybozu.github.io/frontend-expert/posts/css-cascade-layers\">https://cybozu.github.io/frontend-expert/posts/css-cascade-layers</a></p>\n<h3>showPicker() for input elements</h3>\n<p>HTML InputElements に新しく<code>showPicker（）</code>メソッドが実装されました。</p>\n<p>これにより、日付だけでなく、時間、色、その他の<code>&#x3C;input></code>要素でブラウザーピッカーを表示するための標準的な方法が整備されました。</p>\n<p>利用する場合は、以下のように<code>&#x3C;input></code>要素で<code>showPicker（）</code>を呼び出します。また<code>try…catch</code>ブロックでこれらの処理を囲う事で、ブラウザーが<code>showPicker()</code>の API をサポートしていない場合、またはピッカーを表示できない場合のフォールバックを提供できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> dateInput <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbutton<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n    dateInput<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">showPicker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Dateピッカーの表示.</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ピッカーを表示できない場合のフォールバック</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>参考:</p>\n<p><a href=\"https://developer.chrome.com/blog/new-in-chrome-99/#:~:text=Show%20a%20browser%20picker%20for%20date%2C%20time%2C%20color%2C%20and%20files\">Show a browser picker for date, time, color, and files</a></p>\n<h3>And more!</h3>\n<p><code>CanvasRenderingContext2D</code>に次の機能が追加されました。</p>\n<ul>\n<li>Context がロストした時や復元した時のイベントハンドリングができるように(<code>ContextLost</code>, <code>ContextRestored</code>)</li>\n<li><code>willReadFrequently</code>オプションの追加</li>\n<li><code>letter-spacing</code>など Canvas でサポートされていなかったテキストを修飾するプロパティの追加</li>\n<li>Canvas の状態をリセットする<code>reset()</code>など</li>\n</ul>\n<p>PWA のマニフェストにダークテーマに対応する設定が追加できる<a href=\"https://developer.chrome.com/origintrials/#/view_trial/4239013149262479361\">オリジントライアル</a>が開始されたました。</p>\n<p>また詳細はこの記事の後半に記載しますが、Handwriting Recognition API が使えるようになります。</p>\n<h2>What's New In DevTools (Chrome 98)</h2>\n<p>DevTools についてはこちらの日本語訳を参照ください。</p>\n<p><a href=\"https://developer.chrome.com/ja/blog/new-in-devtools-99/\">https://developer.chrome.com/ja/blog/new-in-devtools-99/</a></p>\n<p>書いてるうちにでなかったら、気になるものがあれば記載する</p>\n<h2>Deprecations and removals in Chrome 99</h2>\n<h3>Remove Battery Status API on insecure origins</h3>\n<p><code>Battery Status API</code>は、HTTP ページや HTTP ページに埋め込まれた HTTPS の iframe などの安全でないオリジンでサポートされなくなりました。</p>\n<h3>Remove font-family -webkit-standard</h3>\n<p><code>font-family</code>の値として<code>-webkit-standard</code>が削除されました。</p>\n<h3>Remove GamepadList</h3>\n<p>接続しているゲームパッドを取得できる<code>navigator.getGamepads()</code>の返り値が<code>GamepadlList</code>から<code>Gamepad</code>のオブジェクトの配列を返すようになりました。</p>\n<p>この変更により、Gecko と Webkit と同じく仕様と一致するようになります。</p>\n<p>参考:</p>\n<p><a href=\"https://web.dev/gamepad/\">Chrome でゲームパッドを使う方法</a></p>\n<h3>Update WebCodecs to match the specification</h3>\n<p>WebCodecs 仕様変更により、仕様に反していた以下の 2 つの部分について修正しました。</p>\n<ul>\n<li><code>EncodeVideoChunkMetadata</code>オブジェクト内の<code>temporalLayerId</code>の場所</li>\n<li><code>VideoFrame()</code> コンストラクタでタイムスタンプ引数を指定しなかった際の挙動変更</li>\n</ul>\n<p>詳しくは<a href=\"https://chromestatus.com/feature/5667793157488640\">こちら</a>を参照してください。</p>\n<h2>その他 Chrome Platform Status に記載されていたもの</h2>\n<h3>Feature: \"paintworklet\" destination for PaintWorklet</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/Houdini\">CSS Houdini</a>の一部である<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CSS_Painting_API\">CSS Painting API</a>で使われる PaintWorklet のリクエストの送り先が<code>script</code>から<code>paintworklet</code>になりました。</p>\n<p><code>Sec-Fetch-Dest</code>HTTP リクエストヘッダと<code>FetchEvent.request.destination</code>で適用されます。</p>\n<h3>Feature: \"audioworklet\" destination for AudioWorklet</h3>\n<p><code>Web Audio API</code>のオーディオ処理を別スレッドで実行する仕組みである、<code>AudioWorklet</code>のリクエストの送り先が<code>script</code>から<code>audioworklet</code>になりました。</p>\n<p><code>Sec-Fetch-Dest</code>HTTP リクエストヘッダと<code>FetchEvent.request.destination</code>で適用されます。</p>\n<h3>Feature: Allow infinity, -infinity and NaN in CSS calc()</h3>\n<p>CSS の<code>calc()</code>関数で<code>infinity</code>, <code>-infinity</code>, <code>NaN</code> などのキーワード、及び<code>calc(1/0)</code> のように<code>infinity</code>や<code>NaN</code>に評価される式による値を許容するようになりました。</p>\n<h3>Autofill in ShadowDOM</h3>\n<p><code>autofill</code>が<code>form</code> 要素内のフォームコントロールを収集する際に、<code>ShadowDOM</code>も参照するようになります。これにより<code>Shadow DOM</code>内部の入力フォームでも<code>autofill</code>が効くようになります。</p>\n<p>Web コンポーネントを採用する際、<code>input</code>要素のようなフォームコントロールを<code>ShadowDOM</code>で包むことが一般的になっていることを受けての改善となります。</p>\n<h3>Convert adoptedStyleSheets to use ObservableArray</h3>\n<p>document や shadowRoot に<a href=\"https://developer.mozilla.org/ja/docs/Web/API/CSSStyleSheet\">CSSStyleSheet</a>を追加できる<code>adoptedStyleShetts</code>で ObservableArray が使えるようになります。</p>\n<p>今回から push などの通常の配列操作ができるようになります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">adoptedStyleSheets</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>adoptedStyleSheets<span class=\"token punctuation\">,</span> newSheet<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// これまで</span>\n<span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">adoptedStyleSheets</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">push</span><span class=\"token punctuation\">(</span>newSheet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// これから</span>\n</code></pre></div>\n<h3>Handwriting Recognition API</h3>\n<p>OS などにある既存の手書きの文字認識機能を web 上で扱えるようにするための API が追加されました。</p>\n<p>※現状この API が利用できるのは ChromeOS のみで対応言語も英語に限られています。</p>\n<p>参考:</p>\n<p><a href=\"https://chromestatus.com/feature/5263213807534080\">Feature: Handwriting Recognition API</a></p>\n<h3>Unprefixed text-emphasis properties</h3>\n<p>CSS の text-emphasis プロパティが<code>-webkit</code>なしで使えるようになります。</p>\n<p>参考:</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/text-emphasis\">https://developer.mozilla.org/en-US/docs/Web/CSS/text-emphasis</a></p>\n<h2>V8 release v9.9</h2>\n<h3>Intl.Locale extensions</h3>\n<p>Intl.Local オブジェクトに 7 つの新しいプロパティが追加されました。</p>\n<p><code>calendars</code>, <code>collations</code>, <code>hourCycles</code>, <code>numberingSystems</code>, <code>timeZones</code>では他の Intl API で使用する好ましい識別子を返します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> jaLocal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Intl<span class=\"token punctuation\">.</span>Locale</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ja\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>jaLocal<span class=\"token punctuation\">.</span><span class=\"token property-access\">calendars</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['gregory', 'japanese']</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>jaLocal<span class=\"token punctuation\">.</span><span class=\"token property-access\">collations</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['unihan', 'emoji', 'eor']</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>jaLocal<span class=\"token punctuation\">.</span><span class=\"token property-access\">hourCycles</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['h23']</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>jaLocal<span class=\"token punctuation\">.</span><span class=\"token property-access\">numberingSystems</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['latn']</span>\n</code></pre></div>\n<p><code>textInfo</code>はテキストに関連する情報をオブジェクトで返します。現状では CSS の direction プロパティで使用するような文字の並び順の値を返します。\n(rtl が右から左へ、ltr が左から右へ)</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">arabicEgyptLocale<span class=\"token punctuation\">.</span><span class=\"token property-access\">textInfo</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// { direction: 'rtl' }</span>\njapaneseLocale<span class=\"token punctuation\">.</span><span class=\"token property-access\">textInfo</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// { direction: 'ltr' }</span>\nchineseTaiwanLocale<span class=\"token punctuation\">.</span><span class=\"token property-access\">textInfo</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// { direction: 'ltr' }</span>\n</code></pre></div>\n<p><code>weekInfo</code>は週に関連する情報を返します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> jaLocal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Intl<span class=\"token punctuation\">.</span>Local</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ja\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>jaLocal<span class=\"token punctuation\">.</span><span class=\"token property-access\">weekInfo</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 返される数字は 1 が月曜日、7 が日曜日</span>\n<span class=\"token comment\">// {</span>\n<span class=\"token comment\">//   firstDay: 7,</span>\n<span class=\"token comment\">//   weekend: [6, 7],</span>\n<span class=\"token comment\">//   minimalDays: 1,</span>\n<span class=\"token comment\">// }</span>\n</code></pre></div>\n<h3>Intl Enumeration</h3>\n<p>v8 でサポートされている識別子の配列を返す<code>Intl.supportedValuesOf(code)</code>という新しい関数が追加されました。\nサポートされるコード値は以下の 6 つです。</p>\n<p>calendar</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Intl</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">supportedValuesOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"calendar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ['buddhist', 'chinese', 'coptic', 'dangi', ...]</span>\n</code></pre></div>\n<p>collation</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Intl</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">supportedValuesOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"collation\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ['big5han', 'compat', 'dict', 'emoji', ...]</span>\n</code></pre></div>\n<p>currency</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Intl</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">supportedValuesOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"currency\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ['ADP', 'AED', 'AFA', 'AFN', 'ALK', 'ALL', 'AMD', ...]</span>\n</code></pre></div>\n<p>numberingSystem</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Intl</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">supportedValuesOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"numberingSystem\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ['adlm', 'ahom', 'arab', 'arabext', 'bali', ...]</span>\n</code></pre></div>\n<p>timeZone</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Intl</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">supportedValuesOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timeZone\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ['Africa/Abidjan', 'Africa/Accra', 'Africa/Addis_Ababa', 'Africa/Algiers', ...]</span>\n</code></pre></div>\n<p>unit</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Intl</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">supportedValuesOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ['acre', 'bit', 'byte', 'celsius', 'centimeter', ...]</span>\n</code></pre></div>\n<p>この新しいメソッドによって、Web 開発者はどの値が実装でサポートされているかを簡単に発見できるようになります。</p>\n","metaData":{"title":"CSS Cascasde Layersの追加など、Chrome 99 リリースノートまとめ","author":"Saji","editor":"nus3","createdAt":"2022-03-24","summary":"Chrome 99 のリリースノートの要約です","tags":["Releasenote","Browser"],"updatedAt":"2022-03-24"}},{"slug":"css-cascade-layers","content":"<p><a href=\"https://developer.chrome.com/blog/new-in-chrome-99/\">Chrome99</a>に新機能として CSS Cascade Layers が実装され、Firefox、Edge、Safari といった主要ブラウザで CSS Cascade Layers が使えるようになりました。</p>\n<h2>CSS Cascade Layers とは</h2>\n<p>CSS の仕様において、要素にどのスタイルを適用するかはざっくりと次のような優先順位で決定されていました。(カスケード順を省いて簡略的に記述しています)</p>\n<ol>\n<li><code>!important</code></li>\n<li>インラインスタイル</li>\n<li>セレクターの詳細度</li>\n<li>同じ詳細度であれば最後に宣言されたもの</li>\n</ol>\n<p>ここに CSS Cascade Layers が導入されると次のように変わります。</p>\n<ol>\n<li><code>!important</code></li>\n<li>インラインスタイル</li>\n<li><strong>Cascade Layers</strong></li>\n<li>セレクターの詳細度</li>\n<li>同じ詳細度であれば最後に宣言されたもの</li>\n</ol>\n<h2>従来の CSS が抱える複雑な詳細度の管理</h2>\n<p>どのスタイルを適用するか判断するのにセレクターの詳細度を用いる場合は、詳細度がより高いものが適用されます。</p>\n<p>セレクターの詳細度は、高い順に次のような順番になります。</p>\n<ol>\n<li>ID セレクター: <code>#example</code></li>\n<li>クラスセレクター: <code>.example</code>, 属性セレクター: <code>[type=\"radio\"]</code>, 疑似クラス: <code>:hover</code></li>\n<li>要素型セレクター: <code>h1</code>, 擬似要素: <code>::before</code></li>\n</ol>\n<p>また、単純にセレクターの種類だけでなく、セレクターの数も詳細度に影響します。</p>\n<p>参考: <a href=\"https://specifishity.com/\">https://specifishity.com/</a></p>\n<p>CSS の記述量が増えていくにつれ、この詳細度をうまく管理できず意図しないスタイルが適用されることがままあります。意図しないスタイルが適用されないために、セレクターの命名規則を厳格にする<a href=\"http://getbem.com/naming/\">BEM</a>などの設計手法を取り入れて対応することもあります。</p>\n<p>しかし、命名規則をベースとした設計手法では、サードパーティの CSS ライブラリを使用する場合や、コントロールが難しいくらい多い記述量の CSS になってしまった場合、全体の詳細度を把握して管理することはなかなか大変です。</p>\n<h2>Cascade Layers によってどう変わるか</h2>\n<p>Cascade Layers を使うと、セレクターの詳細度よりも優先してスタイルが適用されるレイヤーを定義できるようになります。</p>\n<p>実際にコードで見てみましょう。</p>\n<h3>通常の詳細度を使ったスタイルの適用</h3>\n<p>Cascade Layers を使わない場合、同じ詳細度のセレクターは属性値での記述順に関わらず、スタイルシート内で最後に宣言されたスタイルが適用されます。</p>\n<p>次の場合、<code>.base</code> と <code>.nus3</code> は同一の詳細度です。また、1 つ目の <code>.base</code> は最後に記述されている <code>.base</code> によって上書きされます。このボタンには<code>style</code>内で一番最後に記述されている <code>.base</code> のスタイルが適用され、背景色が <code>royalblue</code> になります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\"><span class=\"token class\">.base</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">crimson</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\"><span class=\"token class\">.nus3</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">white</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\"><span class=\"token class\">.base</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">royalblue</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* このスタイルが適用される */</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>base nus3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>royalblueになる<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<p>また、セレクターの詳細度は種類によって異なり、要素セレクター &#x3C; クラスセレクター &#x3C; ID セレクター の順に高くなります。</p>\n<p>次の場合、ID セレクター(<code>#btn</code>)のほうがクラスセレクター(<code>.nus3</code>) や要素セレクター(<code>button</code>)よりも詳細度が高いので、<code>#btn</code> のスタイルが適用されます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\">button</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">coral</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\"><span class=\"token id\">#btn</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">crimson</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* このスタイルが適用される */</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\"><span class=\"token class\">.nus3</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">black</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>btn<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nus3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>crimsonになる<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<h3>Cascade Layers を使ったスタイルの適用</h3>\n<p>Cascade Layers では、まず<code>@layer</code>構文を使ってレイヤーを定義します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-css\"><code class=\"language-css\">`<span class=\"token atrule\"><span class=\"token rule\">@layer</span> base<span class=\"token punctuation\">,</span> page<span class=\"token punctuation\">,</span> utilities<span class=\"token punctuation\">;</span></span>`\n</code></pre></div>\n<p>このとき、base、page、utilities の 3 つのレイヤーを定義するとともに、レイヤーの優先順位を定義しています。</p>\n<p>この場合、各レイヤーのスタイルは後ろに定義したものほど優先度が高く、次のような優先度でスタイルが適用されます。</p>\n<ol>\n<li>utilities</li>\n<li>page</li>\n<li>base</li>\n</ol>\n<p>ここではレイヤーの定義と優先度を同時に定義していますが、この記述を省略した場合、あとに定義したレイヤーの優先度が高くなります。</p>\n<p>レイヤーの動作についてサンプルコードで詳しく見てみましょう。</p>\n<p>次のコードは、前述したコードをベースに <code>@layer</code> を追加したものです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token atrule\"><span class=\"token rule\">@layer</span> base<span class=\"token punctuation\">,</span> page<span class=\"token punctuation\">,</span> utilities<span class=\"token punctuation\">;</span></span>\n\n  <span class=\"token atrule\"><span class=\"token rule\">@layer</span> utilities</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token selector\"><span class=\"token class\">.shiny</span></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">gold</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token atrule\"><span class=\"token rule\">@layer</span> page</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token selector\"><span class=\"token id\">#btn</span></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">crimson</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token atrule\"><span class=\"token rule\">@layer</span> base</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token selector\"><span class=\"token class\">.base</span></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">crimson</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token selector\"><span class=\"token class\">.nus3</span></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">white</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shiny base nus3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>goldになる<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>btn<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shiny<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>goldになる<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<p>１つ目のボタンはレイヤーがない場合には最後に宣言されている <code>.nus3</code> の <code>white</code> が適用されていましたが、優先度の高い utilities レイヤーに定義した <code>.shiny</code> の <code>gold</code> が適用されます。</p>\n<p>２つ目のボタンはレイヤーがない場合には ID セレクターの <code>#btn</code> のスタイルが適用されていましたが、この場合も utilities レイヤーに定義した <code>.shiny</code> のほうが優先度が高いため、 <code>gold</code> が適用されます。</p>\n<p>次のサンプルページを開いて、DevTools で対象の要素をみると Cascade Layers が適用されているのがわかります。</p>\n<p><a href=\"https://c1r38o.csb.app/\">サンプルページ</a></p>\n<p><img src=\"/frontend-expert/image/css-cascade-layers/devtools.png\" alt=\"DevToolsで確認すると実際にCascade Layersが適用されている\" width=\"337\" height=\"400\" ></p>\n<p>レイヤーの適用順が utilities > page > base になってるのがわかります。</p>\n<p>このように、Cascade Layers を使うことで、詳細度ではなくレイヤーでスタイルをコントロールできるようになります。</p>\n<h3>Cascade Layers 内で<code>!important</code>を使った際のスタイルの優先順位</h3>\n<p><code>!important</code>を使っていない場合、Cascade Layers で定義したレイヤー外のスタイルが優先して適用されます。</p>\n<p>これはカスケード順が、レイヤー内 &#x3C; レイヤー外 の順に高くなっているからです。</p>\n<p>次のコードでは、レイヤー外のスタイルが適用され、ボタンの背景色が<code>white</code>になります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token atrule\"><span class=\"token rule\">@layer</span> base</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token selector\"><span class=\"token class\">.nus3</span></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">gold</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token selector\"><span class=\"token class\">.nus3</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">white</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* このスタイルが適用される */</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nus3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>whiteになる<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<p>しかし、<code>!important</code>を使ったスタイルの場合、このカスケード順が変わるので注意が必要です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token atrule\"><span class=\"token rule\">@layer</span> base</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token selector\"><span class=\"token class\">.nus3</span></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">gold</span> <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* このスタイルが適用される */</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token selector\"><span class=\"token class\">.nus3</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">white</span> <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nus3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>goldになる<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<h2>CSS フレームワークにも Cascade Layers は使える</h2>\n<p>Bootstrap や Materialize CSS、Bulma といった CSS フレームワークにも Cascade Layers を使ってレイヤーを定義できます。</p>\n<p>CSS フレームワークの一つである<a href=\"https://bulma.io/\">Bulma</a>を使って試してみましょう。</p>\n<p>本来、次のようなクラスをボタンに付与すると、Bulma で元から定義されている<code>.button.is-primary</code>が、後に追加した<code>.button-nus3</code>より詳細度が高くなり、<code>.button-nus3</code>のスタイルは適用されません。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button is-primary button-nus3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>ボタン<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@import</span> <span class=\"token string\">\"https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token atrule\"><span class=\"token rule\">@import</span> <span class=\"token string\">\"styles/page.css\"</span><span class=\"token punctuation\">;</span></span>\n\n<span class=\"token comment\">/* styles/page.cssで定義されているスタイル */</span>\n<span class=\"token selector\"><span class=\"token class\">.button-nus3</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">gold</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>しかし次のように Cascade Layers を使い、<a href=\"https://bulma.io/\">Bulma</a>の CSS を<code>base</code>のレイヤーにしつつ、画面特有のスタイルを<code>styles/page.css</code>に定義することで、詳細度の影響を気にすることなく Bulma のスタイルを上書きすることができます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@layer</span> base<span class=\"token punctuation\">,</span> page<span class=\"token punctuation\">;</span></span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@import</span> <span class=\"token string\">\"https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css\"</span> <span class=\"token function\">layer</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token atrule\"><span class=\"token rule\">@import</span> <span class=\"token string\">\"styles/page.css\"</span> <span class=\"token function\">layer</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n</code></pre></div>\n<p>対象ブラウザのサポート状況は考慮する必要がありますが、CSS の記述量が増えることが想定されるプロジェクトには、Cascade Layers をベースにした設計を検討してみてはいかがでしょうか。</p>\n<h2>参考リンクなど</h2>\n<ul>\n<li><a href=\"https://www.w3.org/TR/css-cascade-5/\">https://www.w3.org/TR/css-cascade-5/</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@layer\">https://developer.mozilla.org/en-US/docs/Web/CSS/@layer</a></li>\n<li><a href=\"https://developer.chrome.com/blog/cascade-layers/\">https://developer.chrome.com/blog/cascade-layers/</a></li>\n<li><a href=\"https://github.com/nus3/p-css-cascade-layers\">サンプル実装したリポジトリ</a></li>\n</ul>\n","metaData":{"title":"主要ブラウザで使える！CSS Cascade Layers で新しいCSS設計の手法を考える","author":"nus3","editor":["nakajmg"],"createdAt":"2022-03-22","summary":"CSS Cascade Layersを使ったスタイルの管理方法について紹介します","tags":["CSS"],"updatedAt":"2022-03-22"}},{"slug":"tc39-meeting-2022-01","content":"<p>この記事では2021年01月24日~27日に開催された TC39 meeting 88th で議題に上がったプロポーザルについて紹介します。</p>\n<h2>For Stage 4</h2>\n<p>For Stage 4 の提案はありませんでした。</p>\n<h2>For Stage 3</h2>\n<h3><a href=\"https://github.com/tc39/proposal-array-from-async/\">Array.fromAsync</a></h3>\n<p><strong>Stage 3 にはなりませんでした。</strong></p>\n<p><code>Array.fromAsync</code> は次のようにして非同期イテラブルから配列を生成するスタティックメソッドを追加するプロポーザルです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token operator\">*</span> <span class=\"token function\">asyncGen</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword control-flow\">yield</span> i <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fromAsync</span><span class=\"token punctuation\">(</span><span class=\"token function\">asyncGen</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><a href=\"https://github.com/tc39/proposal-array-from-async/issues/19\">https://github.com/tc39/proposal-array-from-async/issues/19</a> で指摘された問題のため、Stage 3 にはなりませんでした。</p>\n<h2>For Stage 2</h2>\n<h3><a href=\"https://github.com/tc39/proposal-class-brand-check\">Class brand checks</a></h3>\n<p><strong>Stage 2 にはなりませんでした</strong></p>\n<p>Class brand checks は brand check のための新しい構文を導入するプロポーザルです。</p>\n<p>brand check は TC39 内で使われる用語で、<a href=\"https://github.com/tc39/how-we-work/blob/master/terminology.md#brand-check\">https://github.com/tc39/how-we-work/blob/master/terminology.md#brand-check</a> で説明されています。</p>\n<p>brand check とは、雑に言えば「ある値があるデータ型であることを検証すること」です。たとえば <code>Array.isArray</code> は brand check です(<a href=\"https://zenn.dev/sosukesuzuki/articles/e0516a3d4c424e\"><code>instanceof</code> は厳密ではない</a>ため brand check ではありません)。</p>\n<p>以前 brand check の方法の一つである <a href=\"https://github.com/tc39/proposal-private-fields-in-in\">Ergonomic brand checks for private fields</a> についての記事を書いたので興味のある方はそちらもご覧ください。</p>\n<p><div class=\"hatena-link\"><iframe class=\"hatena-link-frame\" src=\"https://hatenablog-parts.com/embed?url=https://cybozu.github.io/frontend-expert/posts/ergonomic-brand-checks-for-private-fields\" style=\"border: none;\"></iframe></div></p>\n<p>Class branc check プロポーザルでは <code>class.hasInstance(x)</code> という新しい Meta Property を追加します。これはクラスの中でのみ使うことができ、引数として渡された値が今いるクラスのインスタンスかどうかをチェックします。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function\">isFoo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">hasInstance</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Foo</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isFoo</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">Foo</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isFoo</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n</code></pre></div>\n<h2>For Stage 1</h2>\n<h3><a href=\"https://github.com/rbuckton/proposal-enum\">enum</a></h3>\n<p><strong>Stage 1 にはなりませんでした。</strong></p>\n<p>enum は列挙型を実現するためのプロポーザルです。このプロポーザルは 4 年ほど前から存在していましたがまた動き出したようです。</p>\n<p>enum プロポーザルでは次のような構文を導入します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">enum</span> <span class=\"token maybe-class-name\">SyntaxKind</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">A</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">B</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">C</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>他のプログラミング言語の enum と構文上は似ています。</p>\n<p>しかし細部の仕様について検討すべき事項が多く、今回のミーティングでは Stage 1 に到達することはありませんでした。<a href=\"https://docs.google.com/presentation/d/14WtGmdWjEYXIXZVWJWpERF98D90_BytceAu7b7DKr5Q/edit#slide=id.g10effb28f4f_0_273\">このスライド</a>に詳しくまとまっているので興味のある方はご覧ください。</p>\n<h3><a href=\"https://github.com/tc39/proposal-reversible-string-split\">Reversible string split</a></h3>\n<p><strong>Stage 1 になりました。</strong></p>\n<p>Reversible string split は可逆(Reversible)の文字列分割のための方法を導入するプロポーザルです。</p>\n<p>JavaScript では <code>String.prototype.split</code> を使って文字列を分割できます。</p>\n<p><div class=\"hatena-link\"><iframe class=\"hatena-link-frame\" src=\"https://hatenablog-parts.com/embed?url=https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/String/split\" style=\"border: none;\"></iframe></div></p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> splitted <span class=\"token operator\">=</span> <span class=\"token string\">\"A,B,C,D,E\"</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>splitted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 'A', 'B', 'C', 'D', 'E' ]</span>\n</code></pre></div>\n<p><code>String.prototype.split</code> は第2引数として非負の整数を渡すことで、分割する数を制限できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> splitted1 <span class=\"token operator\">=</span> <span class=\"token string\">\"A,B,C,D,E\"</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>splitted1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 'A' ]</span>\n\n<span class=\"token keyword\">const</span> splitted2 <span class=\"token operator\">=</span> <span class=\"token string\">\"A,B,C,D,E\"</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>splitted2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 'A', 'B' ]</span>\n\n<span class=\"token keyword\">const</span> splitted3 <span class=\"token operator\">=</span> <span class=\"token string\">\"A,B,C,D,E\"</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>splitted3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 'A', 'B', 'C' ]</span>\n</code></pre></div>\n<p>JavaScript 以外のいくつかの言語(Perl、PHP、Ruby、Go、Rust、Java など)では第2引数を受け取った <code>String.prototype.split</code> に相当する機能は、次のように文字列の分割を行います。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> splitted2 <span class=\"token operator\">=</span> <span class=\"token string\">\"A,B,C,D,E\"</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>splitted2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 'A', 'B,C,D,E' ]</span>\n</code></pre></div>\n<p>N-1 回分割され、残りの部分が戻り値の配列の末尾に含まれています(戻り値の配列の要素数が N)。</p>\n<p>Reversible string split プロポーザルでは、このような振る舞いを持つ新しいメソッド <code>String.prototype.splitN</code> を導入します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> splitted2 <span class=\"token operator\">=</span> <span class=\"token string\">\"A,B,C,D,E\"</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">splitN</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>splitted2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [ 'A', 'B,C,D,E' ]</span>\n</code></pre></div>\n<p>このような文字列分割メソッドを使うと、次のようにして分割する前の文字列を取得できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token string\">\"A,B,C,D,E\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> separator <span class=\"token operator\">=</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> n <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">splitN</span><span class=\"token punctuation\">(</span>separator<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span>separator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<p>提案の名前に含まれている Reversible というのはこのような可逆性のことを指しているようです。</p>\n<h2>Updates</h2>\n<h3><a href=\"https://github.com/tc39/proposal-symbols-as-weakmap-keys\">Symbols as WeakMap keys</a></h3>\n<p>Symbols as WeakMap keys は Symbol を WeakMap のキーとして使えるようにするためのプロポーザルです。</p>\n<p>現在では一部情報が古くなっていますが以前このプロポーザルについて解説する記事を書いたので興味がある方はそちらもご覧ください。</p>\n<p><div class=\"hatena-link\"><iframe class=\"hatena-link-frame\" src=\"https://hatenablog-parts.com/embed?url=https://sosukesuzuki.dev/posts/symbols-as-weakmap-keys\" style=\"border: none;\"></iframe></div></p>\n<p>以前から Symbols as WeakMap keys プロポーザルのモチベーションや基本的な振る舞いについては概ね合意がとれていました。しかし、Well-knwon Symbols やグローバルシンボルレジストリに登録された Symbol (Eternal Symbol と呼ばれている)についてはどのように扱うべきかという点で TC39 メンバー内でも意見が分かれていました。</p>\n<p>今回のミーティングで Symbols as WeakMap keys チャンピョングループは、Eternal Symbol を WeakMap のキーとして使おうとするとエラーが throw されるという振る舞いを選択したことを発表しました。それにともなって、<code>WeakMap.isValidKey(x)</code>、<code>WeakSet.isValidValue(x)</code>、<code>WeakRef.isValidTarget(x)</code>、<code>FinalizationRegistry.isValidTarget(x)</code> などのいくつかのスタティックメソッドが追加される可能性があります。</p>\n<p>しかし議事録によればまだ TC39 メンバーの中で意見が分かれているため仕様の決定には時間がかかりそうです。</p>\n<h2>参考リンク</h2>\n<ul>\n<li>TC39\n<ul>\n<li><a href=\"https://github.com/tc39/agendas/blob/main/2022/01.md\">agendas/01.md at main · tc39/agendas</a></li>\n<li><a href=\"https://github.com/tc39/notes/blob/main/meetings/2022-01/jan-24.md\">notes/jan-24.md at main · tc39/notes</a></li>\n<li><a href=\"https://github.com/tc39/notes/blob/main/meetings/2022-01/jan-25.md\">notes/jan-25.md at main · tc39/notes</a></li>\n<li><a href=\"https://github.com/tc39/notes/blob/main/meetings/2022-01/jan-26.md\">notes/jan-26.md at main · tc39/notes</a></li>\n<li><a href=\"https://github.com/tc39/proposal-array-from-async/\">Proposal Array.fromAsync</a></li>\n<li><a href=\"https://github.com/tc39/proposal-symbols-as-weakmap-keys\">Proposal Symbols as WeakMap keys</a></li>\n<li><a href=\"https://github.com/tc39/proposal-class-brand-check\">Proposal <code>class.hasInstance()</code></a></li>\n<li><a href=\"https://github.com/rbuckton/proposal-enum\">Proposal enum</a></li>\n<li><a href=\"https://github.com/tc39/proposal-reversible-string-split\">Proposal Reversible string split</a></li>\n</ul>\n</li>\n<li>Babel\n<ul>\n<li><a href=\"https://github.com/babel/proposals/issues/80\">Jan 2022 · Issue #80 · babel/proposals</a></li>\n</ul>\n</li>\n</ul>\n","metaData":{"title":"ECMAScriptの最新動向 2022年01月版","author":"sosukesuzuki","createdAt":"2022-03-09","summary":"2021年01月24日~27日に開催された TC39 meeting 88th の内容を紹介します","tags":["TC39","ECMAScript"],"updatedAt":"2022-03-09"}},{"slug":"release-chrome-98","content":"<p>Chrome 98 のリリースノート関連の情報をまとめました。</p>\n<ul>\n<li><a href=\"https://developer.chrome.com/blog/new-in-chrome-98/\">https://developer.chrome.com/blog/new-in-chrome-98/</a></li>\n<li><a href=\"https://developer.chrome.com/blog/new-in-devtools-98/\">https://developer.chrome.com/blog/new-in-devtools-98/</a></li>\n<li><a href=\"https://developer.chrome.com/blog/deps-rems-98/\">https://developer.chrome.com/blog/deps-rems-98/</a></li>\n<li><a href=\"https://www.chromestatus.com/features#milestone%3D98\">https://www.chromestatus.com/features#milestone%3D98</a></li>\n</ul>\n<h2>New In Chrome (Chrome 98)</h2>\n<p>Chrome98 で新しく追加された機能です。</p>\n<h3>Opting out of auto-dark themes on Android</h3>\n<p>Chrome96 から、Android では OriginTrial として「<a href=\"https://developer.chrome.com/blog/auto-dark-theme/\">Auto Dark Themes</a>」という機能を追加しています。</p>\n<p>この機能はユーザーの OS がダークモードである場合、明るいテーマのサイトに対しブラウザが自動的に生成したダークテーマを適用するものです。</p>\n<p>今回のアップデートでは OriginTrial に登録したサイトのうち、特定のページで自動生成されるダークテーマを無効にする方法が追加されました。</p>\n<p>具体的には以下のように<code>meta</code>タグを利用して無効化することが出来ます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>color-scheme<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>only light<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n</code></pre></div>\n<p>また以下のように<code>color-scheme: only light</code>というスタイルを<code>:root</code>要素にあてることでも無効化できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\"><span class=\"token pseudo-class\">:root</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color-scheme</span><span class=\"token punctuation\">:</span> only light<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>CSS スタイルを利用する方法の優れた点として、以下のように要素ごとに自動生成されるダークテーマを無効にできる点が挙げられます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\"><span class=\"token class\">.only-light</span><span class=\"token punctuation\">,</span>\n<span class=\"token id\">#my-element</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color-scheme</span><span class=\"token punctuation\">:</span> only light<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>詳しくは<a href=\"https://developer.chrome.com/blog/auto-dark-theme/\">Auto Dark Themes on Android</a>における<a href=\"https://developer.chrome.com/blog/auto-dark-theme/#per-element-opt-out\">How to opt-out of Auto Dark Theme</a>の章を参照してください。</p>\n<h3>COLRv1 font support</h3>\n<p>COLRv1 フォントがサポートされました。</p>\n<p>COLRv1 では COLRv0 と比べて、新たにフォントのグラデーションや合成などに対応しています。また、フォントが鮮明なまま圧縮率が高いのも特徴の一つです。</p>\n<p>次の参考記事では実際にグラデーションを導入したカラーフォントや COLRv1 と Bitmap を比較してどれほど鮮明なのかを確認することができます。</p>\n<p>お使いの Chrome のバージョンを 98 にアップデートした上で、ぜひ見てみてください！</p>\n<p>参考:</p>\n<p><a href=\"https://developer.chrome.com/blog/colrv1-fonts/\">https://developer.chrome.com/blog/colrv1-fonts/</a></p>\n<h3>Emulate Chrome 100 in the UA string</h3>\n<p>ここ何回かのリリースには必ず含まれている内容ですね。</p>\n<p>Chrome のバージョンがもうすぐ 100 になるので、Chrome のバージョンを使っているような実装がある場合はバージョン番号が 3 桁になっても正しく動くかどうか確認しましょう。現在のバージョンを 100 にする<a href=\"https://developer.chrome.com/blog/force-major-version-to-100/\">#force-major-version-to-100</a>フラグを使って、既存のコードが正しく動くか確認することができます。</p>\n<h3>And more!</h3>\n<h2>What's New In DevTools (Chrome 98)</h2>\n<p>DevTools についてはこちらの日本語訳を参照ください。</p>\n<p><a href=\"https://developer.chrome.com/ja/blog/new-in-devtools-97/\">https://developer.chrome.com/ja/blog/new-in-devtools-97/</a></p>\n<h2>Deprecations and removals in Chrome 98</h2>\n<h3>Remove SDES key exchange for WebRTC</h3>\n<p>Chrome97 で記載があったものですが、98 で Shipping になりました。</p>\n<p>詳細は<a href=\"https://cybozu.github.io/frontend-expert/posts/release-chrome-97\">前回のリリースノートのまとめ</a>でも記載したので、そちらをご覧ください。</p>\n<h2>その他 Chrome Platform Status に記載されていたもの</h2>\n<h3>Add support for Promise to Blobs in clipboard item</h3>\n<p><code>ClipboardItem</code>オブジェクトに対して Promise をサポートしました。</p>\n<p>今まで、Chrome では<code>ClipboardItem</code>コンストラクターの引数として「文字列または blob に解決される Promise」を受け取ることが出来ませんでした。</p>\n<p>今回のアップデートにより<code>clipboard.write</code>API が呼ばれた時に、一旦クリップボードに書き込む Blob データを同期的に取得する必要がなくなり、ブロックすることなく非同期的に write メソッドを呼び出すことができるようになります。</p>\n<h3>CSS Color Adjust: 'only' keyword for color-scheme</h3>\n<p><code>color-scheme</code>プロパティの<code>only</code>キーワードがサポートされました。only を指定することでユーザーエージェント(ブラウザ)が要素のカラースキーマを上書きすることを禁止します。</p>\n<p>参考:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/ja/docs/Web/CSS/color-scheme\">https://developer.mozilla.org/ja/docs/Web/CSS/color-scheme</a></li>\n<li><a href=\"https://drafts.csswg.org/css-color-adjust/#color-scheme-prop\">https://drafts.csswg.org/css-color-adjust/#color-scheme-prop</a></li>\n</ul>\n<h3>FileSystemHandle::Remove() method</h3>\n<p>FileSystemHandle に<code>Remove()</code>メソッドを追加しました。</p>\n<p>今ままで<code>FileSystemHandle</code>から直接ファイルやディレクトリを削除することは不可能で、親ディレクトリの<code>FileSystemDirectoryHandle</code>から<code>RemoveEntry</code>を呼ぶ必要がありました。</p>\n<p>今回のアップデートにより「<code>showSaveFilePicker</code>から<code>FileHandle</code>を取得したが、結局保存したくなくなったのでファイルを削除したい」というような、よくあるユースケースに対応できるようになりました。</p>\n<h3>HDR CSS Media Queries: dynamic-range</h3>\n<p>CSS のメディアクエリーに<code>dynamic-range</code>が追加されました。</p>\n<p>次のサンプルコードのように、ディスプレイが HDR をサポートしてるかしていないかを<code>dynamic-range</code>で判別できるようになります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token comment\">/* HDRをサポートしていない */</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">dynamic-range</span><span class=\"token punctuation\">:</span> standard<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\"><span class=\"token class\">.contrast</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">red</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* ディスプレイがHDRをサポートしている */</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">dynamic-range</span><span class=\"token punctuation\">:</span> high<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\"><span class=\"token class\">.contrast</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">green</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>参考:</p>\n<p><a href=\"https://www.w3.org/TR/mediaqueries-5/#dynamic-range\">https://www.w3.org/TR/mediaqueries-5/#dynamic-range</a></p>\n<h3>New window.open() popup vs. window behavior</h3>\n<p><code>window.open()</code>では第 3 引数として<code>windowFeatures</code>という option を DOMString で指定できますが、今バージョンから<code>popup</code>という機能に対応するようになりました。<code> popup=yes</code>または<code>popup=1</code>のように指定することで、ポップアップウィンドウを利用して開くことをブラウザに要求することが出来ます。</p>\n<p>この変更は window.open の新しくリリースされた仕様に合わせて、相互運用性のために行われた変更です。 広報互換性のため、ポップアップやタブ/ウィンドウを開く既存の動作に変更はありません。</p>\n<h3>Private Network Access preflight requests for subresources</h3>\n<p>サブリソースに対するプライベートネットワークリクエストの前に CORS プリフライトリクエストを送信し、ターゲットサーバーからの明示的な許可を求めるようになります。</p>\n<p>プライベートネットワークリクエストとは以下のようなリクエストとのことです。</p>\n<ul>\n<li>パブリック Web サイトからプライベート IP アドレスまたはローカルホストへのリクエスト</li>\n<li>プライベートな Web サイト（イントラネットなど）からローカルホストへのリクエスト</li>\n</ul>\n<p>プライベートネットワーク上のサービスや機器(ネットワーク機器やプリンタなど)は CSRF 対策が不十分なものが多く、今回のアップデートはこれらの攻撃リスクを軽減させるための対策になります。</p>\n<h3>WritableStream controller AbortSignal</h3>\n<p><a href=\"https://developer.mozilla.org/ja/docs/Web/API/WritableStream/abort\">WritableStream.abort()</a>を実行した際に、ストリームへの進行中の書き込みの中止や終了がすぐに実行されるようになりました。</p>\n<h3>self.structuredClone()</h3>\n<p>ディープコピーができる<code>structuredClone()</code>がついに 98 で実装されました。</p>\n<p>お使いの Chrome を 98 にアップデートした上で、DevTools の Console で次のサンプルコードを試しに実行してみると<code>structuredClone()</code>で実際にディープコピーが実行されていることが確認できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> myOriginal <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">someProp</span><span class=\"token operator\">:</span> <span class=\"token string\">\"with a string value\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">anotherProp</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">withAnotherProp</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> myShallowCopy <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token spread operator\">...</span>myOriginal <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nmyShallowCopy<span class=\"token punctuation\">.</span><span class=\"token property-access\">anotherProp</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">withAnotherProp</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"a new value\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>\n  myOriginal<span class=\"token punctuation\">.</span><span class=\"token property-access\">anotherProp</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">withAnotherProp</span><span class=\"token punctuation\">,</span>\n  myShallowCopy<span class=\"token punctuation\">.</span><span class=\"token property-access\">anotherProp</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">withAnotherProp</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> myOriginal <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">someProp</span><span class=\"token operator\">:</span> <span class=\"token string\">\"with a string value\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">anotherProp</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">withAnotherProp</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> myDeepCopy <span class=\"token operator\">=</span> <span class=\"token function\">structuredClone</span><span class=\"token punctuation\">(</span>myOriginal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyDeepCopy<span class=\"token punctuation\">.</span><span class=\"token property-access\">anotherProp</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">withAnotherProp</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"a new value\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>\n  myOriginal<span class=\"token punctuation\">.</span><span class=\"token property-access\">anotherProp</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">withAnotherProp</span><span class=\"token punctuation\">,</span>\n  myDeepCopy<span class=\"token punctuation\">.</span><span class=\"token property-access\">anotherProp</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">withAnotherProp</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>参考:</p>\n<p><a href=\"https://web.dev/structured-clone/\">https://web.dev/structured-clone/</a></p>\n","metaData":{"title":"COLRv1 fontのサポートなど、Chrome 98 リリースノートまとめ","author":"nus3","editor":"Saji","createdAt":"2022-02-18","summary":"Chrome 98 のリリースノートの要約です","tags":["Releasenote","Browser"],"updatedAt":"2022-02-18"}},{"slug":"considerations-for-monorepo","content":"<p>それっぽいタイトルを付けましたが特に意味はないです。</p>\n<p><a href=\"https://cybozu.github.io/frontend-expert/posts/turborepo\">workspace を使ったコマンドを最適化して実行する Turborepo について</a>のお話で Turborepo を軽く触ってみた際に<code>npx create-turbo@latest</code>で作られる構成がとてもわかりやすく、プロダクトの初期段階からモノレポを採用するのは選択肢の 1 つとしていいのでは、と思い続編を書きました。</p>\n<p>前回と同じくサンプルのリポジトリはこちらになります。<br>\n<a href=\"https://github.com/nus3/p-turborepo/tree/main/yarn\">https://github.com/nus3/p-turborepo/tree/main/yarn</a></p>\n<h2>概要</h2>\n<ul>\n<li>モノレポを採用することで、同一リポジトリ内で自作した汎用的なライブラリやコンポーネントを複数のアプリケーションで使いまわせる</li>\n<li>モノレポの規模が大きくなってきた場合には、モノレポ内のパッケージを npm に公開することでアプリケーションとパッケージを非同期に開発できる</li>\n<li>Yarn や npm の workspace はイイゾ！</li>\n</ul>\n<h2>モノレポとは</h2>\n<p>モノレポとは本記事では npm や Yarn の workspaces 機能を使い、1 つのリポジトリ内で複数の npm パッケージを管理している構成のこととします。</p>\n<h3>npm や Yarn の workspaces</h3>\n<p>npm や Yarn の workspaces は 1 つのリポジトリ内で複数の npm パッケージを管理するための機能です。</p>\n<ul>\n<li><a href=\"https://classic.yarnpkg.com/lang/en/docs/workspaces/\">Yarn(v1)</a></li>\n<li><a href=\"https://yarnpkg.com/features/workspaces\">Yarn(v2 以降)</a></li>\n<li><a href=\"https://docs.npmjs.com/cli/v8/using-npm/workspaces\">npm</a></li>\n</ul>\n<p>workspaces を使うにはリポジトリのルート直下にある<code>package.json</code>に<code>workspaces</code>を追加します。</p>\n<p>例えば<code>apps</code>配下にアプリケーションの npm パッケージを、<code>packages</code>配下に汎用的なコンポーネント、ライブラリなどの npm パッケージを入れる場合、次のようになります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"workspaces\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"apps/*\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"packages/*\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>apps</code> 配下にある<code>nus3-a</code>というアプリケーションから <code>packages</code> 配下にある<code>nus3-ui</code>という名前の npm パッケージを使う場合、それぞれ次のような<code>package.json</code>になります。</p>\n<p><code>apps/nus3-a</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nus3-a\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"nus3-ui\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"*\"</span>\n    <span class=\"token comment\">// Yarnのv2以降であれば`workspace:`構文が使えるようになる</span>\n    <span class=\"token comment\">// REF: (nus3) https://yarnpkg.com/features/workspaces#workspace-ranges-workspace</span>\n    <span class=\"token comment\">// \"nus3-ui\": \"workspace:*\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>packages/nus3-ui</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nus3-ui\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.0\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>workspaces 内にある npm パッケージの名前が npm に公開されているパッケージ名と同じ場合は、 workspace 内の npm パッケージが優先してインストールされます。後々 workspaces 内の npm パッケージを公開する可能性がある場合、パッケージ名は npm で公開されているパッケージ名と被らない名前にした方が良いかもしれません。</p>\n<p>workspace 内の npm パッケージを依存関係に追加すると node_modules にシンボリックリンクが作成されます。次の画像のように node_modules 配下に<code>nus3-ui</code>と<code>nus3-a</code>のシンボリックリンクが追加されていることが確認できます。</p>\n<p><img src=\"/frontend-expert/image/considerations-for-monorepo/symlink.png\" alt=\"node_modulesに作成されたシンボリックリンク\" width=\"340\" height=\"101\" ></p>\n<p>シンボリックリンクにより依存する npm パッケージのコードを直接参照するので、npm に公開しバージョン管理するまでは、version は<code>0.0.0</code>、かつ、使う側は<code>\"nus3-ui\": \"*\"</code>のようにワイルドカードを指定するとバージョンのことを意識せずに管理できます。</p>\n<h3>create-turbo で作られるモノレポ構成</h3>\n<p>create-turbo(<code>npx create-turbo@latest</code>) では作られるモノレポ構成に次のようなものが含まれます。</p>\n<ul>\n<li>npm に公開せずに config をモノレポ内の別パッケージに分けて、複数のパッケージから使用する</li>\n<li>React を使った汎用的なコンポーネント(tsx)を別パッケージに分けて アプリケーション(Next.js)で使用する</li>\n</ul>\n<p>それぞれ見ていきましょう。</p>\n<h4>npm に公開せずに config をモノレポ内の別パッケージに分けて、複数のパッケージから使用する</h4>\n<p>ESLint や Stylelint の config は npm に公開することで、異なるプロジェクトで共通の設定を使えます。サイボウズでは<a href=\"https://github.com/cybozu/eslint-config\">@cybozu/eslint-config</a>や<a href=\"https://github.com/cybozu/stylelint-config\">@cybozu/stylelint-config</a>として npm に公開しています。</p>\n<p>モノレポ内であれば ESLint や Stylelint の設定を npm に公開・管理せずに共有することもできます。</p>\n<p><code>packages/nus3-config</code><br>\nで共通の ESLint や TSConfig を定義して、<code>package.json</code> の<code>files</code> に指定します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nus3-config\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"files\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"eslint-preset.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"tsconfig.base.json\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"tsconfig.nextjs.json\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"tsconfig.react-library.json\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>apps/nus3-a</code>\nで<code>nus3-config</code>を追加し、<code>nus3-config</code>から TSConfig や ESLint のルールを適用します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nus3-a\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"eslint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"8.6.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"nus3-config\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"*\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>apps/nus3-a/tsconfig.json</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nus3-config/tsconfig.nextjs.json\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>apps/nus3-a/.eslintrc</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nus3-config/eslint-preset\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4>React を使った汎用的なコンポーネント(tsx)を別パッケージに分けて アプリケーション(Next.js)で使用する</h4>\n<p>create-turbo では汎用的な React コンポーネントを tsx ファイルのまま <code>packages</code> 配下の npm パッケージで管理し、Next.js の<a href=\"https://github.com/martpie/next-transpile-modules\">plugin</a>を使って アプリケーション 側でトランスパイルしています。</p>\n<p><code>packages/nus3-ui</code><br>\nで React(tsx)のコンポーネントを実装します。実装した tsx ファイルのパスをそのまま<code>main</code>と<code>types</code>に追加します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nus3-ui\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./index.tsx\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"types\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./index.tsx\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@types/react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"17.0.37\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@types/react-dom\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"17.0.11\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"typescript\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"4.5.4\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>packages/nus3-ui/index.tsx</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">VFC</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">Button</span><span class=\"token operator\">:</span> <span class=\"token function-variable function\">VFC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">ボタン</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>apps/nus3-a</code><br>\n<code>nus3-ui</code>の tsx ファイルを<code>nus3-a</code>で<code>next-transpile-modules</code>を使ってトランスパイルします。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nus3-a\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"next-transpile-modules\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"9.0.0\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>apps/nus3-a/next.config.js</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> withTM <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"next-transpile-modules\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"nus3-ui\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token function\">withTM</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h2>フロントエンドのモノレポ戦略</h2>\n<p>筆者のこれまでの経験では、創業して間もない会社やプロダクトの初期フェーズで、複数のアプリケーションの開発が並列して始まることが多くありました。そういった状況では、モノレポを採用しておくと複数のアプリケーションで共通したコンポーネントやライブラリを少ないコストで使用できます。</p>\n<p>また、モノレポ内で共通して使っているパッケージに変更を加える際に、その影響範囲が把握できないくらいモノレポの規模が大きくなった場合には、パッケージを npm に公開してバージョン管理することで、バージョンの変更タイミングを各々のアプリケーションに任せることができ、アプリケーションとパッケージの開発を非同期に行うことができます。</p>\n<p>このように、初期段階では汎用的な npm パッケージをアセットとして複数のアプリケーションに提供することで開発スピードを上げられ、また、規模が大きくなってきた場合はパッケージを npm に公開するといった方針をとることもできます。</p>\n<p>もちろん、1 つのリポジトリですべてのパッケージを管理することやコードベースが大きく複雑になることなどデメリットもあり、モノレポを採用することが適切ではない場合もあります。メリット・デメリットを踏まえつつ、フロントエンドの技術選定の中にモノレポの採用を選択肢の 1 つとして入れてもいいかもしれません。</p>\n","metaData":{"title":"フロントエンドのモノレポ構成はスケーリングの夢を見るか","author":"nus3","editor":["nakajmg"],"createdAt":"2022-01-31","summary":"Turborepoのstarterでできるモノレポ構成からスケーリングするフロントエンドの構成について考える","tags":["Monorepo","Turborepo"],"updatedAt":"2022-01-31"}},{"slug":"tc39-meeting-2021-12","content":"<p>TC39 の 87 回目のミーティングが 12月14日 ~ 12月15日に開催されました。このミーティングで議題に上がった提案とそのステージの移動について紹介します。</p>\n<h2>For Stage 4</h2>\n<p><strong>For Stage 4 の提案はありませんでした</strong></p>\n<h2>For Stage 3</h2>\n<h3><a href=\"https://github.com/tc39/proposal-array-grouping\">Array Grouping</a></h3>\n<p><strong>Stage 3 になりました</strong></p>\n<p>Array Grouping は <code>Array.prototype.groupBy</code> と <code>Array.prototype.groupByToMap</code> を追加するプロポーザルです。</p>\n<p>2021 年 10 月のミーティングで Stage 2 になったばかりですが、今回のミーティングで Stage 3 になりました。</p>\n<p>また、今回から <code>Array.prototype.groupByToMap</code> が追加されています。</p>\n<p>これは <code>groupBy</code> の結果が <code>Map</code> になったものです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> odd  <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">odd</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> even <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">even</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">groupByToMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> num <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> even<span class=\"token operator\">:</span> odd<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Map { {odd: true}: [1, 3, 5], {even: true}: [2, 4] }</span>\n</code></pre></div>\n<h2>For Stage 2</h2>\n<h3><a href=\"https://github.com/tc39/proposal-array-from-async/\">Array.fromAsync</a></h3>\n<p><strong>Stage 2 になりました</strong></p>\n<p><code>Array.fromAsync</code> は非同期イテラブルから配列を生成するためのスタティックメソッドを追加するプロポーザルです。</p>\n<p>JavaScript では <code>Array.from</code> を使ってイテラブルから配列を生成できます。しかし、非同期イテラブルから配列を生成することはできません。</p>\n<p>このプロポーザルによって追加される <code>Array.fromAsync</code> メソッドを使うと次のようにして非同期イテラブルから配列を生成できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token operator\">*</span> <span class=\"token function\">asyncGen</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword control-flow\">yield</span> i <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fromAsync</span><span class=\"token punctuation\">(</span><span class=\"token function\">asyncGen</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3><a href=\"https://github.com/tc39/proposal-regexp-r-escape\">RegExp <code>\\R</code> escape</a></h3>\n<p><strong>Stage 2 になりませんでした</strong></p>\n<p>RegExp <code>\\R</code> escape は以前 <a href=\"https://github.com/rbuckton/proposal-regexp-features\">RegExp Language Features</a> として提案されていた正規表現の機能群の１つで、正規表現内で line terminator とシンプルにマッチングさせるために新しく <code>\\R</code> を導入する提案です。</p>\n<p>この機能は <code>u</code> もしくは <code>v</code> フラグが有効になっているときのみ有効になります。そして、大まかには次のパターンと等価です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token operator\">?</span><span class=\"token operator\">></span>\\r\\n<span class=\"token operator\">?</span><span class=\"token operator\">|</span><span class=\"token punctuation\">[</span>\\x0A<span class=\"token operator\">-</span>\\x0C\\x85\\u<span class=\"token punctuation\">{</span><span class=\"token number\">2028</span><span class=\"token punctuation\">}</span>\\u<span class=\"token punctuation\">{</span><span class=\"token number\">2029</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>この正規表現の機能は Perl をはじめとする多くの正規表現エンジンに実装されていて、TC39 においてもそのユースケースは認められているようです。</p>\n<p>しかし、<a href=\"https://github.com/tc39/proposal-regexp-set-notation\">RegExp Set Notation Proposal</a> の sequece properties によって同等の機能が実現できる可能性があるためその方向で調査しなおすべきだという結論になり Stage 2 には到達しませんでした。</p>\n<h3><a href=\"https://github.com/tc39/proposal-regexp-modifiers\">RegExp Modifiers</a></h3>\n<p><strong>Stage 2 になりました</strong></p>\n<p>RegExp Modifiers は <code>\\R</code> escape と同じようにもともと RegExp Language Features の機能の１つでした。</p>\n<p>この提案は正規表現パターン内でのフラグの変更を可能にします。</p>\n<p>例を示します。</p>\n<p>次の例中の正規表現パターン全体には <code>i</code> フラグが適用されてます。しかし２つめの <code>[a-z]</code> は <code>?-i:</code> という RegExp Modifiers の構文を使って <code>i</code> フラグを無効にしてます。このとき一文字目では大文字小文字が無視されるものの、二文字目では大文字小文字が無視されません。</p>\n<p>したがってこのパターンは <code>\"ab\"</code> や <code>\"Ab\"</code> にはマッチし <code>\"aB\"</code> にはマッチしません。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> re1 <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token anchor function\">^</span><span class=\"token char-class\"><span class=\"token char-class-punctuation punctuation\">[</span><span class=\"token range\">a<span class=\"token range-punctuation operator\">-</span>z</span><span class=\"token char-class-punctuation punctuation\">]</span></span><span class=\"token group punctuation\">(</span><span class=\"token quantifier number\">?</span>-i:<span class=\"token char-class\"><span class=\"token char-class-punctuation punctuation\">[</span><span class=\"token range\">a<span class=\"token range-punctuation operator\">-</span>z</span><span class=\"token char-class-punctuation punctuation\">]</span></span><span class=\"token group punctuation\">)</span><span class=\"token anchor function\">$</span></span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">;</span>\nre1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ab\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nre1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ab\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nre1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n</code></pre></div>\n<h3><a href=\"https://github.com/tc39/proposal-regexp-buffer-boundaries\">RegExp Buffer Boundaries</a></h3>\n<p><strong>Stage 2 になりました</strong></p>\n<p>RegExp Buffer Boundaries も RegExp Language Features の機能の１つでした。</p>\n<p>この提案は、それぞれ入力の最初と最後にマッチする <code>\\A</code> と <code>\\z</code> を導入します。<code>m</code> フラグの影響を受けないことを除けば <code>^</code> と <code>$</code> に似ています。</p>\n<p><code>^</code> と <code>$</code> はそれぞれ最初と最後にマッチしますが、<code>m</code> フラグが有効になっているときは行頭と行末にマッチします。しかし RegExp Buffer Boundaries が導入する <code>\\A</code> と <code>\\z</code> は、たとえ <code>m</code> フラグが有効であっても入力の最初と最後にマッチします。</p>\n<p>例を示します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\"><span class=\"token anchor function\">\\A</span>foo<span class=\"token alternation keyword\">|</span><span class=\"token anchor function\">^</span>bar</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">um</span></span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>このパターンでは <code>foo</code> に <code>\\A</code> がついています。したがって入力の最初が <code>foo</code> の文字列にマッチします。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">re<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nre<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<p>しかし入力の最初ではなく行頭が <code>foo</code> の文字列にはマッチしません。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">re<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nfoo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n</code></pre></div>\n<p><code>bar</code> には <code>^</code> がついています。パターン全体で <code>m</code> フラグが有効になっているので、入力の先頭と行頭が <code>bar</code> の文字列にマッチします。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">re<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nre<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bar\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nre<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nbar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<h2>For Stage 1</h2>\n<h2>Updates</h2>\n<p>ステージの移動はないものの、アップデートがあった提案です。</p>\n<h3><a href=\"https://github.com/tc39/proposal-temporal\">Temporal</a></h3>\n<p>いくつかの仕様上の軽微な修正がありました。修正箇所について説明した<a href=\"https://ptomato.name/talks/tc39-2021-12/#1\">スライド</a>が公開されています。</p>\n<h3><a href=\"https://github.com/tc39/proposal-decimal\">Decimal</a></h3>\n<p>Decimal は現在 Stage 1 ですが、2022 年に Stage 2 に到達することを目指しているそうです。進捗を共有するための<a href=\"https://drive.google.com/file/d/1qdieei11dZgDY_KnJhSBcFyHTMZOmCJr/view\">スライド</a>が公開されています。</p>\n<h3><a href=\"https://github.com/tc39/proposal-destructuring-private\">Destructuring Private Fields</a></h3>\n<p>Destructuring Private Fields が提案された当初は小さな修正で十分だと考えられていました。しかし真剣に検討してみるといくつかの仕様上の難しい問題が明らかになったそうです。そこで再度レビュワーを募りレビューをやり直すことが決定しました。</p>\n<h3><a href=\"https://github.com/tc39/proposal-shadowrealm\">Shadow Realms</a></h3>\n<p>いくつかの仕様上の重要な変更があったようです。詳しくは<a href=\"https://docs.google.com/presentation/d/12PM5c4_yUnqXHjvACh8HEN5oJwgei-0T0hX_hlqjfDU/edit#slide=id.ge435a9058a_0_0\">スライド</a>に記載されています。</p>\n<h3><a href=\"https://github.com/tc39/proposal-record-tuple/\">Records and Tuples</a></h3>\n<p>Record と Tuple の中で通常のオブジェクトを扱う方法について議論されました。その方法とその懸念についての Decision Tree が<a href=\"https://drive.google.com/file/d/1lVYn8_sHecqxW08vN5Tu7rXZn7GemBqO/view\">スライド</a>として公開されています。</p>\n<h2>Normative Changes</h2>\n<h3><a href=\"https://github.com/tc39/ecma262/pull/2106\"><code>import.meta[Symbol.toStringTag]</code> の追加</a></h3>\n<p><strong>合意は得られませんでした</strong></p>\n<p><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag\"><code>Symbol.toStringTag</code></a> という Well-known Symbol があります。\nこの Symbol は <code>Object.prototype.toString()</code> によって表示される文字列の決定に使われます。</p>\n<p>具体的な例を示します。</p>\n<p>オブジェクト <code>foo</code> の <code>[Symbol.toStringTag]</code> に <code>\"I'm foo\"</code> という文字列をセットしておくと、<code>foo.toString()</code> は <code>[object I'm foo]</code> になります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token known-class-name class-name\">Symbol</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">toStringTag</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token string\">\"I'm foo\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"[object I'm foo]\"</span>\n</code></pre></div>\n<p>今回のミーティングでは <code>import.meta</code> の <code>[Symbol.toStringTag]</code> に <code>\"ImportMeta\"</code> という文字列を設定するという修正について議論されました。</p>\n<p>この挙動についての Issue は <code>import.meta</code> の策定時にも存在しましたが、そのときすでに <code>import.meta</code> が Stage 4 を達成していたことからクローズされました。</p>\n<p>そして今回のミーティングでもこの仕様の修正についての合意は得られませんでした。この修正のための Pull Request が作成された時点で以下のような懸念が公開されていました。</p>\n<ul>\n<li><code>import.meta</code> は、ECMAScript の範囲では <a href=\"https://tc39.es/ecma262/#sec-hostgetimportmetaproperties\"><code>HostGetImportMetaProperties</code></a> というホスト定義の abstract operation によって中身が決定されるオブジェクトであるということしか決まっておらず、ホストにとって必要であればホスト側で <code>import.meta</code> の <code>Symbol.toStringTag</code> を定義できる。</li>\n<li>仕様内で作成される他のオブジェクトとは異なり、<code>import.meta</code> はホストのデータによって生成されるものであり、ECMAScript の範囲でプロパティを生成することを考慮したものではない。</li>\n</ul>\n<h2>参考リンク</h2>\n<ul>\n<li>TC39\n<ul>\n<li><a href=\"https://github.com/tc39/agendas/blob/main/2021/12.md\">Agenda for the 87th meeting of Ecma TC39</a></li>\n<li><a href=\"https://github.com/tc39/ecma262/pull/2106\">Normative: Add import.meta[Symbol.toStringTag]</a></li>\n<li><a href=\"https://github.com/tc39/proposal-array-grouping\">Proposal Array Grouping</a></li>\n<li><a href=\"https://github.com/tc39/proposal-shadowrealm\">Proposal Shadow Realms</a></li>\n<li><a href=\"https://github.com/tc39/proposal-array-from-async/\">Proposal <code>Array.fromAsync</code></a></li>\n<li><a href=\"https://github.com/rbuckton/proposal-regexp-features\">Proposal RegExp Language Features</a></li>\n<li><a href=\"https://github.com/tc39/proposal-regexp-r-escape\">Proposal RegExp <code>\\R</code> escape</a></li>\n<li><a href=\"https://github.com/tc39/proposal-regexp-set-notation\">Proposal RegExp Set Notation</a></li>\n<li><a href=\"https://github.com/tc39/proposal-regexp-buffer-boundaries\">Proposal RegExp Buffer Boundaries</a></li>\n<li><a href=\"https://github.com/tc39/proposal-regexp-modifiers\">Proposal RegExp Modifiers</a></li>\n<li><a href=\"https://github.com/tc39/proposal-temporal\">Proposal Temporal</a></li>\n<li><a href=\"https://github.com/tc39/proposal-shadowrealm\">Proposal Shadow Realms</a></li>\n<li><a href=\"https://github.com/tc39/proposal-record-tuple/\">Proposal Records and Tuples</a></li>\n<li><a href=\"https://github.com/tc39/proposal-destructuring-private\">Proposal Destructuring Private Fields</a></li>\n</ul>\n</li>\n<li>Babel\n<ul>\n<li><a href=\"https://github.com/babel/proposals/issues/78\">Dec 2021 · Issue #78 · babel/proposals</a></li>\n</ul>\n</li>\n<li>ECMA262\n<ul>\n<li><a href=\"https://tc39.es/ecma262/#prod-ImportMeta\"><code>import.meta</code></a></li>\n<li><a href=\"https://tc39.es/ecma262/#sec-hostgetimportmetaproperties\"><code>HostGetImportMetaProperties</code></a></li>\n</ul>\n</li>\n</ul>\n","metaData":{"title":"ECMAScriptの最新動向 2021年12月版","author":"sosukesuzuki","createdAt":"2022-01-24","summary":"2021年12月14日~15日に開催された TC39 meeting 87th の内容を紹介します","tags":["TC39","ECMAScript"],"updatedAt":"2022-01-24"}}],"totalPage":3,"pageNum":1},"__N_SSG":true}
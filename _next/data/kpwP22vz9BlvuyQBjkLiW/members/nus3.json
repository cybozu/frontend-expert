{"pageProps":{"member":{"name":"nus3","twitterId":"nus3_","githubUsername":"nus3","zennUsername":"nus3","active":true},"posts":[{"type":"zenn","slug":"__zenn-css-anchor-positioning","href":"https://zenn.dev/cybozu_frontend/articles/css-anchor-positioning","metaData":{"title":"🪧 CSSだけでtooltipの位置を指定できるCSS Anchor Positioningについて","author":"nus3","createdAt":"2023-06-01","tags":["zenn"]}},{"type":"zenn","slug":"__zenn-web-streams-api","href":"https://zenn.dev/cybozu_frontend/articles/web-streams-api","metaData":{"title":"♨ Streaming with SuspenseのStreamingを理解する","author":"nus3","createdAt":"2023-05-11","tags":["zenn"]}},{"type":"zenn","slug":"__zenn-origin-private-file-system","href":"https://zenn.dev/cybozu_frontend/articles/origin-private-file-system","metaData":{"title":"📁 Origin Private File Systemを使ってブラウザ上でファイルを高速に操作しよう","author":"nus3","createdAt":"2023-04-21","tags":["zenn"]}},{"type":"zenn","slug":"__zenn-picture-in-picture-api","href":"https://zenn.dev/cybozu_frontend/articles/picture-in-picture-api","metaData":{"title":"📺 オリジントライアルになったDocument Picture-in-Picture APIを試してみよう","author":"nus3","createdAt":"2023-04-13","tags":["zenn"]}},{"type":"zenn","slug":"__zenn-frontend_weekly_20230307","href":"https://zenn.dev/cybozu_frontend/articles/frontend_weekly_20230307","metaData":{"title":"⛓️ Denoでpackage.jsonがサポートされたなど : Cybozu Frontend Weekly (2023-03-07号)","author":"nus3","createdAt":"2023-03-09","tags":["zenn"]}},{"type":"zenn","slug":"__zenn-frontend_weekly_20230207","href":"https://zenn.dev/cybozu_frontend/articles/frontend_weekly_20230207","metaData":{"title":"🎸 Webアプリの主流がCSRからSSRに？など : Cybozu Frontend Weekly (2023-02-07号)","author":"nus3","createdAt":"2023-02-09","tags":["zenn"]}},{"type":"zenn","slug":"__zenn-2022-pickup-new-features","href":"https://zenn.dev/cybozu_frontend/articles/2022-pickup-new-features","metaData":{"title":"🌊 2022年にWebブラウザに実装された気になる機能を実装例とともに紹介","author":"nus3","createdAt":"2022-12-16","tags":["zenn"]}},{"type":"markdown","href":"/posts/frontend-weekly-2022-06","slug":"frontend-weekly-2022-06","content":"<p>フロントエンドエキスパートチームでは週に 1 回、最近のフロントエンド情報を見てワイワイする Cybozu Frontend Weekly というイベントを社内で開催しています。</p>\n<p>今回は Cybozu Frontend Weekly で 6 月に話題に上がった記事をご紹介します。</p>\n<h2>💬 Languages</h2>\n<h3><a href=\"https://nodejs.org/en/blog/announcements/nodejs16-eol/\">Bringing forward the End-of-Life Date for Node.js 16 | Node.js</a></h3>\n<p>Node.js v16 の EOL が 当初の予定より 7 ヶ月早まり 2023/9/11 になるとのことです。OpenSSL 1.1.1 側の EOL にあわせるのが理由だそうです。</p>\n<h2>📖 Framework, Library</h2>\n<h3><a href=\"https://zenn.dev/mugi/articles/334f9556095a07\">RedwoodJS を Ruby on Rails と比較してみる</a></h3>\n<p>チームの<a href=\"https://twitter.com/mugi_uno\">@mugi_uno</a> が書いた RedwoodJS と Ruby on Rails の比較記事。本人曰く、RedwoodRecord という ORM が Rails の ActiveRecord にかなり近い体験を提供してくれるので感動したらしいです。また、RedwoodJS は RedwoodJS を利用する企業に対してファンドを実施するなど市場拡大に対して精力的なようです。</p>\n<h3><a href=\"https://github.com/eslint/rfcs/pull/91\">feat: create \"@eslint-community GitHub organization\" RFC #91</a></h3>\n<p>eslint-community org を作って ESLint に関係あるパッケージのメンテナンスをするという提案が進行しているようです。</p>\n<h3><a href=\"https://tailwindcss.com/blog/2022-05-23-headless-ui-v1-6-tailwind-ui-team-management\">Headless UI v1.6, Tailwind UI team management, Tailwind Play improvements, and more</a></h3>\n<p>Tailwind CSS のチームが最近行った活動のまとめです。</p>\n<ul>\n<li>HeadlessUI の 1.6 リリース</li>\n<li>VSCode の Tailwind CSS IntelliSense の拡張に Tailwind CSS language mode が追加</li>\n<li>Tailwind CSS templates が発表予定</li>\n</ul>\n<h3><a href=\"https://github.com/lerna/lerna/releases/tag/v5.0.0\"><code>lerna/lerna</code> v5.0.0 Release</a></h3>\n<p>Lerna が Nx に委譲されてから初のアップデートです。内部処理が Nx に切り替わリました。</p>\n<h3><a href=\"https://docs.google.com/presentation/d/1tPaimqwJEXinPYifwUvA4gLCI6SezZsViuJvieWGAug/edit\">State of Vuenion</a></h3>\n<p>Vue Amsterdam での Evan you の発表資料です。</p>\n<p>Vue 2.7 の内容や、直近リリース予定の Vue 3.3 での変更内容、エコシステムの状況などに加え、Vue の将来向けに検討されている vue/vapor と呼ばれる新しいコンパイルの仕組みについてなどが紹介されています。</p>\n<h3><a href=\"https://prettier.io/blog/2022/06/14/2.7.0.html\">Prettier 2.7</a></h3>\n<p><a href=\"https://twitter.com/PrettierCode/status/1536604535497854977\">https://twitter.com/PrettierCode/status/1536604535497854977</a></p>\n<p>Prettier 2.7 がリリースされました。\nTypeScript 4.7 サポートに加え、高速化のための --cache オプションが追加されたそうです。\nチェック高速化に寄与するとのことなので、ぜひ試していきましょう。</p>\n<h3><a href=\"https://twitter.com/kevmodrome/status/1534275183334277121?s=20&#x26;t=Fm2pmMNFKzMqzQTiUtLQSw\">Apple Music の新しいサイトで Svelte が採用された</a></h3>\n<p><a href=\"https://bundlescanner.com/website/beta.music.apple.com%2Fus%2Fbrowse/all\">https://bundlescanner.com/website/beta.music.apple.com%2Fus%2Fbrowse/all</a><br>\nを見ると、Svelte が採用されているのがわかります。</p>\n<h3><a href=\"https://storybook.js.org/blog/component-encyclopedia/\">Component Encyclopedia のアップデート</a></h3>\n<p>さまざまなプロダクトの Storybook コンポーネントを見れる Component Encyclopedia がアップデートされました。各コンポーネントの検索機能の追加などが追加されています。</p>\n<p>fonts や token といった検索を利用することで、 Design token の参考にできたり、デザインシステムやコンポーネントの見せ方、Storybook の Addon 活用方法なども調べることができ、辞書的に活用できるそうです。</p>\n<h3><a href=\"https://astro.build/blog/astro-1-release-update/\">Astro 1.0 Release Update | Astro</a></h3>\n<p>Astro v1.0.0 のリリースが 7 月下旬ごろになるそうです。パフォーマンス改善や Bugfix などにもう少し時間を費やすとのことです。</p>\n<h2>🖥 Browsers</h2>\n<h3><a href=\"https://web.dev/preload-scanner/\">Don't fight the browser preload scanner</a></h3>\n<p>重要なリソースの発見を遅らせるような処理は preload scanner と相性が悪く、かえってパフォーマンスが落ちることがあるので気をつけようねという記事です。</p>\n<p>Frontend Weekly 内では、 preload scanner を邪魔しないためにも SSR のような事前に最適化が施されるような処置をした方が良いのかという議論も。SSR を実施したからといって(lazy load 等の)クライアント側の最適化手法をスキップできるわけではないため、必ずしも SSR をすれば解決できる課題ではないという話をしたりしていました。</p>\n<h3><a href=\"https://webkit.org/blog/12824/news-from-wwdc-webkit-features-in-safari-16-beta/\">News from WWDC22: WebKit Features in Safari 16 Beta</a></h3>\n<p>Safari 16 Beta がきますという記事。Container Query や Web Push の実装や sub grid、flex box といったレイアウトのインスペクタが追加されるそうです。</p>\n<h3><a href=\"https://deep-space.blue/web/2263\">IE11 とさよならしたら全力で使える HTML/CSS まとめ【40 個以上】</a></h3>\n<p>IE11 のサポートを考えなかった場合に使えるようになる HTML, CSS のまとめです。position: sticky や object-fit など、必須に近いものが紹介されているので抑えておくと良さそうです。</p>\n<h2>📏 Web Standard</h2>\n<h3><a href=\"https://www.mnot.net/blog/2022/06/06/http-core\">A New Definition of HTTP</a></h3>\n<p>HTTP 関連 RFC がどばっと公開されました。</p>\n<ul>\n<li>RFC 9110: HTTP Semantics</li>\n<li>RFC 9111: HTTP Caching</li>\n<li>RFC 9112: HTTP/1.1</li>\n<li>RFC 9113: HTTP/2</li>\n<li>RFC 9114: HTTP/3</li>\n<li>RFC 9163: Expect-CT Extension for HTTP</li>\n<li>RFC 9204: QPACK: Field Compression for HTTP/3</li>\n<li>RFC 9205: Building Protocols with HTTP</li>\n<li>RFC 9209: The Proxy-Status HTTP Response Header Field</li>\n<li>RFC 9211: The Cache-Status HTTP Response Header Field</li>\n<li>RFC 9213: Targeted HTTP Cache Control</li>\n<li>RFC 9218: Extensible Prioritization Scheme for HTTP</li>\n<li>RFC 9220: Bootstrapping WebSockets with HTTP/3</li>\n<li>RFC 9230: Oblivious DNS over HTTPS</li>\n</ul>\n<p>各 RFC については<a href=\"https://blog.jxck.io/entries/2022-06-16/HTTP-RFCs.html\">HTTP 関連 RFC が大量に出た話と 3 行まとめ</a>で概要が紹介されています。</p>\n<p>なお、RFC 公開を祝い HTTP RFC Publication Study という、\n複数人の方で内容のキャッチアップを行うイベントが行われ、その動画が YouTube 上にアーカイブとして残っています。\n<a href=\"https://www.youtube.com/watch?v=_hfG0HCufbs\">https://www.youtube.com/watch?v=_hfG0HCufbs</a></p>\n<h3><a href=\"https://zenn.dev/jxck/books/cache-anatomia\">Web 技術解体新書「第二章 Cache 解体新書」リリース</a></h3>\n<p>Web における Caching の概念を <code>Cache-Control</code> だけでなく関連するあらゆる仕様の側面から解説した Zenn book がリリースされました。</p>\n<h2>🎨 Design</h2>\n<h3><a href=\"https://www.joshwcomeau.com/css/surprising-truth-about-pixels-and-accessibility/\">The Surprising Truth About Pixels and Accessibility</a></h3>\n<p>px と rem/em どっち使う？という話。\nフォントは rem 等を使って padding なんかは px でいいよね(場合による)、みたいな話でした。</p>\n<p>px と rem のマッピングを良い感じにするために body のフォントサイズに 62.5% を設定するのは良くないよという話が印象的でした。\n(1rem はあくまでユーザが読みやすい標準的なサイズにすべきという思想らしいです)</p>\n<h3><a href=\"https://material.io/blog/roboto-flex\">Roboto … But Make It Flex</a></h3>\n<p>Google Fonts に Roboto Flex という新しい Variable Fonts が追加されました。</p>\n<h3><a href=\"https://web.dev/building-a-button-component/\">Building a button component</a></h3>\n<p>ダークモード・ライトモードや a11y を意識したボタンコンポーネントの作り方の紹介です。<code>:is</code> を利用した <code>:hover</code>, <code>:focus</code> の一括設定や、 outline-offset を利用したフォーカス時のスタイル制御など、実際にすぐ現場で使えそうな例も多かったです。</p>\n<h3><a href=\"https://webkit.org/blog/12662/customizing-color-fonts-on-the-web/\">Customizing Color Fonts on the Web</a></h3>\n<p>Safari 15.4 から<code>@font-palette-values</code>がサポートされました。この記事では実際に<code>@font-palette-values</code>を使ってカラーフォントに定義されているパレットを指定する方法や、パレットの色を上書きする方法が紹介されています。</p>\n<hr>\n<p>nus3 が印象に残っているのは、<a href=\"https://web.dev/building-a-button-component/#interactive-focus-ring\">フォーカスされているボタンのスタイリング</a>の話です。フォーカスされたボタンのインタラクティブなデザインをシンプルな CSS で実装できるのでおすすめです！</p>\n","metaData":{"title":"Cybozu Frontend Weekly 2022年6月まとめ","author":"nus3","createdAt":"2022-07-25","summary":"6月にFrontend Weeklyで話したフロントエンドの話題まとめ","tags":["Cybozu","FrontendExpert","FrontendWeekly"],"updatedAt":"2022-07-25"}},{"type":"markdown","href":"/posts/css-cascade-layers","slug":"css-cascade-layers","content":"<p><a href=\"https://developer.chrome.com/blog/new-in-chrome-99/\">Chrome99</a>に新機能として CSS Cascade Layers が実装され、Firefox、Edge、Safari といった主要ブラウザで CSS Cascade Layers が使えるようになりました。</p>\n<h2>CSS Cascade Layers とは</h2>\n<p>CSS の仕様において、要素にどのスタイルを適用するかはざっくりと次のような優先順位で決定されていました。(カスケード順を省いて簡略的に記述しています)</p>\n<ol>\n<li><code>!important</code></li>\n<li>インラインスタイル</li>\n<li>セレクターの詳細度</li>\n<li>同じ詳細度であれば最後に宣言されたもの</li>\n</ol>\n<p>ここに CSS Cascade Layers が導入されると次のように変わります。</p>\n<ol>\n<li><code>!important</code></li>\n<li>インラインスタイル</li>\n<li><strong>Cascade Layers</strong></li>\n<li>セレクターの詳細度</li>\n<li>同じ詳細度であれば最後に宣言されたもの</li>\n</ol>\n<h2>従来の CSS が抱える複雑な詳細度の管理</h2>\n<p>どのスタイルを適用するか判断するのにセレクターの詳細度を用いる場合は、詳細度がより高いものが適用されます。</p>\n<p>セレクターの詳細度は、高い順に次のような順番になります。</p>\n<ol>\n<li>ID セレクター: <code>#example</code></li>\n<li>クラスセレクター: <code>.example</code>, 属性セレクター: <code>[type=\"radio\"]</code>, 疑似クラス: <code>:hover</code></li>\n<li>要素型セレクター: <code>h1</code>, 擬似要素: <code>::before</code></li>\n</ol>\n<p>また、単純にセレクターの種類だけでなく、セレクターの数も詳細度に影響します。</p>\n<p>参考: <a href=\"https://specifishity.com/\">https://specifishity.com/</a></p>\n<p>CSS の記述量が増えていくにつれ、この詳細度をうまく管理できず意図しないスタイルが適用されることがままあります。意図しないスタイルが適用されないために、セレクターの命名規則を厳格にする<a href=\"http://getbem.com/naming/\">BEM</a>などの設計手法を取り入れて対応することもあります。</p>\n<p>しかし、命名規則をベースとした設計手法では、サードパーティの CSS ライブラリを使用する場合や、コントロールが難しいくらい多い記述量の CSS になってしまった場合、全体の詳細度を把握して管理することはなかなか大変です。</p>\n<h2>Cascade Layers によってどう変わるか</h2>\n<p>Cascade Layers を使うと、セレクターの詳細度よりも優先してスタイルが適用されるレイヤーを定義できるようになります。</p>\n<p>実際にコードで見てみましょう。</p>\n<h3>通常の詳細度を使ったスタイルの適用</h3>\n<p>Cascade Layers を使わない場合、同じ詳細度のセレクターは属性値での記述順に関わらず、スタイルシート内で最後に宣言されたスタイルが適用されます。</p>\n<p>次の場合、<code>.base</code> と <code>.nus3</code> は同一の詳細度です。また、1 つ目の <code>.base</code> は最後に記述されている <code>.base</code> によって上書きされます。このボタンには<code>style</code>内で一番最後に記述されている <code>.base</code> のスタイルが適用され、背景色が <code>royalblue</code> になります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\"><span class=\"token class\">.base</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">crimson</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\"><span class=\"token class\">.nus3</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">white</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\"><span class=\"token class\">.base</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">royalblue</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* このスタイルが適用される */</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>base nus3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>royalblueになる<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<p>また、セレクターの詳細度は種類によって異なり、要素セレクター &#x3C; クラスセレクター &#x3C; ID セレクター の順に高くなります。</p>\n<p>次の場合、ID セレクター(<code>#btn</code>)のほうがクラスセレクター(<code>.nus3</code>) や要素セレクター(<code>button</code>)よりも詳細度が高いので、<code>#btn</code> のスタイルが適用されます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\">button</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">coral</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\"><span class=\"token id\">#btn</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">crimson</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* このスタイルが適用される */</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\"><span class=\"token class\">.nus3</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">black</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>btn<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nus3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>crimsonになる<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<h3>Cascade Layers を使ったスタイルの適用</h3>\n<p>Cascade Layers では、まず<code>@layer</code>構文を使ってレイヤーを定義します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-css\"><code class=\"language-css\">`<span class=\"token atrule\"><span class=\"token rule\">@layer</span> base<span class=\"token punctuation\">,</span> page<span class=\"token punctuation\">,</span> utilities<span class=\"token punctuation\">;</span></span>`\n</code></pre></div>\n<p>このとき、base、page、utilities の 3 つのレイヤーを定義するとともに、レイヤーの優先順位を定義しています。</p>\n<p>この場合、各レイヤーのスタイルは後ろに定義したものほど優先度が高く、次のような優先度でスタイルが適用されます。</p>\n<ol>\n<li>utilities</li>\n<li>page</li>\n<li>base</li>\n</ol>\n<p>ここではレイヤーの定義と優先度を同時に定義していますが、この記述を省略した場合、あとに定義したレイヤーの優先度が高くなります。</p>\n<p>レイヤーの動作についてサンプルコードで詳しく見てみましょう。</p>\n<p>次のコードは、前述したコードをベースに <code>@layer</code> を追加したものです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token atrule\"><span class=\"token rule\">@layer</span> base<span class=\"token punctuation\">,</span> page<span class=\"token punctuation\">,</span> utilities<span class=\"token punctuation\">;</span></span>\n\n  <span class=\"token atrule\"><span class=\"token rule\">@layer</span> utilities</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token selector\"><span class=\"token class\">.shiny</span></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">gold</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token atrule\"><span class=\"token rule\">@layer</span> page</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token selector\"><span class=\"token id\">#btn</span></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">crimson</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token atrule\"><span class=\"token rule\">@layer</span> base</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token selector\"><span class=\"token class\">.base</span></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">crimson</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token selector\"><span class=\"token class\">.nus3</span></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">white</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shiny base nus3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>goldになる<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>btn<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shiny<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>goldになる<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<p>１つ目のボタンはレイヤーがない場合には最後に宣言されている <code>.nus3</code> の <code>white</code> が適用されていましたが、優先度の高い utilities レイヤーに定義した <code>.shiny</code> の <code>gold</code> が適用されます。</p>\n<p>２つ目のボタンはレイヤーがない場合には ID セレクターの <code>#btn</code> のスタイルが適用されていましたが、この場合も utilities レイヤーに定義した <code>.shiny</code> のほうが優先度が高いため、 <code>gold</code> が適用されます。</p>\n<p>次のサンプルページを開いて、DevTools で対象の要素をみると Cascade Layers が適用されているのがわかります。</p>\n<p><a href=\"https://c1r38o.csb.app/\">サンプルページ</a></p>\n<p><img src=\"/frontend-expert/image/css-cascade-layers/devtools.png\" alt=\"DevToolsで確認すると実際にCascade Layersが適用されている\" width=\"337\" height=\"400\" ></p>\n<p>レイヤーの適用順が utilities > page > base になってるのがわかります。</p>\n<p>このように、Cascade Layers を使うことで、詳細度ではなくレイヤーでスタイルをコントロールできるようになります。</p>\n<h3>Cascade Layers 内で<code>!important</code>を使った際のスタイルの優先順位</h3>\n<p><code>!important</code>を使っていない場合、Cascade Layers で定義したレイヤー外のスタイルが優先して適用されます。</p>\n<p>これはカスケード順が、レイヤー内 &#x3C; レイヤー外 の順に高くなっているからです。</p>\n<p>次のコードでは、レイヤー外のスタイルが適用され、ボタンの背景色が<code>white</code>になります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token atrule\"><span class=\"token rule\">@layer</span> base</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token selector\"><span class=\"token class\">.nus3</span></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">gold</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token selector\"><span class=\"token class\">.nus3</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">white</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* このスタイルが適用される */</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nus3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>whiteになる<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<p>しかし、<code>!important</code>を使ったスタイルの場合、このカスケード順が変わるので注意が必要です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token atrule\"><span class=\"token rule\">@layer</span> base</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token selector\"><span class=\"token class\">.nus3</span></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">gold</span> <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* このスタイルが適用される */</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token selector\"><span class=\"token class\">.nus3</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">white</span> <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>nus3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>goldになる<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<h2>CSS フレームワークにも Cascade Layers は使える</h2>\n<p>Bootstrap や Materialize CSS、Bulma といった CSS フレームワークにも Cascade Layers を使ってレイヤーを定義できます。</p>\n<p>CSS フレームワークの一つである<a href=\"https://bulma.io/\">Bulma</a>を使って試してみましょう。</p>\n<p>本来、次のようなクラスをボタンに付与すると、Bulma で元から定義されている<code>.button.is-primary</code>が、後に追加した<code>.button-nus3</code>より詳細度が高くなり、<code>.button-nus3</code>のスタイルは適用されません。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button is-primary button-nus3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>ボタン<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@import</span> <span class=\"token string\">\"https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token atrule\"><span class=\"token rule\">@import</span> <span class=\"token string\">\"styles/page.css\"</span><span class=\"token punctuation\">;</span></span>\n\n<span class=\"token comment\">/* styles/page.cssで定義されているスタイル */</span>\n<span class=\"token selector\"><span class=\"token class\">.button-nus3</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">gold</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>しかし次のように Cascade Layers を使い、<a href=\"https://bulma.io/\">Bulma</a>の CSS を<code>base</code>のレイヤーにしつつ、画面特有のスタイルを<code>styles/page.css</code>に定義することで、詳細度の影響を気にすることなく Bulma のスタイルを上書きすることができます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@layer</span> base<span class=\"token punctuation\">,</span> page<span class=\"token punctuation\">;</span></span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@import</span> <span class=\"token string\">\"https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css\"</span> <span class=\"token function\">layer</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token atrule\"><span class=\"token rule\">@import</span> <span class=\"token string\">\"styles/page.css\"</span> <span class=\"token function\">layer</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n</code></pre></div>\n<p>対象ブラウザのサポート状況は考慮する必要がありますが、CSS の記述量が増えることが想定されるプロジェクトには、Cascade Layers をベースにした設計を検討してみてはいかがでしょうか。</p>\n<h2>参考リンクなど</h2>\n<ul>\n<li><a href=\"https://www.w3.org/TR/css-cascade-5/\">https://www.w3.org/TR/css-cascade-5/</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@layer\">https://developer.mozilla.org/en-US/docs/Web/CSS/@layer</a></li>\n<li><a href=\"https://developer.chrome.com/blog/cascade-layers/\">https://developer.chrome.com/blog/cascade-layers/</a></li>\n<li><a href=\"https://github.com/nus3/p-css-cascade-layers\">サンプル実装したリポジトリ</a></li>\n</ul>\n","metaData":{"title":"主要ブラウザで使える！CSS Cascade Layers で新しいCSS設計の手法を考える","author":"nus3","editor":["nakajmg"],"createdAt":"2022-03-22","summary":"CSS Cascade Layersを使ったスタイルの管理方法について紹介します","tags":["CSS"],"updatedAt":"2022-03-22"}},{"type":"markdown","href":"/posts/release-chrome-98","slug":"release-chrome-98","content":"<p>Chrome 98 のリリースノート関連の情報をまとめました。</p>\n<ul>\n<li><a href=\"https://developer.chrome.com/blog/new-in-chrome-98/\">https://developer.chrome.com/blog/new-in-chrome-98/</a></li>\n<li><a href=\"https://developer.chrome.com/blog/new-in-devtools-98/\">https://developer.chrome.com/blog/new-in-devtools-98/</a></li>\n<li><a href=\"https://developer.chrome.com/blog/deps-rems-98/\">https://developer.chrome.com/blog/deps-rems-98/</a></li>\n<li><a href=\"https://www.chromestatus.com/features#milestone%3D98\">https://www.chromestatus.com/features#milestone%3D98</a></li>\n</ul>\n<h2>New In Chrome (Chrome 98)</h2>\n<p>Chrome98 で新しく追加された機能です。</p>\n<h3>Opting out of auto-dark themes on Android</h3>\n<p>Chrome96 から、Android では OriginTrial として「<a href=\"https://developer.chrome.com/blog/auto-dark-theme/\">Auto Dark Themes</a>」という機能を追加しています。</p>\n<p>この機能はユーザーの OS がダークモードである場合、明るいテーマのサイトに対しブラウザが自動的に生成したダークテーマを適用するものです。</p>\n<p>今回のアップデートでは OriginTrial に登録したサイトのうち、特定のページで自動生成されるダークテーマを無効にする方法が追加されました。</p>\n<p>具体的には以下のように<code>meta</code>タグを利用して無効化することが出来ます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>color-scheme<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>only light<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n</code></pre></div>\n<p>また以下のように<code>color-scheme: only light</code>というスタイルを<code>:root</code>要素にあてることでも無効化できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\"><span class=\"token pseudo-class\">:root</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color-scheme</span><span class=\"token punctuation\">:</span> only light<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>CSS スタイルを利用する方法の優れた点として、以下のように要素ごとに自動生成されるダークテーマを無効にできる点が挙げられます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\"><span class=\"token class\">.only-light</span><span class=\"token punctuation\">,</span>\n<span class=\"token id\">#my-element</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color-scheme</span><span class=\"token punctuation\">:</span> only light<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>詳しくは<a href=\"https://developer.chrome.com/blog/auto-dark-theme/\">Auto Dark Themes on Android</a>における<a href=\"https://developer.chrome.com/blog/auto-dark-theme/#per-element-opt-out\">How to opt-out of Auto Dark Theme</a>の章を参照してください。</p>\n<h3>COLRv1 font support</h3>\n<p>COLRv1 フォントがサポートされました。</p>\n<p>COLRv1 では COLRv0 と比べて、新たにフォントのグラデーションや合成などに対応しています。また、フォントが鮮明なまま圧縮率が高いのも特徴の一つです。</p>\n<p>次の参考記事では実際にグラデーションを導入したカラーフォントや COLRv1 と Bitmap を比較してどれほど鮮明なのかを確認することができます。</p>\n<p>お使いの Chrome のバージョンを 98 にアップデートした上で、ぜひ見てみてください！</p>\n<p>参考:</p>\n<p><a href=\"https://developer.chrome.com/blog/colrv1-fonts/\">https://developer.chrome.com/blog/colrv1-fonts/</a></p>\n<h3>Emulate Chrome 100 in the UA string</h3>\n<p>ここ何回かのリリースには必ず含まれている内容ですね。</p>\n<p>Chrome のバージョンがもうすぐ 100 になるので、Chrome のバージョンを使っているような実装がある場合はバージョン番号が 3 桁になっても正しく動くかどうか確認しましょう。現在のバージョンを 100 にする<a href=\"https://developer.chrome.com/blog/force-major-version-to-100/\">#force-major-version-to-100</a>フラグを使って、既存のコードが正しく動くか確認することができます。</p>\n<h3>And more!</h3>\n<h2>What's New In DevTools (Chrome 98)</h2>\n<p>DevTools についてはこちらの日本語訳を参照ください。</p>\n<p><a href=\"https://developer.chrome.com/ja/blog/new-in-devtools-97/\">https://developer.chrome.com/ja/blog/new-in-devtools-97/</a></p>\n<h2>Deprecations and removals in Chrome 98</h2>\n<h3>Remove SDES key exchange for WebRTC</h3>\n<p>Chrome97 で記載があったものですが、98 で Shipping になりました。</p>\n<p>詳細は<a href=\"https://cybozu.github.io/frontend-expert/posts/release-chrome-97\">前回のリリースノートのまとめ</a>でも記載したので、そちらをご覧ください。</p>\n<h2>その他 Chrome Platform Status に記載されていたもの</h2>\n<h3>Add support for Promise to Blobs in clipboard item</h3>\n<p><code>ClipboardItem</code>オブジェクトに対して Promise をサポートしました。</p>\n<p>今まで、Chrome では<code>ClipboardItem</code>コンストラクターの引数として「文字列または blob に解決される Promise」を受け取ることが出来ませんでした。</p>\n<p>今回のアップデートにより<code>clipboard.write</code>API が呼ばれた時に、一旦クリップボードに書き込む Blob データを同期的に取得する必要がなくなり、ブロックすることなく非同期的に write メソッドを呼び出すことができるようになります。</p>\n<h3>CSS Color Adjust: 'only' keyword for color-scheme</h3>\n<p><code>color-scheme</code>プロパティの<code>only</code>キーワードがサポートされました。only を指定することでユーザーエージェント(ブラウザ)が要素のカラースキーマを上書きすることを禁止します。</p>\n<p>参考:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/ja/docs/Web/CSS/color-scheme\">https://developer.mozilla.org/ja/docs/Web/CSS/color-scheme</a></li>\n<li><a href=\"https://drafts.csswg.org/css-color-adjust/#color-scheme-prop\">https://drafts.csswg.org/css-color-adjust/#color-scheme-prop</a></li>\n</ul>\n<h3>FileSystemHandle::Remove() method</h3>\n<p>FileSystemHandle に<code>Remove()</code>メソッドを追加しました。</p>\n<p>今ままで<code>FileSystemHandle</code>から直接ファイルやディレクトリを削除することは不可能で、親ディレクトリの<code>FileSystemDirectoryHandle</code>から<code>RemoveEntry</code>を呼ぶ必要がありました。</p>\n<p>今回のアップデートにより「<code>showSaveFilePicker</code>から<code>FileHandle</code>を取得したが、結局保存したくなくなったのでファイルを削除したい」というような、よくあるユースケースに対応できるようになりました。</p>\n<h3>HDR CSS Media Queries: dynamic-range</h3>\n<p>CSS のメディアクエリーに<code>dynamic-range</code>が追加されました。</p>\n<p>次のサンプルコードのように、ディスプレイが HDR をサポートしてるかしていないかを<code>dynamic-range</code>で判別できるようになります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token comment\">/* HDRをサポートしていない */</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">dynamic-range</span><span class=\"token punctuation\">:</span> standard<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\"><span class=\"token class\">.contrast</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">red</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* ディスプレイがHDRをサポートしている */</span>\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">dynamic-range</span><span class=\"token punctuation\">:</span> high<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\"><span class=\"token class\">.contrast</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">green</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>参考:</p>\n<p><a href=\"https://www.w3.org/TR/mediaqueries-5/#dynamic-range\">https://www.w3.org/TR/mediaqueries-5/#dynamic-range</a></p>\n<h3>New window.open() popup vs. window behavior</h3>\n<p><code>window.open()</code>では第 3 引数として<code>windowFeatures</code>という option を DOMString で指定できますが、今バージョンから<code>popup</code>という機能に対応するようになりました。<code> popup=yes</code>または<code>popup=1</code>のように指定することで、ポップアップウィンドウを利用して開くことをブラウザに要求することが出来ます。</p>\n<p>この変更は window.open の新しくリリースされた仕様に合わせて、相互運用性のために行われた変更です。 広報互換性のため、ポップアップやタブ/ウィンドウを開く既存の動作に変更はありません。</p>\n<h3>Private Network Access preflight requests for subresources</h3>\n<p>サブリソースに対するプライベートネットワークリクエストの前に CORS プリフライトリクエストを送信し、ターゲットサーバーからの明示的な許可を求めるようになります。</p>\n<p>プライベートネットワークリクエストとは以下のようなリクエストとのことです。</p>\n<ul>\n<li>パブリック Web サイトからプライベート IP アドレスまたはローカルホストへのリクエスト</li>\n<li>プライベートな Web サイト（イントラネットなど）からローカルホストへのリクエスト</li>\n</ul>\n<p>プライベートネットワーク上のサービスや機器(ネットワーク機器やプリンタなど)は CSRF 対策が不十分なものが多く、今回のアップデートはこれらの攻撃リスクを軽減させるための対策になります。</p>\n<h3>WritableStream controller AbortSignal</h3>\n<p><a href=\"https://developer.mozilla.org/ja/docs/Web/API/WritableStream/abort\">WritableStream.abort()</a>を実行した際に、ストリームへの進行中の書き込みの中止や終了がすぐに実行されるようになりました。</p>\n<h3>self.structuredClone()</h3>\n<p>ディープコピーができる<code>structuredClone()</code>がついに 98 で実装されました。</p>\n<p>お使いの Chrome を 98 にアップデートした上で、DevTools の Console で次のサンプルコードを試しに実行してみると<code>structuredClone()</code>で実際にディープコピーが実行されていることが確認できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> myOriginal <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">someProp</span><span class=\"token operator\">:</span> <span class=\"token string\">\"with a string value\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">anotherProp</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">withAnotherProp</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> myShallowCopy <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token spread operator\">...</span>myOriginal <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nmyShallowCopy<span class=\"token punctuation\">.</span><span class=\"token property-access\">anotherProp</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">withAnotherProp</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"a new value\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>\n  myOriginal<span class=\"token punctuation\">.</span><span class=\"token property-access\">anotherProp</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">withAnotherProp</span><span class=\"token punctuation\">,</span>\n  myShallowCopy<span class=\"token punctuation\">.</span><span class=\"token property-access\">anotherProp</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">withAnotherProp</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> myOriginal <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">someProp</span><span class=\"token operator\">:</span> <span class=\"token string\">\"with a string value\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">anotherProp</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">withAnotherProp</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> myDeepCopy <span class=\"token operator\">=</span> <span class=\"token function\">structuredClone</span><span class=\"token punctuation\">(</span>myOriginal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyDeepCopy<span class=\"token punctuation\">.</span><span class=\"token property-access\">anotherProp</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">withAnotherProp</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"a new value\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>\n  myOriginal<span class=\"token punctuation\">.</span><span class=\"token property-access\">anotherProp</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">withAnotherProp</span><span class=\"token punctuation\">,</span>\n  myDeepCopy<span class=\"token punctuation\">.</span><span class=\"token property-access\">anotherProp</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">withAnotherProp</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>参考:</p>\n<p><a href=\"https://web.dev/structured-clone/\">https://web.dev/structured-clone/</a></p>\n","metaData":{"title":"COLRv1 fontのサポートなど、Chrome 98 リリースノートまとめ","author":"nus3","editor":"Saji","createdAt":"2022-02-18","summary":"Chrome 98 のリリースノートの要約です","tags":["Releasenote","Browser"],"updatedAt":"2022-02-18"}},{"type":"markdown","href":"/posts/considerations-for-monorepo","slug":"considerations-for-monorepo","content":"<p>それっぽいタイトルを付けましたが特に意味はないです。</p>\n<p><a href=\"https://cybozu.github.io/frontend-expert/posts/turborepo\">workspace を使ったコマンドを最適化して実行する Turborepo について</a>のお話で Turborepo を軽く触ってみた際に<code>npx create-turbo@latest</code>で作られる構成がとてもわかりやすく、プロダクトの初期段階からモノレポを採用するのは選択肢の 1 つとしていいのでは、と思い続編を書きました。</p>\n<p>前回と同じくサンプルのリポジトリはこちらになります。<br>\n<a href=\"https://github.com/nus3/p-turborepo/tree/main/yarn\">https://github.com/nus3/p-turborepo/tree/main/yarn</a></p>\n<h2>概要</h2>\n<ul>\n<li>モノレポを採用することで、同一リポジトリ内で自作した汎用的なライブラリやコンポーネントを複数のアプリケーションで使いまわせる</li>\n<li>モノレポの規模が大きくなってきた場合には、モノレポ内のパッケージを npm に公開することでアプリケーションとパッケージを非同期に開発できる</li>\n<li>Yarn や npm の workspace はイイゾ！</li>\n</ul>\n<h2>モノレポとは</h2>\n<p>モノレポとは本記事では npm や Yarn の workspaces 機能を使い、1 つのリポジトリ内で複数の npm パッケージを管理している構成のこととします。</p>\n<h3>npm や Yarn の workspaces</h3>\n<p>npm や Yarn の workspaces は 1 つのリポジトリ内で複数の npm パッケージを管理するための機能です。</p>\n<ul>\n<li><a href=\"https://classic.yarnpkg.com/lang/en/docs/workspaces/\">Yarn(v1)</a></li>\n<li><a href=\"https://yarnpkg.com/features/workspaces\">Yarn(v2 以降)</a></li>\n<li><a href=\"https://docs.npmjs.com/cli/v8/using-npm/workspaces\">npm</a></li>\n</ul>\n<p>workspaces を使うにはリポジトリのルート直下にある<code>package.json</code>に<code>workspaces</code>を追加します。</p>\n<p>例えば<code>apps</code>配下にアプリケーションの npm パッケージを、<code>packages</code>配下に汎用的なコンポーネント、ライブラリなどの npm パッケージを入れる場合、次のようになります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"workspaces\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"apps/*\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"packages/*\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>apps</code> 配下にある<code>nus3-a</code>というアプリケーションから <code>packages</code> 配下にある<code>nus3-ui</code>という名前の npm パッケージを使う場合、それぞれ次のような<code>package.json</code>になります。</p>\n<p><code>apps/nus3-a</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nus3-a\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"nus3-ui\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"*\"</span>\n    <span class=\"token comment\">// Yarnのv2以降であれば`workspace:`構文が使えるようになる</span>\n    <span class=\"token comment\">// REF: (nus3) https://yarnpkg.com/features/workspaces#workspace-ranges-workspace</span>\n    <span class=\"token comment\">// \"nus3-ui\": \"workspace:*\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>packages/nus3-ui</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nus3-ui\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.0\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>workspaces 内にある npm パッケージの名前が npm に公開されているパッケージ名と同じ場合は、 workspace 内の npm パッケージが優先してインストールされます。後々 workspaces 内の npm パッケージを公開する可能性がある場合、パッケージ名は npm で公開されているパッケージ名と被らない名前にした方が良いかもしれません。</p>\n<p>workspace 内の npm パッケージを依存関係に追加すると node_modules にシンボリックリンクが作成されます。次の画像のように node_modules 配下に<code>nus3-ui</code>と<code>nus3-a</code>のシンボリックリンクが追加されていることが確認できます。</p>\n<p><img src=\"/frontend-expert/image/considerations-for-monorepo/symlink.png\" alt=\"node_modulesに作成されたシンボリックリンク\" width=\"340\" height=\"101\" ></p>\n<p>シンボリックリンクにより依存する npm パッケージのコードを直接参照するので、npm に公開しバージョン管理するまでは、version は<code>0.0.0</code>、かつ、使う側は<code>\"nus3-ui\": \"*\"</code>のようにワイルドカードを指定するとバージョンのことを意識せずに管理できます。</p>\n<h3>create-turbo で作られるモノレポ構成</h3>\n<p>create-turbo(<code>npx create-turbo@latest</code>) では作られるモノレポ構成に次のようなものが含まれます。</p>\n<ul>\n<li>npm に公開せずに config をモノレポ内の別パッケージに分けて、複数のパッケージから使用する</li>\n<li>React を使った汎用的なコンポーネント(tsx)を別パッケージに分けて アプリケーション(Next.js)で使用する</li>\n</ul>\n<p>それぞれ見ていきましょう。</p>\n<h4>npm に公開せずに config をモノレポ内の別パッケージに分けて、複数のパッケージから使用する</h4>\n<p>ESLint や Stylelint の config は npm に公開することで、異なるプロジェクトで共通の設定を使えます。サイボウズでは<a href=\"https://github.com/cybozu/eslint-config\">@cybozu/eslint-config</a>や<a href=\"https://github.com/cybozu/stylelint-config\">@cybozu/stylelint-config</a>として npm に公開しています。</p>\n<p>モノレポ内であれば ESLint や Stylelint の設定を npm に公開・管理せずに共有することもできます。</p>\n<p><code>packages/nus3-config</code><br>\nで共通の ESLint や TSConfig を定義して、<code>package.json</code> の<code>files</code> に指定します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nus3-config\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"files\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"eslint-preset.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"tsconfig.base.json\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"tsconfig.nextjs.json\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"tsconfig.react-library.json\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>apps/nus3-a</code>\nで<code>nus3-config</code>を追加し、<code>nus3-config</code>から TSConfig や ESLint のルールを適用します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nus3-a\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"eslint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"8.6.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"nus3-config\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"*\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>apps/nus3-a/tsconfig.json</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nus3-config/tsconfig.nextjs.json\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>apps/nus3-a/.eslintrc</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nus3-config/eslint-preset\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h4>React を使った汎用的なコンポーネント(tsx)を別パッケージに分けて アプリケーション(Next.js)で使用する</h4>\n<p>create-turbo では汎用的な React コンポーネントを tsx ファイルのまま <code>packages</code> 配下の npm パッケージで管理し、Next.js の<a href=\"https://github.com/martpie/next-transpile-modules\">plugin</a>を使って アプリケーション 側でトランスパイルしています。</p>\n<p><code>packages/nus3-ui</code><br>\nで React(tsx)のコンポーネントを実装します。実装した tsx ファイルのパスをそのまま<code>main</code>と<code>types</code>に追加します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nus3-ui\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./index.tsx\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"types\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./index.tsx\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@types/react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"17.0.37\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@types/react-dom\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"17.0.11\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"typescript\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"4.5.4\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>packages/nus3-ui/index.tsx</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">VFC</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">Button</span><span class=\"token operator\">:</span> <span class=\"token function-variable function\">VFC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">ボタン</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>apps/nus3-a</code><br>\n<code>nus3-ui</code>の tsx ファイルを<code>nus3-a</code>で<code>next-transpile-modules</code>を使ってトランスパイルします。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"nus3-a\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"next-transpile-modules\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"9.0.0\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>apps/nus3-a/next.config.js</code></p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> withTM <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"next-transpile-modules\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"nus3-ui\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token function\">withTM</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h2>フロントエンドのモノレポ戦略</h2>\n<p>筆者のこれまでの経験では、創業して間もない会社やプロダクトの初期フェーズで、複数のアプリケーションの開発が並列して始まることが多くありました。そういった状況では、モノレポを採用しておくと複数のアプリケーションで共通したコンポーネントやライブラリを少ないコストで使用できます。</p>\n<p>また、モノレポ内で共通して使っているパッケージに変更を加える際に、その影響範囲が把握できないくらいモノレポの規模が大きくなった場合には、パッケージを npm に公開してバージョン管理することで、バージョンの変更タイミングを各々のアプリケーションに任せることができ、アプリケーションとパッケージの開発を非同期に行うことができます。</p>\n<p>このように、初期段階では汎用的な npm パッケージをアセットとして複数のアプリケーションに提供することで開発スピードを上げられ、また、規模が大きくなってきた場合はパッケージを npm に公開するといった方針をとることもできます。</p>\n<p>もちろん、1 つのリポジトリですべてのパッケージを管理することやコードベースが大きく複雑になることなどデメリットもあり、モノレポを採用することが適切ではない場合もあります。メリット・デメリットを踏まえつつ、フロントエンドの技術選定の中にモノレポの採用を選択肢の 1 つとして入れてもいいかもしれません。</p>\n","metaData":{"title":"フロントエンドのモノレポ構成はスケーリングの夢を見るか","author":"nus3","editor":["nakajmg"],"createdAt":"2022-01-31","summary":"Turborepoのstarterでできるモノレポ構成からスケーリングするフロントエンドの構成について考える","tags":["Monorepo","Turborepo"],"updatedAt":"2022-01-31"}},{"type":"markdown","href":"/posts/turborepo","slug":"turborepo","content":"<p>今年からフロントエンドエキスパートチームでは活動内容の一つである<strong>探求</strong>の一環として、メンバーが気になった技術に対して、気軽に触ってみる会をしています。次の画像は筆者が Slack で、気軽に触ってみる会の開催を宣言してる時のものです。</p>\n<p><img src=\"/frontend-expert/image/turborepo/slack.png\" alt=\"slackで気軽に触ってみる会を宣言してる\" width=\"718\" height=\"152.15061295971978\" ></p>\n<p>今回は<a href=\"https://vercel.com/blog/vercel-acquires-turborepo\">去年の 12 月に Vercel に買収されたニュース</a>があった Turborepo を気軽に触ってみました。\n個人的には 1 人で調べるときよりも複数人でわいわい調べた方が、その技術や関連する周辺知識の話を色んな人の観点で深掘ってできて、とても有意義な時間でした。</p>\n<h2>概要</h2>\n<p>Turborepo はモノレポのためのビルドシステムで次のような特徴があります。</p>\n<ul>\n<li>Yarn, npm, pnpm の workspaces に対応してるリポジトリに対して簡単に導入できる</li>\n<li>workspace 内のコマンドの依存関係をシンプルに設定してくれる</li>\n<li>Turborepo で実行するコマンドがない package はスルーしてくれる(npm workspace の<code>--if-present</code>に相当)</li>\n<li>ローカルキャッシュ、リモートキャッシュを生成・利用できる</li>\n</ul>\n<h3>サンプルで作ったモノレポ構成</h3>\n<p>今回は Yarn v1 の workspace を使ってます。<br>\n<a href=\"https://github.com/nus3/p-turborepo/tree/main/yarn\">https://github.com/nus3/p-turborepo/tree/main/yarn</a></p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">├── apps\n│   └── nus3-a: Next.js\n└── packages:\n    ├── nus3-button2: Reactのコンポーネント + ViteのLibrary Modeでビルド\n    ├── nus3-config: tsconfig + eslintのconfig\n    └── nus3-ui: Reactのコンポーネント(ビルドせずに使う)</code></pre></div>\n<p>サンプルで作ったモノレポ内の package たちは次のような依存関係になっています。<br>\n(色々試してたので適当な命名になってます。すんません)</p>\n<ul>\n<li><code>nus3-a</code>は<code>nus3-ui</code>と<code>nus3-button2</code>に依存している</li>\n<li><code>nus3-ui</code>は<code>nus3-button2</code>に依存している</li>\n</ul>\n<p><img src=\"/frontend-expert/image/turborepo/dependencies.png\" alt=\"サンプルリポジトリの依存関係\" width=\"577\" height=\"314\" ></p>\n<h3>使い方</h3>\n<ol>\n<li>使っているパッケージマネージャーで(Yarn, npm, pnpm)で workspace の設定</li>\n<li><code>turbo</code>のインストール</li>\n<li>package.json に<code>pipeline</code>の設定</li>\n</ol>\n<h4>1. 使っているパッケージマネージャーで(Yarn, npm, pnpm)で workspace の設定</h4>\n<p>workspace の設定については割愛します。各パッケージマネージャーのドキュメントをご覧ください。</p>\n<ul>\n<li><a href=\"https://classic.yarnpkg.com/lang/en/docs/workspaces/\">Yarn</a></li>\n<li><a href=\"https://docs.npmjs.com/cli/v8/using-npm/workspaces\">npm</a></li>\n<li><a href=\"https://pnpm.io/workspaces\">pnpm</a></li>\n</ul>\n<h4>2. <code>turbo</code>のインストール</h4>\n<p><code>yarn add turbo -W --dev</code>で Turborepo を追加します。</p>\n<h4>3. package.json に<code>pipeline</code>の設定</h4>\n<p><code>package.json</code>に<code>turbo.pipeline</code>を追加し、そこで<code>turbo run {command}</code>で実行する command の依存関係やキャッシュの設定をします。この<code>pipeline</code>で定義した command しか<code>turbo run {command}</code>では実行できません。</p>\n<p>実際に定義したものが次の json になります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"turbo\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"pipeline\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"dependsOn\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"^build\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"outputs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"dist/**\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".next/**\"</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"dependsOn\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"build\"</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"deploy\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"dependsOn\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"build\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lint\"</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>dependsOn</code>で依存関係を、<code>outputs</code>でキャッシュするものを指定します。</p>\n<p>定義したコマンドを一つずつ見ていきましょう。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"dependsOn\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"^build\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n</code></pre></div>\n<p>dependOn に<code>^</code>を追加したコマンド(<code>^build</code>)を指定することで workspace 内の各 package の指定したコマンド(<code>build</code>)を package 間の依存関係を考慮した順番で実行してくれます。</p>\n<p>実際に実行してみると、サンプルで作った各 package の依存関係を考慮した順番(<code>@nus3/example-button2</code> → <code>nus3-ui</code> → <code>nus3-a</code>)でビルドされていることがわかります。<br>\n(※今回サンプルで作った構成では<code>nus3-ui</code>はビルドの必要がないですが、依存関係を考慮した順番を表すのにあえて build コマンドを追加しています)</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">$ turbo run build\n• Packages in scope: @nus3/example-button2, nus3-a, nus3-config, nus3-ui\n• Running build in 4 packages\n@nus3/example-button2:build: cache miss, executing a161062b16a0be35\n@nus3/example-button2:build: $ vite build &#x26;amp;&#x26;amp; tsc -p ./tsconfig.build.json\n...\n@nus3/example-button2:build: dist/nus3-example-button2.es.js   3.30 KiB / gzip: 1.39 KiB\nnus3-ui:build: cache miss, executing b32d4fb848c8658f\nnus3-ui:build: $ echo &#x26;#39;build nus3-ui&#x26;#39;\n...\nnus3-a:build: cache miss, executing a80d8842624981a8\nnus3-a:build: $ next build\n...\n\n Tasks:    3 successful, 3 total\nCached:    0 cached, 3 total\n  Time:    5.702s</code></pre></div>\n<p>次の<code>outputs</code>はコマンドを実行した際に、<code>dist</code>と<code>.next</code>配下にあるファイル群をキャッシュする設定です。<code>node_modules/.cache/turbo</code>にキャッシュしたファイルが出力されます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"outputs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"dist/**\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".next/**\"</span><span class=\"token punctuation\">]</span>\n</code></pre></div>\n<p>先程の build コマンドをもう一度実行すると cache が使われ、前回より早く実行されているのがわかります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">$ turbo run build\n• Packages in scope: @nus3/example-button2, nus3-a, nus3-config, nus3-ui\n• Running build in 4 packages\n@nus3/example-button2:build: cache hit, replaying output a161062b16a0be35\n...\nnus3-ui:build: cache hit, replaying output b32d4fb848c8658f\n...\nnus3-a:build: cache hit, replaying output a80d8842624981a8\n...\n\n Tasks:    3 successful, 3 total\nCached:    3 cached, 3 total\n  Time:    221ms &#x26;gt;&#x26;gt;&#x26;gt; FULL TURBO\n\n✨  Done in 0.57s.\n</code></pre></div>\n<p>次のように何も指定しない場合、依存関係がないものとして認識され並列に実行されます</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre></div>\n<p>次の deploy コマンドの<code>dependsOn</code>では pipeline で定義した<code>build</code>, <code>test</code>, <code>lint</code>(順不同)を実行し、終了した時点で workspace 内の各 package の<code>deploy</code>コマンドを実行します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"deploy\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"dependsOn\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"build\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lint\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre></div>\n<p>今回定義したものの場合、Turborepo は次のようなことを考慮しながら各々の package のコマンドを実行します。</p>\n<ul>\n<li><code>build</code>: モノレポ内の各 package の依存関係を考慮しつつ build</li>\n<li><code>test</code>: <code>pipeline</code>で定義した<code>build</code>が実行された後に実行</li>\n<li><code>lint</code>: 他のコマンドの順番を気にせず、並列で実行</li>\n</ul>\n<p>deploy コマンドを実行した結果が次になります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">$ turbo run deploy\n• Packages in scope: @nus3/example-button2, nus3-a, nus3-config, nus3-ui\n• Running deploy in 4 packages\nnus3-a:lint: $ next lint\n@nus3/example-button2:build: $ vite build &#x26;amp;amp;&#x26;amp;amp; tsc -p ./tsconfig.build.json\n...\nnus3-ui:build: $ echo &#x26;#39;build nus3-ui&#x26;#39;\n...\nnus3-a:build: $ next build\n...\nnus3-a:test: $ echo &#x26;#39;test nus3-a&#x26;#39;\n...\nnus3-a:deploy: $ echo &#x26;#39;deploy nus3-a&#x26;#39;</code></pre></div>\n<p>実際に上記を考慮しつつ各 package のコマンドが実行された後に、最後に deploy コマンドが実行されているのがわかると思います。</p>\n<p>また、今回はローカルキャッシュの話のみでしたが、Turborepo には<a href=\"https://turborepo.org/docs/features/remote-caching#vercel\">Vercel</a>や<a href=\"https://turborepo.org/docs/features/remote-caching#custom-remote-caches\">独自</a>にキャッシュを配置することで、同じハッシュのキャッシュがあった場合にそのキャッシュを使ってくれる<strong>リモートキャッシュ</strong>といった機能も Beta で用意されています。</p>\n<p>今のプロジェクトが Yarn や npm の workspace を使っているのであれば、Turborepo を試しに入れてみてもいいかもしれません。</p>\n","metaData":{"title":"workspaceを使ったコマンドを最適化して実行するTurborepoについて","author":"nus3","createdAt":"2022-01-17","summary":"Turborepoの機能について","tags":["Turborepo","Monorepo"],"updatedAt":"2022-01-17"}},{"type":"markdown","href":"/posts/storybook-interactive-stories","slug":"storybook-interactive-stories","content":"<p><a href=\"https://github.com/storybookjs/storybook/releases/tag/v6.4.0\">Storybook の 6.4.0 がリリース</a>され、<code>Interactive stories</code>が新機能として追加されました。詳細は<a href=\"https://storybook.js.org/blog/interactive-stories-beta/\">Storybook のブログ</a>でも記載されています。</p>\n<h2>概要</h2>\n<p>Interactive stories の Addon を追加すると、testing-library で定義した操作を Storybook 上で確認することができるようになります。</p>\n<p>次の gif のようにユーザー操作に対するコンポーネントの状態を UI(Addon)からステップごとに確認できます。</p>\n<p><img src=\"/frontend-expert/image/storybook-interactive-stories/capture.gif\" alt=\"Interactive addonを使った例\" width=\"360\" height=\"240\" ></p>\n<h2>導入手順</h2>\n<ol>\n<li>パッケージを追加する</li>\n<li>Storybook の<code>main.js</code>に設定を追加する</li>\n<li>Interactive stories 用の story を<code>stories.tsx</code>に追加する</li>\n</ol>\n<h3>1. パッケージを追加する</h3>\n<p>Interactive addon を利用するには次のパッケージが必要です。<br>\n(今回は React のコンポーネントを対象としています)</p>\n<ul>\n<li>@storybook/addon-interactions</li>\n<li>@storybook/react</li>\n<li>@storybook/testing-library</li>\n</ul>\n<p>次のコマンドを実行してインストールします。</p>\n<p><code>npm i -D @storybook/addon-interactions @storybook/react @storybook/testing-library</code></p>\n<p>今回試したバージョンは次になります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@storybook/addon-interactions\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"6.4.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@storybook/react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"6.4.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@storybook/testing-library\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.7\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>2. Storybook の<code>main.js</code>に設定を追加する</h3>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">stories</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"../src/components/**/**/*.stories.@(js|jsx|ts|tsx)\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">addons</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"@storybook/addon-interactions\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// addonの追加</span>\n  <span class=\"token literal-property property\">features</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">interactionsDebugger</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Interactive storiesをaddonで1ステップずつ確認できるようにするのに必要</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3>3. Interactive stories 用の story を<code>stories.tsx</code>に追加する</h3>\n<p>例えば、次のサンプルコードでは Storybook 上にマウントされたコンポーネントに対して、<code>Add</code>のラベルがついたボタンを 4 回クリックした後に<code>Reset</code>のボタンをクリックする story を<code>@storybook/testing-library</code>を使って追加しています。</p>\n<div class=\"remark-highlight\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// Interactive storiesに関係ある部分しか記載してません</span>\n<span class=\"token keyword\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> within<span class=\"token punctuation\">,</span> userEvent <span class=\"token punctuation\">}</span></span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@storybook/testing-library\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">Template</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Story</span><span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">ExampleComponentProps</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token class-name\">ExampleComponent</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token spread operator\">...</span>args<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">Default</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">Template</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token maybe-class-name\">Default</span><span class=\"token punctuation\">.</span><span class=\"token method-variable function-variable method function property-access\">play</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> canvasElement <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> canvas <span class=\"token operator\">=</span> <span class=\"token function\">within</span><span class=\"token punctuation\">(</span>canvasElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> userEvent<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">click</span><span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Add\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> userEvent<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">click</span><span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Add\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> userEvent<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">click</span><span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Add\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> userEvent<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">click</span><span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Add\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> userEvent<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">click</span><span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Reset\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>Default.play = async ({ canvasElement }) => {</code>は Storybook6.4 でサポートされる<a href=\"https://storybook.js.org/blog/component-story-format-3-0/\">CSF3</a>の構文です。<br>\nまた、まだ v0.5 ですが Storybook から<a href=\"https://github.com/storybookjs/eslint-plugin-storybook\">eslint-plugin</a>も提供されているので、併せて試してみても良さそうです。</p>\n<p>Interactive stories の addon を追加した Storybook を GitHub Pages でホスティングしたので、実際に触ってみたい方は次のリンクへ。<br>\n<a href=\"https://nus3.github.io/p-storybook/?path=/story/components-examplecomponent--default\">https://nus3.github.io/p-storybook/?path=/story/components-examplecomponent--default</a></p>\n<p>Storybook 上で複雑な操作があるコンポーネントのデバッグや共有がしやすくなりそうですね。</p>\n<h2>参考リンク</h2>\n<ul>\n<li><a href=\"https://storybook.js.org/blog/interactive-stories-beta/\">https://storybook.js.org/blog/interactive-stories-beta/</a></li>\n<li><a href=\"https://storybook.js.org/blog/component-story-format-3-0/\">https://storybook.js.org/blog/component-story-format-3-0/</a></li>\n<li><a href=\"https://github.com/nus3/p-storybook\">実際に実装したリポジトリ</a></li>\n</ul>\n","metaData":{"title":"Interactive storiesを使ってStorybook上でユーザー操作の状態を確認する","author":"nus3","editor":["nakajmg","sakito"],"createdAt":"2021-11-29","summary":"Storybookに新しく追加されたInteractive storiesについて紹介します","tags":["Storybook"],"updatedAt":"2021-11-29"}},{"type":"markdown","href":"/posts/release-chrome-95","slug":"release-chrome-95","content":"<p>Chrome 95 のリリースノート関連の情報をまとめました。</p>\n<ul>\n<li><a href=\"https://developer.chrome.com/blog/new-in-chrome-95/\">https://developer.chrome.com/blog/new-in-chrome-95/</a></li>\n<li><a href=\"https://developer.chrome.com/blog/new-in-devtools-95/\">https://developer.chrome.com/blog/new-in-devtools-95/</a></li>\n<li><a href=\"https://developer.chrome.com/blog/deps-rems-95/\">https://developer.chrome.com/blog/deps-rems-95/</a></li>\n<li><a href=\"https://www.chromestatus.com/features#milestone%3D95\">https://www.chromestatus.com/features#milestone%3D95</a></li>\n</ul>\n<h2>Routing with URLPattern</h2>\n<p><code>URLPattern</code>という機能が追加されました。現在は Chrome、Edge の 95 以上に対応しています。</p>\n<p>他のブラウザや Node.js ではまだサポートされていない機能ですが、<a href=\"https://github.com/kenchris/urlpattern-polyfill\">urlpattern-polyfill</a>で polyfill できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> pattern <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLPattern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">pathname</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/books/:id\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://example.com/books/123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://example.com/books/123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">pathname</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">groups</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { id: '123' }</span>\n\n<span class=\"token comment\">// 引数で渡せる全てのプロパティ</span>\n<span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLPattern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">protocol</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http{s}?\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token string\">\":username\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span> <span class=\"token string\">\":password\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">hostname</span><span class=\"token operator\">:</span> <span class=\"token string\">\":subdomain.example.com\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">port</span><span class=\"token operator\">:</span> <span class=\"token string\">\":port(80|443)\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">pathname</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/:path\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">search</span><span class=\"token operator\">:</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">hash</span><span class=\"token operator\">:</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>詳細はこちら\n<a href=\"https://web.dev/urlpattern/\">https://web.dev/urlpattern/</a></p>\n<h2>Picking colors with the Eye Dropper API</h2>\n<p>カラーを取得する Eye Dropper API が追加されました</p>\n<p>詳細はこちらの記事で解説しています。</p>\n<p><a href=\"https://cybozu.github.io/frontend-expert/posts/eyedropper-api\">Chrome 95 で追加された画面上の色を取得する EyeDropper API について</a></p>\n<h2>PWA Summit</h2>\n<p>10 月 6~7 日に PWA Summit が開催されてました<br>\n見逃した方はアーカイブが下記のリンクに残ってるので、そこから確認できます</p>\n<p><a href=\"https://pwasummit.org/\">https://pwasummit.org/</a><br>\n<a href=\"https://www.youtube.com/channel/UC1j3gvdVISAEO1_2MwA5oQw/videos\">https://www.youtube.com/channel/UC1j3gvdVISAEO1_2MwA5oQw/videos</a></p>\n<h2>User-agent reduction origin trial</h2>\n<p>Origin Trial で実際に User-Agent の文字列が削減された後の挙動が試せます</p>\n<p>参考:</p>\n<ul>\n<li><a href=\"https://web.dev/user-agent-client-hints/\">User-Agent Client Hints によるユーザーのプライバシーと開発者体験の改善</a></li>\n<li><a href=\"https://developers-jp.googleblog.com/2021/09/chrome-user-agent.html\">User-Agent Reduction origin trial(日本語訳)</a></li>\n</ul>\n<h2>And more!</h2>\n<ul>\n<li>Storage Foundation API を origin trial で試せます</li>\n<li>WebAssembly で例外処理のサポートが提供され、例外がスローされたときにコードが中断できるようになります</li>\n<li>Chrome 100 が来年きます。バージョンが 2 桁から 3 桁になるので、自分のコードに何らかの影響があるかどうかを確認するといいかもしれません</li>\n</ul>\n<h2>DevTools</h2>\n<p>DevTools についてはこちらの日本語訳を参照ください。</p>\n<p><a href=\"https://developer.chrome.com/ja/blog/new-in-devtools-95/\">https://developer.chrome.com/ja/blog/new-in-devtools-95/</a></p>\n<h2>Deprecations and removals in Chrome 95</h2>\n<p>Chrome 95 で非推奨になったもの、もしくは削除されたものです。</p>\n<h3>Support for URLs with non-IPv4 hostnames ending in numbers</h3>\n<p>有効な IPv4 アドレスではない、 <code>http://foo.127.1/</code> のような数字で終わる host name を持つ URL が拒否されるようになります。</p>\n<p>社内のプレビュー環境などで IP アドレスをポストフィックスとして利用してたりする場合は影響がでているかもしれません。</p>\n<h3>WebAssembly cross-origin module sharing</h3>\n<p>cross-originでsame-siteな環境間でのWebAssemblyモジュールの共有が非推奨になりました\n<a href=\"https://www.chromestatus.com/feature/5650158039597056\">https://www.chromestatus.com/feature/5650158039597056</a></p>\n<p>合わせてこちらも参考にしてください<br>\n<a href=\"https://developer.chrome.com/blog/wasm-module-sharing-restricted-to-same-origin/\">Restricting Wasm module sharing to same-origin</a></p>\n<h3>Deprecate U2F API (Cryptotoken)</h3>\n<p>U2F API が非推奨になり、Chrome 98 からはデフォルトで無効になります。</p>\n<p>U2F とはなんぞやという人はこちらの記事が参考になります。</p>\n<p><a href=\"https://blog.jxck.io/entries/2018-05-15/webauthentication-api.html\">Web Authentication API で FIDO U2F(YubiKey) 認証 | blog.jxck.io</a></p>\n<h2>その他 Chrome Platform Status に記載されていたもの</h2>\n<blockquote>\n<p><a href=\"https://www.chromestatus.com/features#milestone=95\">https://www.chromestatus.com/features#milestone=95</a></p>\n</blockquote>\n<h3>Back-forward cache for same-site navigations on Android</h3>\n<p>Chrome 86 から origin trial で試せていた Android での戻る/進むのキャッシュが same-site で効くようになりました。<br>\n<a href=\"https://www.chromestatus.com/feature/5694778600587264\">https://www.chromestatus.com/feature/5694778600587264</a></p>\n<p>bfcache(Back/forward cache)については下記に詳細の説明が載っています。<br>\n<a href=\"https://web.dev/bfcache/\">https://web.dev/bfcache/</a></p>\n<h3>CSS @counter-style rules in shadow trees</h3>\n<p>Shadow tree に対してカスタムの counter-style を定義することができるようになりました。<br>\n<a href=\"https://www.chromestatus.com/feature/5716198446596096\">https://www.chromestatus.com/feature/5716198446596096</a></p>\n<p><code>@counter-style</code>については下記を参考ください</p>\n<div class=\"remark-highlight\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@counter-style</span> circled-alpha</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">system</span><span class=\"token punctuation\">:</span> fixed<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">symbols</span><span class=\"token punctuation\">:</span> Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">suffix</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\"><span class=\"token class\">.items</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">list-style</span><span class=\"token punctuation\">:</span> circled-alpha<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>このスタイルを当てた list を作ると次のようなリストができます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">Ⓐ One\nⒷ Two\nⒸ Three\nⒹ Four\nⒺ FIve</code></pre></div>\n<p><a href=\"https://developer.mozilla.org/ja/docs/Web/CSS/@counter-style#specifying_symbols_with_counter-style\">https://developer.mozilla.org/ja/docs/Web/CSS/@counter-style#specifying_symbols_with_counter-style</a></p>\n<h3>Cookie size limits</h3>\n<p>Set-Cookie header、及び、document.cookie、CookieStore で設定される Cookie のサイズが制限されます。\n具体的には Cookie の名前と値の合計が 4096 バイトまでになり、Cookie の各属性値は 1024 バイトに制限する必要があります。</p>\n<p><a href=\"https://www.chromestatus.com/feature/4946713618939904\">https://www.chromestatus.com/feature/4946713618939904</a></p>\n<h3>Logical properties for contain-intrinsic-size</h3>\n<p>contain-intrinsic-size を省略した次の表記が追加されます。</p>\n<ul>\n<li>contain-intrinsic-{width,height}</li>\n<li>contain-intrinsic-{inline,block}-size</li>\n</ul>\n<p><a href=\"https://www.chromestatus.com/feature/5709654999957504\">https://www.chromestatus.com/feature/5709654999957504</a></p>\n<p>参考:</p>\n<p><a href=\"https://drafts.csswg.org/css-sizing-4/#intrinsic-size-override\">https://drafts.csswg.org/css-sizing-4/#intrinsic-size-override</a></p>\n<h3>contain-intrinsic-size</h3>\n<p>content-visibility で指定された要素の自然なサイズを制御するプロパティです。</p>\n<p>次の実装は画面外の section のレンダリングをスキップする例です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n<span class=\"token selector\">section</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">content-visibility</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">contain-intrinsic-size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token number\">500</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>style</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<p>ビューポート外のコンテンツはレンダリングされなくなります。</p>\n<p><a href=\"https://developer.mozilla.org/ja/docs/Web/CSS/content-visibility\">https://developer.mozilla.org/ja/docs/Web/CSS/content-visibility</a></p>\n<h3>New UA platform version source on Windows for User-Agent Client Hints</h3>\n<p>Windows の Sec-CH-UA-Platform-Version(User-Agent Client Hints)で返されるバージョンが Windows プラットフォームの違いを識別できるように更新されました。</p>\n<p><a href=\"https://www.chromestatus.com/feature/5080939765956608\">https://www.chromestatus.com/feature/5080939765956608</a><br>\n<a href=\"https://github.com/WICG/ua-client-hints/issues/220#issuecomment-870858413\">https://github.com/WICG/ua-client-hints/issues/220#issuecomment-870858413</a></p>\n<h3>Note taking new note URL</h3>\n<p>Web Application Manifest が <code>note_taking</code> と <code>new_note_url</code> に対応しました。\nWeb Application 側から新しいメモを書きたい時にユーザーエージェントに読み込ませたい URL を指定できるようになります。</p>\n<p><a href=\"https://www.chromestatus.com/feature/5205972320518144\">https://www.chromestatus.com/feature/5205972320518144</a><br>\n<a href=\"https://wicg.github.io/manifest-incubations/index.html#note_taking-member\">https://wicg.github.io/manifest-incubations/index.html#note_taking-member</a></p>\n<h3>Secure payment confirmation</h3>\n<p>WebAuthn を利用して、Web 上での支払い時の認証を強化することができるようになります。</p>\n<p><a href=\"https://www.chromestatus.com/feature/5702310124584960\">https://www.chromestatus.com/feature/5702310124584960</a></p>\n<p>※ Payment Request API で簡単・高速な決済を実現する\n<a href=\"https://developers.google.com/web/updates/2016/07/payment-request?hl=ja\">https://developers.google.com/web/updates/2016/07/payment-request?hl=ja</a></p>\n<p>※ PaymentRequestAPI で secure-payment-confirmation を使った実装例\n<a href=\"https://www.w3.org/TR/2021/WD-secure-payment-confirmation-20210831/#sctn-sample-authentication\">https://www.w3.org/TR/2021/WD-secure-payment-confirmation-20210831/#sctn-sample-authentication</a></p>\n<h3>droppedEntriesCount in PerformanceObserver callback</h3>\n<p>PerformanceObserver のコールバックに droppedEntriesCount が追加されます。</p>\n<p><a href=\"https://www.chromestatus.com/feature/5320666234486784\">https://www.chromestatus.com/feature/5320666234486784</a></p>\n<p>PerformanceObserver<br>\n<a href=\"https://developer.mozilla.org/ja/docs/Web/API/PerformanceObserver\">https://developer.mozilla.org/ja/docs/Web/API/PerformanceObserver</a></p>\n<h3>self.reportError()</h3>\n<p>キャッチされない例外をレポートする<code>self.reportError()</code>が追加されます。\n<a href=\"https://www.chromestatus.com/feature/5634523220934656\">https://www.chromestatus.com/feature/5634523220934656</a></p>\n<p>以下のコードを実行するとerrorはcatchで握り潰されずに<code>Uncaught Error: foo</code>になります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addition</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    self<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reportError</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">count</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> addition<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>参考:</p>\n<ul>\n<li><a href=\"https://html.spec.whatwg.org/#runtime-script-errors\">https://html.spec.whatwg.org/#runtime-script-errors</a></li>\n</ul>\n","metaData":{"title":"Chrome 95 リリースノートまとめ","author":"nus3","editor":"nakajmg","createdAt":"2021-11-17","summary":"Chrome 95 のリリースノートの要約です","tags":["Releasenote","Browser"],"updatedAt":"2021-11-17"}}]},"__N_SSG":true}
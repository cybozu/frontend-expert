{"pageProps":{"posts":[{"slug":"release-chrome-95","content":"<p>Chrome 95 のリリースノート関連の情報をまとめました。</p>\n<ul>\n<li><a href=\"https://developer.chrome.com/blog/new-in-chrome-95/\">https://developer.chrome.com/blog/new-in-chrome-95/</a></li>\n<li><a href=\"https://developer.chrome.com/blog/new-in-devtools-95/\">https://developer.chrome.com/blog/new-in-devtools-95/</a></li>\n<li><a href=\"https://developer.chrome.com/blog/deps-rems-95/\">https://developer.chrome.com/blog/deps-rems-95/</a></li>\n<li><a href=\"https://www.chromestatus.com/features#milestone%3D95\">https://www.chromestatus.com/features#milestone%3D95</a></li>\n</ul>\n<h2>Routing with URLPattern</h2>\n<p><code>URLPattern</code>という機能が追加されました。現在は Chrome、Edge の 95 以上に対応しています。</p>\n<p>他のブラウザや Node.js ではまだサポートされていない機能ですが、<a href=\"https://github.com/kenchris/urlpattern-polyfill\">urlpattern-polyfill</a>で polyfill できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> pattern <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLPattern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> pathname<span class=\"token operator\">:</span> <span class=\"token string\">\"/books/:id\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://example.com/books/123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://example.com/books/123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">pathname</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">groups</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { id: '123' }</span>\n\n<span class=\"token comment\">// 引数で渡せる全てのプロパティ</span>\n<span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLPattern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  protocol<span class=\"token operator\">:</span> <span class=\"token string\">\"http{s}?\"</span><span class=\"token punctuation\">,</span>\n  username<span class=\"token operator\">:</span> <span class=\"token string\">\":username\"</span><span class=\"token punctuation\">,</span>\n  password<span class=\"token operator\">:</span> <span class=\"token string\">\":password\"</span><span class=\"token punctuation\">,</span>\n  hostname<span class=\"token operator\">:</span> <span class=\"token string\">\":subdomain.example.com\"</span><span class=\"token punctuation\">,</span>\n  port<span class=\"token operator\">:</span> <span class=\"token string\">\":port(80|443)\"</span><span class=\"token punctuation\">,</span>\n  pathname<span class=\"token operator\">:</span> <span class=\"token string\">\"/:path\"</span><span class=\"token punctuation\">,</span>\n  search<span class=\"token operator\">:</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span>\n  hash<span class=\"token operator\">:</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>詳細はこちら\n<a href=\"https://web.dev/urlpattern/\">https://web.dev/urlpattern/</a></p>\n<h2>Picking colors with the Eye Dropper API</h2>\n<p>カラーを取得する Eye Dropper API が追加されました</p>\n<p>詳細はこちらの記事で解説しています。</p>\n<p><a href=\"https://cybozu.github.io/frontend-expert/posts/eyedropper-api\">Chrome 95 で追加された画面上の色を取得する EyeDropper API について</a></p>\n<h2>PWA Summit</h2>\n<p>10 月 6~7 日に PWA Summit が開催されてました<br>\n見逃した方はアーカイブが下記のリンクに残ってるので、そこから確認できます</p>\n<p><a href=\"https://pwasummit.org/\">https://pwasummit.org/</a><br>\n<a href=\"https://www.youtube.com/channel/UC1j3gvdVISAEO1_2MwA5oQw/videos\">https://www.youtube.com/channel/UC1j3gvdVISAEO1_2MwA5oQw/videos</a></p>\n<h2>User-agent reduction origin trial</h2>\n<p>Origin Trial で実際に User-Agent の文字列が削減された後の挙動が試せます</p>\n<p>参考:</p>\n<ul>\n<li><a href=\"https://web.dev/user-agent-client-hints/\">User-Agent Client Hints によるユーザーのプライバシーと開発者体験の改善</a></li>\n<li><a href=\"https://developers-jp.googleblog.com/2021/09/chrome-user-agent.html\">User-Agent Reduction origin trial(日本語訳)</a></li>\n</ul>\n<h2>And more!</h2>\n<ul>\n<li>Storage Foundation API を origin trial で試せます</li>\n<li>WebAssembly で例外処理のサポートが提供され、例外がスローされたときにコードが中断できるようになります</li>\n<li>Chrome 100 が来年きます。バージョンが 2 桁から 3 桁になるので、自分のコードに何らかの影響があるかどうかを確認するといいかもしれません</li>\n</ul>\n<h2>DevTools</h2>\n<p>DevTools についてはこちらの日本語訳を参照ください。</p>\n<p><a href=\"https://developer.chrome.com/ja/blog/new-in-devtools-95/\">https://developer.chrome.com/ja/blog/new-in-devtools-95/</a></p>\n<h2>Deprecations and removals in Chrome 95</h2>\n<p>Chrome 95 で非推奨になったもの、もしくは削除されたものです。</p>\n<h3>Support for URLs with non-IPv4 hostnames ending in numbers</h3>\n<p>有効な IPv4 アドレスではない、 <code>http://foo.127.1/</code> のような数字で終わる host name を持つ URL が拒否されるようになります。</p>\n<p>社内のプレビュー環境などで IP アドレスをポストフィックスとして利用してたりする場合は影響がでているかもしれません。</p>\n<h3>WebAssembly cross-origin module sharing</h3>\n<p>cross-originでsame-siteな環境間でのWebAssemblyモジュールの共有が非推奨になりました\n<a href=\"https://www.chromestatus.com/feature/5650158039597056\">https://www.chromestatus.com/feature/5650158039597056</a></p>\n<p>合わせてこちらも参考にしてください<br>\n<a href=\"https://developer.chrome.com/blog/wasm-module-sharing-restricted-to-same-origin/\">Restricting Wasm module sharing to same-origin</a></p>\n<h3>Deprecate U2F API (Cryptotoken)</h3>\n<p>U2F API が非推奨になり、Chrome 98 からはデフォルトで無効になります。</p>\n<p>U2F とはなんぞやという人はこちらの記事が参考になります。</p>\n<p><a href=\"https://blog.jxck.io/entries/2018-05-15/webauthentication-api.html\">Web Authentication API で FIDO U2F(YubiKey) 認証 | blog.jxck.io</a></p>\n<h2>その他 Chrome Platform Status に記載されていたもの</h2>\n<blockquote>\n<p><a href=\"https://www.chromestatus.com/features#milestone=95\">https://www.chromestatus.com/features#milestone=95</a></p>\n</blockquote>\n<h3>Back-forward cache for same-site navigations on Android</h3>\n<p>Chrome 86 から origin trial で試せていた Android での戻る/進むのキャッシュが same-site で効くようになりました。<br>\n<a href=\"https://www.chromestatus.com/feature/5694778600587264\">https://www.chromestatus.com/feature/5694778600587264</a></p>\n<p>bfcache(Back/forward cache)については下記に詳細の説明が載っています。<br>\n<a href=\"https://web.dev/bfcache/\">https://web.dev/bfcache/</a></p>\n<h3>CSS @counter-style rules in shadow trees</h3>\n<p>Shadow tree に対してカスタムの counter-style を定義することができるようになりました。<br>\n<a href=\"https://www.chromestatus.com/feature/5716198446596096\">https://www.chromestatus.com/feature/5716198446596096</a></p>\n<p><code>@counter-style</code>については下記を参考ください</p>\n<div class=\"remark-highlight\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@counter-style</span> circled-alpha</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">system</span><span class=\"token punctuation\">:</span> fixed<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">symbols</span><span class=\"token punctuation\">:</span> Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">suffix</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\"><span class=\"token class\">.items</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">list-style</span><span class=\"token punctuation\">:</span> circled-alpha<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>このスタイルを当てた list を作ると次のようなリストができます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">Ⓐ One\nⒷ Two\nⒸ Three\nⒹ Four\nⒺ FIve</code></pre></div>\n<p><a href=\"https://developer.mozilla.org/ja/docs/Web/CSS/@counter-style#specifying_symbols_with_counter-style\">https://developer.mozilla.org/ja/docs/Web/CSS/@counter-style#specifying_symbols_with_counter-style</a></p>\n<h3>Cookie size limits</h3>\n<p>Set-Cookie header、及び、document.cookie、CookieStore で設定される Cookie のサイズが制限されます。\n具体的には Cookie の名前と値の合計が 4096 バイトまでになり、Cookie の各属性値は 1024 バイトに制限する必要があります。</p>\n<p><a href=\"https://www.chromestatus.com/feature/4946713618939904\">https://www.chromestatus.com/feature/4946713618939904</a></p>\n<h3>Logical properties for contain-intrinsic-size</h3>\n<p>contain-intrinsic-size を省略した次の表記が追加されます。</p>\n<ul>\n<li>contain-intrinsic-{width,height}</li>\n<li>contain-intrinsic-{inline,block}-size</li>\n</ul>\n<p><a href=\"https://www.chromestatus.com/feature/5709654999957504\">https://www.chromestatus.com/feature/5709654999957504</a></p>\n<p>参考:</p>\n<p><a href=\"https://drafts.csswg.org/css-sizing-4/#intrinsic-size-override\">https://drafts.csswg.org/css-sizing-4/#intrinsic-size-override</a></p>\n<h3>contain-intrinsic-size</h3>\n<p>content-visibility で指定された要素の自然なサイズを制御するプロパティです。</p>\n<p>次の実装は画面外の section のレンダリングをスキップする例です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n<span class=\"token selector\">section</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">content-visibility</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">contain-intrinsic-size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token number\">500</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>style</span><span class=\"token punctuation\">></span></span>\n</code></pre></div>\n<p>ビューポート外のコンテンツはレンダリングされなくなります。</p>\n<p><a href=\"https://developer.mozilla.org/ja/docs/Web/CSS/content-visibility\">https://developer.mozilla.org/ja/docs/Web/CSS/content-visibility</a></p>\n<h3>New UA platform version source on Windows for User-Agent Client Hints</h3>\n<p>Windows の Sec-CH-UA-Platform-Version(User-Agent Client Hints)で返されるバージョンが Windows プラットフォームの違いを識別できるように更新されました。</p>\n<p><a href=\"https://www.chromestatus.com/feature/5080939765956608\">https://www.chromestatus.com/feature/5080939765956608</a><br>\n<a href=\"https://github.com/WICG/ua-client-hints/issues/220#issuecomment-870858413\">https://github.com/WICG/ua-client-hints/issues/220#issuecomment-870858413</a></p>\n<h3>Note taking new note URL</h3>\n<p>Web Application Manifest が <code>note_taking</code> と <code>new_note_url</code> に対応しました。\nWeb Application 側から新しいメモを書きたい時にユーザーエージェントに読み込ませたい URL を指定できるようになります。</p>\n<p><a href=\"https://www.chromestatus.com/feature/5205972320518144\">https://www.chromestatus.com/feature/5205972320518144</a><br>\n<a href=\"https://wicg.github.io/manifest-incubations/index.html#note_taking-member\">https://wicg.github.io/manifest-incubations/index.html#note_taking-member</a></p>\n<h3>Secure payment confirmation</h3>\n<p>WebAuthn を利用して、Web 上での支払い時の認証を強化することができるようになります。</p>\n<p><a href=\"https://www.chromestatus.com/feature/5702310124584960\">https://www.chromestatus.com/feature/5702310124584960</a></p>\n<p>※ Payment Request API で簡単・高速な決済を実現する\n<a href=\"https://developers.google.com/web/updates/2016/07/payment-request?hl=ja\">https://developers.google.com/web/updates/2016/07/payment-request?hl=ja</a></p>\n<p>※ PaymentRequestAPI で secure-payment-confirmation を使った実装例\n<a href=\"https://www.w3.org/TR/2021/WD-secure-payment-confirmation-20210831/#sctn-sample-authentication\">https://www.w3.org/TR/2021/WD-secure-payment-confirmation-20210831/#sctn-sample-authentication</a></p>\n<h3>droppedEntriesCount in PerformanceObserver callback</h3>\n<p>PerformanceObserver のコールバックに droppedEntriesCount が追加されます。</p>\n<p><a href=\"https://www.chromestatus.com/feature/5320666234486784\">https://www.chromestatus.com/feature/5320666234486784</a></p>\n<p>PerformanceObserver<br>\n<a href=\"https://developer.mozilla.org/ja/docs/Web/API/PerformanceObserver\">https://developer.mozilla.org/ja/docs/Web/API/PerformanceObserver</a></p>\n<h3>self.reportError()</h3>\n<p>キャッチされない例外をレポートする<code>self.reportError()</code>が追加されます。\n<a href=\"https://www.chromestatus.com/feature/5634523220934656\">https://www.chromestatus.com/feature/5634523220934656</a></p>\n<p>以下のコードを実行するとerrorはcatchで握り潰されずに<code>Uncaught Error: foo</code>になります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addition</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    self<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">reportError</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">count</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> addition<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>参考:</p>\n<ul>\n<li><a href=\"https://html.spec.whatwg.org/#runtime-script-errors\">https://html.spec.whatwg.org/#runtime-script-errors</a></li>\n</ul>\n","metaData":{"title":"Chrome 95 リリースノートまとめ","author":"nus3","editor":"nakajmg","createdAt":"2021-11-17","summary":"Chrome 95 のリリースノートの要約です","tags":["Releasenote","Browser"],"updatedAt":"2021-11-17"}},{"slug":"release-safari-15","content":"<p>先日 Safari 15 がリリースされました。\n<a href=\"https://webkit.org/blog/11989/new-webkit-features-in-safari-15/\">https://webkit.org/blog/11989/new-webkit-features-in-safari-15/</a></p>\n<p>影響の大きそうな箇所や、知っておいたほうが良さそうな箇所を中心に紹介します。</p>\n<h2>HTML</h2>\n<h3>theme-color</h3>\n<p>meta タグ上での <code>theme-color</code> のサポートが追加されました。\n指定することで、ブラウザのメニューバーやタブバーといった領域のカラーを変更することができます。 <code>prefers-color-scheme</code> と併用することで、ダークモード/ライトモードに応じた色の指定もできます。</p>\n<p><a href=\"https://developer.apple.com/videos/play/wwdc2021/10029/\">Design for Safari 15</a></p>\n<h2>CSS</h2>\n<h3><code>aspect-ratio</code> プロパティのサポート</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio\">aspect-ratio - CSS: Cascading Style Sheets | MDN</a></p>\n<h3><code>lab()</code> <code>lch()</code> <code>hwb()</code> シンタックスのサポート</h3>\n<p><a href=\"https://www.w3.org/TR/css-color-4/\">W3C Color Module Level 4</a>に沿った新しいカラーシンタックス <code>lab()</code> <code>lch()</code> <code>hwb()</code> が利用可能になりました。</p>\n<h3>list-style-type に設定可能な値が追加</h3>\n<p>li 要素など、リストアイテム要素のマーカーを指定するための <code>list-style-type</code> 新たに 12 個の値が設定可能になりました。</p>\n<p>MDN のデモで値に応じた表示を確認することができます。</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type#result_2\">https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type#result_2</a></p>\n<h2>Web Inspector</h2>\n<p>CSS Grid に対応したオーバレイ表示が可能になりました。</p>\n<p><a href=\"https://webkit.org/blog/11588/introducing-css-grid-inspector/\">https://webkit.org/blog/11588/introducing-css-grid-inspector/</a></p>\n<p>デバッグ用のブレークポイント周りなどにも改善が施されています。その他の変更点は WWDC2021 の発表動画に含まれます。</p>\n<p><a href=\"https://developer.apple.com/videos/play/wwdc2021/10031/\">Discover Web Inspector improvements - WWDC21 - Videos - Apple Developer</a></p>\n<h2>JavaScript and WebAssembly</h2>\n<p>Worker や ServiceWorker で ES6 Modules のサポートが追加されました。</p>\n<p>また、JavaScript エンジンで次の機能がサポートされました。</p>\n<ul>\n<li>top-level <code>await</code></li>\n<li><code>Error.cause</code></li>\n<li>プライベートクラスメソッド とアクセサ</li>\n<li><code>BigInt64Array</code> および <code>BigUint64Array</code></li>\n</ul>\n<p>WebAssembly では次のサポートが追加されました。</p>\n<ul>\n<li>streaming compilation</li>\n<li>bulk memory operations</li>\n<li>reference types</li>\n<li>non-trapping conversions from <code>float</code> to <code>int</code></li>\n</ul>\n<p><a href=\"https://github.com/WebAssembly/spec/tree/main/proposals\">WebAssembly/spec - proposals</a>\n<a href=\"https://developer.apple.com/videos/play/wwdc2021/10030\">Develop advanced web content - WWDC21 - Videos - Apple Developer</a></p>\n<h2>Web APIs</h2>\n<h3>WebGL2 に対応</h3>\n<p>WebGL2 に対応し、かつ Apple の グラフィック API の Metal 上で動作するようになり、パフォーマンスが向上しました。</p>\n<h3>Web Share API Level 2 の実装</h3>\n<p>Web Share API Level 2 の実装により、Web ページからアプリへのファイル共有が可能になりました。</p>\n<p><a href=\"https://developer.apple.com/videos/play/wwdc2021/10030\">Develop advanced web content - WWDC21 - Videos - Apple Developer</a></p>\n<h2>Media</h2>\n<ul>\n<li>MediaSession API のサポートの追加</li>\n</ul>\n<p><a href=\"https://developer.apple.com/videos/play/wwdc2021/10189/\">Coordinate media playback in Safari with Group Activities - WWDC21 - Videos - Apple Developer</a></p>\n<h2>Security and Privacy</h2>\n<h3>自動 HTTPS アップグレードのサポート</h3>\n<p>http と https の双方が利用可能なページの場合、自動で https を利用するようになります。</p>\n<h2>所感</h2>\n<p><code>aspect-ratio</code> が 主要 4 ブラウザ(Chrome/Safari/Firefox/Edge)すべてで利用可能になりましたね。今後利用するケースが徐々に増えていきそうです。</p>\n<p>余談ですが、<code>list-style-type</code> に <code>japanese-formal</code> を指定すると <code>壱・弐・参・四・伍…</code> になるのですね。カッコいいです。</p>\n","metaData":{"title":"Safari 15 の新機能とかまとめ","author":"mugi","editor":"nakajmg","createdAt":"2021-11-16","summary":"先日 Safari 15 がリリースされました。影響の大きそうな箇所や、知っておいたほうが良さそうな箇所を中心に紹介します。","tags":["Releasenote","Browser"],"updatedAt":"2021-11-16"}},{"slug":"ergonomic-brand-checks-for-private-fields","content":"<p>2021年7月に行われた TC39 ミーティングで <a href=\"https://github.com/tc39/proposal-private-fields-in-in\">Ergonomic brand checks for Private Fields</a> というプロポーザルが Stage 4 になりました。\nこのプロポーザルは、ES2022 に含まれる予定です。また、<a href=\"https://devblogs.microsoft.com/typescript/announcing-typescript-4-5-rc/#private-field-presence-checks\">TypeScript 4.5 にも含まれる予定です</a>。</p>\n<p>この記事では、Ergonomic brand checks for Private Fields について解説します。</p>\n<h2>概要</h2>\n<p>Ergonomic brand checks for Private Fields は、<code>in</code> 演算子を使ったプライベートフィールドの有無の判定を可能にするプロポーザルです。</p>\n<h3>現在の <code>in</code> 演算子</h3>\n<p><code>in</code> 演算子は、オブジェクトが特定の名前のプロパティを持っているかどうかを判定するための二項演算子です。\n左辺にプロパティの名前、右辺にオブジェクトを受け取ります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> prop1<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prop1\"</span> <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<h3>新しい <code>in</code> 演算子</h3>\n<p>Ergonomic brand checks for Private Fields では、この <code>in</code> 演算子を拡張し、左辺に Private Identifier を取れるようになります。</p>\n<p>Private Identifier は <code>#foo</code> のような形をした特別な識別子で、クラスのプライベートフィールドを表現するのに使われます。</p>\n<p>たとえば、次のコードではクラス <code>Foo</code> は、<code>#prop1</code> というプライベートフィールドを持ちます。\nこのとき <code>#prop1</code> は Private Identifier です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n  #prop1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>拡張された <code>in</code> 演算子では、次のようにしてオブジェクトにプライベートフィールドが含まれるかどうかをチェックできます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\">#prop1 <span class=\"token keyword\">in</span> obj\n</code></pre></div>\n<p>しかし、プライベートフィールドはプライベートなので上記のコードはそのフィールドを持つクラスの中でのみ使うことができます。</p>\n<p>つまり、次のようにクラスの外でプライベートフィールドに対して <code>in</code> を使うとエラーになります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n  #prop1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>#prop1 <span class=\"token keyword\">in</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Uncaught SyntaxError: Private field '#prop1' must be declared in an enclosing class</span>\n</code></pre></div>\n<p>しかし、次のようなコードはエラーになりません。メソッド <code>foo</code> はクラス <code>Foo</code> の中にあるので、Private Identifier である <code>#foo</code> を <code>in</code> 演算子の左辺として使うことができます。\nそして、この <code>foo</code> の中で <code>this</code> は <code>Foo</code> のインスタンスであり、それには当然 <code>#prop1</code> というプライベートプロパティが存在するので、<code>#prop1 in this</code> の結果は <code>true</code> になります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n  #prop1<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> #prop1 <span class=\"token keyword\">in</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<h2>モチベーション</h2>\n<p>存在しないプライベートフィールドにアクセスすると、実行時エラーが発生します。</p>\n<p>その挙動と try / catch を組み合わせて、次のようにしてオブジェクトのクラスを判定できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n  #brand<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function\">isFoo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n      obj<span class=\"token punctuation\">.</span><span class=\"token property-access\">#brand</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><code>obj.#brand</code> にアクセスしたとき、<code>obj</code> が Foo のインスタンスでない場合、実行時エラーが発生し <code>catch</code> に入り <code>false</code> が返されます。\nこのようにして、あるオブジェクトが<code>Foo</code>のインスタンスであるかを検証するスタティックメソッドを作れます。</p>\n<p>ですが、このパターンは冗長です。<code>in</code> 演算子を使えばもっと短く書けます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n  #brand<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function\">isFoo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> #brand <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>これが、このプロポーザルの主なモチベーションです。</p>\n<p><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/instanceof\"><code>instanceof</code> 演算子</a>も基本的にはこの目的のために使えます。しかし <code>instanceof</code> 演算子はプロトタイプに依存するので、プロトタイプを書き換えることでその挙動を変更できます。</p>\n<p>次の例では、 <code>obj</code> は <code>Foo</code> のインスタンスではありませんが、後からプロトタイプを書き換えているので <code>obj instanceof Foo</code> は <code>true</code> になっています。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setPrototypeOf</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<p>なので、より安全にオブジェクトのもとになったクラスを検証したい場合は <code>in</code> 演算子を使うと良いでしょう。</p>\n<h2>参考リンク</h2>\n<ul>\n<li><a href=\"https://tc39.es/ecma262/#prod-RelationalExpression\">https://tc39.es/ecma262/#prod-RelationalExpression</a></li>\n<li><a href=\"https://tc39.es/ecma262/#prod-PrivateIdentifier\">https://tc39.es/ecma262/#prod-PrivateIdentifier</a></li>\n<li><a href=\"https://github.com/tc39/proposal-private-fields-in-in\">https://github.com/tc39/proposal-private-fields-in-in</a></li>\n<li><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/in\">https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/in</a></li>\n</ul>\n","metaData":{"title":"ES2022 と TypeScript 4.5 に入るプライベートフィールドのための in 演算子について","author":"sosukesuzuki","createdAt":"2021-11-11","summary":"ES2022 と TypeScript 4.5 に入る現在 Stage 4 の提案 Ergonomic brand checks for Private Fields についての解説です。","tags":["ECMAScript","TypeScript"],"updatedAt":"2021-11-11"}},{"slug":"eyedropper-api","content":"<p><a href=\"https://developer.chrome.com/blog/new-in-chrome-95/\">Chrome 95 がリリース</a>され、新機能として EyeDropper API が追加されました。(Edge 95 にも追加されました)</p>\n<h2>EyeDropper API とは</h2>\n<p>EyeDropper API は画面上から色情報を取得するスポイトツールをブラウザ上で実現する API です。スポイトツールはデザインツールなどに搭載されていることが多いかと思います。\nChrome の DevTools にも色選択をするときにスポイトアイコンをクリックするとスポイトツールが使えますが、この機能が単体の Web API として実装された形になります。</p>\n<p><img src=\"/frontend-expert/image/eyedropper-api/eyedropper.png\" alt=\"DevToolsのカラーピッカー\"></p>\n<h2>使い方</h2>\n<p>EyeDropper API の使い方は次のようになります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> eyeDropper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EyeDropper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> eyeDropper<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {sRGBHex: '#92d0e1'}</span>\n</code></pre></div>\n<p><code>EyeDropper</code>のインスタンスで<code>open</code>を実行すると色選択の UI が表示されます。</p>\n<h3>セキュリティ上の制約</h3>\n<p>EyeDropper API の <code>open</code> はユーザーの操作なしに実行するとエラーになります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">DOMException: Failed to execute &#x26;#39;open&#x26;#39; on &#x26;#39;EyeDropper&#x26;#39;: EyeDropper::open() requires user gesture.</code></pre></div>\n<p>これはプライバシーやセキュリティを考慮しての制限になります。<code>open</code>はユーザーの操作によってのみスポイトモードに移行し、ユーザーがクリックしたときのみ色の値を返します。\nこれによって悪意のあるサイトがユーザーの画面のピクセル情報を勝手に取得できないようになっています。</p>\n<h3>console からは起動できる</h3>\n<p>ユーザーの操作なしに起動できない API ですが、DevTools の console からはその限りではありません。次のワンライナーのコードを console で実行するとスポイトツールを起動できます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword control-flow\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EyeDropper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>覚えておくと便利かもしれません。</p>\n<p>ちなみにですが、Snippets からは起動できませんでした。</p>\n<h2>EyeDropper API を使ったデモサイト</h2>\n<p>EyeDropper API のデモサイトの紹介です。こちらのデモでは EyeDropper API を使った色選択ゲームが遊べます。</p>\n<p><a href=\"https://captainbrosset.github.io/eyedropper-demos/color-game.html\">eyedropper-demos/color-game</a></p>\n<p>Play ボタンをクリックするとカウントダウンが開始されます。時間内に左のマスに表示された色と同じ色を選択すると勝ちです。</p>\n<p><img src=\"/frontend-expert/image/eyedropper-api/demo.png\" alt=\"EyeDropper APIのデモ\"></p>\n<p>一部ブラウザでは <code>input</code>タグで<code>type=\"color\"</code>とすることで似たようなピッカーを使用できましたが、UI なしに実行できるようになったことでいろいろな使い道が考えられそうですね。</p>\n<h2>参考リンク</h2>\n<ul>\n<li><a href=\"https://wicg.github.io/eyedropper-api/\">https://wicg.github.io/eyedropper-api/</a></li>\n<li><a href=\"https://web.dev/eyedropper/\">https://web.dev/eyedropper/</a></li>\n</ul>\n","metaData":{"title":"Chrome 95 で追加された画面上の色を取得するEyeDropper APIについて","author":"nakajmg","createdAt":"2021-11-02","summary":"Chromiumベースのブラウザーに追加されたEyeDropper APIについて紹介します","tags":["Web API","Browser"],"updatedAt":"2021-11-02"}},{"slug":"tc39-meeting-2021-10","content":"<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">※ 旧タイトル: TC39 meeting 86th の概要とステージの移動</code></pre></div>\n<p>TC39 の 86 回目のミーティングが 10/25 ~ 10/28 に開催されました。\nこのミーティングで議題に上がった提案と、そのステージの移動について紹介します。</p>\n<ul>\n<li><a href=\"https://github.com/tc39/agendas/blob/master/2021/10.md\">agendas/10.md at master · tc39/agendas</a></li>\n<li><a href=\"https://github.com/babel/proposals/issues/77\">Oct 2021 · Issue #77 · babel/proposals</a></li>\n</ul>\n<h2>for Stage 4</h2>\n<h3><a href=\"https://github.com/tc39/proposal-error-cause\">Error Cause</a></h3>\n<p><strong>Stage 4 になりました。ECMAScript 2022 に入ります</strong></p>\n<p>Error Cause は、<code>Error</code> コンストラクタの第 2 引数に <code>cause</code> という値で原因となったエラーを渡すことができるようにする提案です。\nキャッチする側では、<code>error.cause</code> で、そのエラーを取得できます。</p>\n<p>例を示します。</p>\n<p><code>doUploadJob</code> 関数は <code>fetch</code> を実行して失敗したときに新しいエラーをスローします。そのエラーの第 2 引数に <code>{ cause: err }</code> というオブジェクトを渡しています。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">doUploadJob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://example.com/upload\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Upload job result failed\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> cause<span class=\"token operator\">:</span> err <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">doJob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Caused by\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span><span class=\"token property-access\">cause</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Error: Upload job result failed</span>\n<span class=\"token comment\">// Caused by TypeError: Failed to fetch</span>\n</code></pre></div>\n<p><code>doUploadJob</code> がスローしているエラーメッセージは <code>\"Upload job result failed\"</code> ですが、その原因となったエラーを <code>cause</code> として渡すことで、キャッチする側でどのエラーが原因で失敗したのかを取得できます。</p>\n<p>この例では、<code>doUploadJob</code> が失敗した原因が <code>TypeError: Failed to fetch</code> であったことがわかります。</p>\n<h2>for Stage 3</h2>\n<p>今回は、for Stage 3 の提案はありませんでした。</p>\n<h2>for Stage 2</h2>\n<h3><a href=\"https://github.com/tc39/proposal-array-grouping\">Array Grouping</a></h3>\n<p><strong>Stage 2 になりました</strong></p>\n<p>Array Grouping は、<code>Array</code> に <code>groupBy</code> というインスタンスメソッドを追加する提案です。</p>\n<p>ユースケースは<a href=\"https://lodash.com/docs/4.17.15#groupBy\">Lodash の <code>groupBy</code></a> と同様です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narray<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">groupBy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"even\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"odd\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// =>  { odd: [1, 3, 5], even: [2, 4] }</span>\n</code></pre></div>\n<h3><a href=\"https://github.com/tc39/proposal-partial-application\">Partial Application</a></h3>\n<p><strong>Stage 2 になりませんでした</strong></p>\n<p>Partial Application は、関数の部分適用のための構文を導入します。</p>\n<p>例を示します。</p>\n<p><code>add</code> は 2 つの引数を受け取り、その 2 つを足し合わせて返すだけの単純な関数です。\nそして、Partial Application を使って <code>addOne</code> という新しい関数を作っています。<code>addOne</code> は、1 つの引数を受け取り、それに<code>1</code>を足して返す関数です。\nつまり、既存の関数の一部の引数だけ渡して、残りの引数を受け取るような関数を作ることができます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> addOne <span class=\"token operator\">=</span> add<span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">addOne</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n</code></pre></div>\n<p>現在の JavaScript で表現すると、次のようになります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">y</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> addOne <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">addOne</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n</code></pre></div>\n<p>Haskell のような関数型プログラミング言語では標準で備わっている機能です。</p>\n<h2>for Stage 1</h2>\n<h3><a href=\"https://github.com/bathos/proposal-string-cooked\"><code>String.cooked</code></a></h3>\n<p><strong>Stage 1 になりました</strong></p>\n<p><code>String.cooked</code> は <code>String</code> に新しいスタティックメソッド <code>cooked</code> を追加する提案です。\n<code>String.cooked</code> は <a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/String/raw\"><code>String.raw</code></a> と逆のことをします。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">raw</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">mmm ... \\u0064elicious cooked string</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// mmm ... \\u0064elicious cooked string</span>\n<span class=\"token known-class-name class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">cooked</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">mmm ... \\u0064elicious cooked string</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// \"mmm ... delicious cooked string\"</span>\n</code></pre></div>\n<p>つまり、通常のテンプレートリテラルとおなじ挙動です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">mmm ... \\u0064elicious cooked string</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// \"mmm ... delicious cooked string\"</span>\n</code></pre></div>\n<p>この機能がタグ付きテンプレートリテラルとして存在することで、これを用いて新しいタグ付きテンプレートリテラルを作るときに役にたちます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">myTag</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">strings<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>values</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">cooked</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span>values<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token arrow operator\">=></span> <span class=\"token known-class-name class-name\">String</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nmyTag<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token string\">'world'</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token comment\">// \"hello WORLD\"</span>\n</code></pre></div>\n<h3><a href=\"https://github.com/jridgewell/proposal-destructuring-private\">Destructure Private Fields</a></h3>\n<p><strong>Stage 1 を飛ばして、Stage 2 になりました</strong></p>\n<p>Destructure Private Fields は、プライベートフィールドの分割代入のための構文を導入します。</p>\n<p><code>#</code> からはじまる識別子は通常であれば存在できないので、別の名前にリネームする必要があります。次の例では <code>this.#x</code> を <code>x</code> という名前にリネームしています。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n  #x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">#x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 1</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> #x<span class=\"token operator\">:</span> x <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => 1</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3><a href=\"https://github.com/js-choi/proposal-bind-this\">Bind-this operator</a></h3>\n<p><strong>Stage 1 になりました</strong></p>\n<p>Bind this operator は、<a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\">Function.prototype.bind</a> と同様の方法で関数をバインドするための二項演算子を導入する提案です。</p>\n<p>以前から存在する Stage 0 の <a href=\"https://github.com/tc39/proposal-bind-operator\">Bind Operator</a> の後継であり、Stage 1 の <a href=\"https://github.com/tc39/proposal-extensions\">Extensions</a> の競合です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">hasOwnProperty</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> foo<span class=\"token operator\">:</span> <span class=\"token string\">\"foo\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> foo<span class=\"token operator\">:</span> <span class=\"token string\">\"foo\"</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span><span class=\"token operator\">:</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<h3><a href=\"https://github.com/js-choi/proposal-function-helpers\">Function helpers</a></h3>\n<p><strong>Stage 1 になりませんでした。この提案に含まれる関数は個別の提案として再度提出されるかもしれません。</strong></p>\n<p>Function helpers は、<code>Function</code> のスタティックメソッドとして便利なヘルパー関数を追加する提案です。</p>\n<p><code>Function.flow</code> は引数に与えられた関数を合成した新しい関数を返します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> f <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Function</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">flow</span><span class=\"token punctuation\">(</span>f0<span class=\"token punctuation\">,</span> f1<span class=\"token punctuation\">,</span> f2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// f2(f1(f0(5, 7))).</span>\n</code></pre></div>\n<p><code>Function.pipe</code> は第 1 引数の値を、それ移行の引数として渡された関数を合成した関数に渡した結果を返します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Function</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> f0<span class=\"token punctuation\">,</span> f1<span class=\"token punctuation\">,</span> f2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// f2(f1(f0(5))).</span>\n</code></pre></div>\n<p><code>Function.constant</code> は、第 1 引数として渡された値を返し続ける関数を返します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> f <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Function</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">constant</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fooo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">3009</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> foo<span class=\"token operator\">:</span> <span class=\"token string\">\"foo\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n</code></pre></div>\n<p><code>Function.identifiy</code> は、第 1 引数に与えられた値をそのまま返します。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token known-class-name class-name\">Function</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">identity</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n<span class=\"token known-class-name class-name\">Function</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">identity</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span>\n</code></pre></div>\n<p><code>Function.tap</code> はコールバック関数を引数として受け取り、関数を返します。\n<code>Function.tape</code> が返した関数に引数を渡すと、それをコールバック関数に渡して実行し、その上でその引数をそのまま返します。\n言葉で説明すると難しいですが、例を見れば簡単だと思います。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> f <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Function</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">tap</span><span class=\"token punctuation\">(</span><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">log</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5 を出力して、5 を返す</span>\n</code></pre></div>\n<h3><a href=\"https://github.com/lucacasonato/proposal-evaluator-attributes\">Evaluator Attributes</a></h3>\n<p><strong>Stage 1 になりました</strong></p>\n<p>Evaluator Attributes は、インポートされたモジュールの評価方法を処理系に伝えるための構文を導入します。</p>\n<p>例にある通り、提案された目的は WebAssembly のモジュールを JavaScript の Import 文で読み込むためです。しかし、提案の仕様としては WebAssembly には限られていません。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">mod</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./foo.wasm\"</span> <span class=\"token keyword module\">as</span> <span class=\"token string\">\"wasm-module\"</span><span class=\"token punctuation\">;</span>\nmod <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">WebAssembly<span class=\"token punctuation\">.</span>Module</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</code></pre></div>\n<p>現在 Stage 3 の <a href=\"https://github.com/tc39/proposal-import-assertions\">Import Assertions</a> に似ていますが、Import Assertions はモジュールの評価方法に影響を与えることはできません。</p>\n<h3>RegExp Features</h3>\n<p>前回のミーティングで提案された<a href=\"https://github.com/rbuckton/proposal-regexp-features\">RegExp Features</a>が機能ごとに別々の提案に分割されました。</p>\n<h4><a href=\"https://github.com/rbuckton/proposal-regexp-modifiers\">RegExp Modifiers</a></h4>\n<p><strong>Stage 1 になりました</strong></p>\n<h4><a href=\"https://github.com/rbuckton/proposal-regexp-x-mode\">RegExp Extended Mode and Comments</a></h4>\n<p><strong>Stage 1 になりました</strong></p>\n<h4><a href=\"https://github.com/rbuckton/proposal-regexp-atomic-operators\">RegExp Atomic Operators</a></h4>\n<p><strong>Stage 1 になりませんでした</strong></p>\n<h4><a href=\"https://github.com/rbuckton/proposal-regexp-r-escape\">RegExp <code>\\R</code> Escape</a></h4>\n<p><strong>Stage 1 になりました</strong></p>\n<h4><a href=\"https://github.com/rbuckton/proposal-regexp-buffer-boundaries\">RegExp Buffer Boundaries</a></h4>\n<p><strong>Stage 1 になりました</strong></p>\n<h3>Updates</h3>\n<p>ステージの移動はないものの、アップデートがあった提案です。</p>\n<ul>\n<li><a href=\"https://github.com/tc39/proposal-change-array-by-copy\">Change Array by Copy</a></li>\n<li><a href=\"https://github.com/tc39/proposal-json-parse-with-source\">JSON.parse sourct text access</a></li>\n<li><a href=\"https://github.com/tc39/proposal-record-tuple/\">Records &#x26; Tuples</a></li>\n<li><a href=\"https://github.com/tc39/proposal-explicit-resource-management\">Explicit Resource Management</a></li>\n<li><a href=\"https://github.com/tc39/proposal-js-module-blocks\">JS Module Blocks</a></li>\n<li><a href=\"https://github.com/js-choi/proposal-array-from-async\">Array.fromAsync</a></li>\n</ul>\n<h2>その他</h2>\n<p>提案ではなく、仕様書の変更として扱われているものです。</p>\n<h3><a href=\"https://github.com/tc39/ecma262/pull/1321\">Extending null</a></h3>\n<p><strong>合意は得られませんでした</strong></p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">null</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</code></pre></div>\n","metaData":{"title":"ECMAScriptの最新動向 2021年11月版","author":"sosukesuzuki","editor":"nakajmg","createdAt":"2021-11-02","summary":"2021年10月25日~28日に開催された TC39 meeting 86th の内容を紹介します","tags":["TC39","ECMAScript"],"updatedAt":"2021-11-02"}},{"slug":"release-firefox-93","content":"<p>Firefox 93 がリリースされました！</p>\n<ul>\n<li><a href=\"https://www.mozilla.org/en-US/firefox/93.0/releasenotes/\">https://www.mozilla.org/en-US/firefox/93.0/releasenotes/</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Releases/93\">https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Releases/93</a></li>\n</ul>\n<p>今回のリリースから AVIF 画像フォーマットがデフォルトで有効化されます。</p>\n<p>クライアント側の使用感が変わるわけではありませんが、今後こういった高圧縮可能な形式がスタンダードになることでよりリッチな Web コンテンツを多く提供できるようになるかもしれませんね。</p>\n<p>また、クラスの <code>static</code> 初期化ブロックをはじめとして、多くのイベントハンドラやプロパティの追加が盛り込まれているため、開発者視点では重要なアップデートではないかと思われます。</p>\n<h2>New</h2>\n<ul>\n<li>AV1 形式の画像フォーマットに対応</li>\n<li>PDF ビューアーがより詳細なフォームに対応(複数の政府や銀行が使用している XFA ベースフォーム)</li>\n<li>Windows 版にて、利用可能メモリが極端に少ない場合に利用状況や属性に基づいてタブを自動的にアンロードするようになった</li>\n<li>macOS 版にて、.dmg ファイルからマウントされた Firefox を実行している時、セッションを失わないためにインストールを完了するかどうかプロンプトが表示されるようになった</li>\n<li>安全でない接続に依存している、もしくは安全でない可能性のあるダウンロードをブロックするようになった</li>\n<li>Smart Block 3.0 (プライバシー保護機能)の互換性向上</li>\n<li>新しい referrer tracking protection を Strick Tracking Protection と Private Browsing に導入</li>\n<li>Firefox Suggest(Web ナビゲーター) の導入</li>\n</ul>\n<h2>Fixed</h2>\n<ul>\n<li>VoiceOver がアクセス可能なツリーコントロール内にあるチェック可能アイテムのチェック状態を正しく判別するようになった</li>\n<li>Orca スクリーンリーダーが Firefox で正しく動作するようになった</li>\n<li>その他セキュリティ修正</li>\n</ul>\n<h2>Changed</h2>\n<ul>\n<li>3DES を使用する TLS 暗号スイートが無効化\n<ul>\n<li>非推奨バージョンの TLS を有効化する設定により利用は可能</li>\n</ul>\n</li>\n<li>ダウンロードパネルが Firefox のビジュアルスタイルに沿うようになった</li>\n</ul>\n<h2>for web developer</h2>\n<h3>HTML</h3>\n<ul>\n<li>ARIA <code>meter</code> ロールを実装</li>\n<li><code>&#x3C;input type=\"datetime-local\"></code> の UI を実装</li>\n</ul>\n<h3>CSS</h3>\n<ul>\n<li><code>font-synthesis</code> に <code>small-caps</code> キーワードを追加</li>\n</ul>\n<h3>JavaScript</h3>\n<ul>\n<li>クラスの <code>static</code> 初期化ブロックをサポート</li>\n<li><code>createImageBitmap()</code> にて option オブジェクトを用いて <code>imageOrientation</code> 及び <code>premultiplyAlpha</code> プロパティを渡せるようになった</li>\n<li><code>Intl.supportedValueOf()</code> をサポート\n<ul>\n<li>実装でサポートされている値をコードで列挙できるようになった</li>\n</ul>\n</li>\n</ul>\n<h3>HTTP</h3>\n<ul>\n<li>ダイジェストを用いた HTTP 認証で SHA-256 アルゴリズムをサポート</li>\n<li>画像のデフォルト HTTP ACCEPT ヘッダーが <code>image/avif,image/webp,*/*</code> に変更\n<ul>\n<li>AV1 フォーマット対応によるものだと思われます</li>\n</ul>\n</li>\n</ul>\n<h3>APIs</h3>\n<ul>\n<li><code>ElementInternals.shadowRoot</code> 及び <code>HTMLElement.attachInternals</code> をサポート</li>\n<li><code>ResizeObserver.Observe()</code> にて <code>device-pixel-content-box</code> 値をサポート</li>\n<li>グローバル関数 <code>reportError()</code> をサポート\n<ul>\n<li>スクリプトがコンソールやグローバルイベントハンドラに対してエラーを報告できるようになった</li>\n</ul>\n</li>\n</ul>\n<h3>Events</h3>\n<ul>\n<li>グローバルイベントハンドラプロパティ <code>onsecuritypolicyviolation</code> をサポート\n<ul>\n<li>コンテンツセキュリティポリシー違反時に発生する <code>securitypolicyviolation</code> イベントを処理するハンドラを割り当てることが可能になった</li>\n</ul>\n</li>\n<li><code>GlobalEventHandlers</code> 及び <code>ShadowRoot</code> にて <code>onslotchange</code> イベントハンドラプロパティをサポート\n<ul>\n<li>スロットに含まれるノードが変更された際に <code>&#x3C;slot></code> 要素で発生する <code>slotchange</code> イベントを処理するハンドラを割り当てることが可能になった</li>\n</ul>\n</li>\n</ul>\n<h3>Removals</h3>\n<ul>\n<li><code>KeyboardEvent.initKeyEvent()</code> が <code>dom.keyboardevent.init_key_event.enabled</code> によって実行可否が制御されるようになり、デフォルトで無効になった</li>\n</ul>\n<h3>WebDerive conformance (Marionette)</h3>\n<ul>\n<li>大きなドキュメントに対して <code>WebDriver:Print</code> が失敗する原因になっているバグを修正</li>\n</ul>\n<h3>for add-on developers</h3>\n<ul>\n<li><code>windowId</code> が指定されている場合、サイドバーが <code>extension.getViews</code> に包含されるようになった</li>\n</ul>\n<h3>Other</h3>\n<ul>\n<li>AVIF 画像のサポートがデフォルトで有効になった\n<ul>\n<li><code>image.avif.compliance_strictness</code> を用いて仕様準拠の厳密生を調節できる</li>\n<li>アニメーション画像には非対応</li>\n</ul>\n</li>\n</ul>\n<h2>Web Platform</h2>\n<ul>\n<li><code>&#x3C;input type=\"datetime-local\"></code> の UI を実装</li>\n</ul>\n","metaData":{"title":"Firefox 93.0 リリースノート要約","author":"BaHo","editor":"nakajmg","createdAt":"2021-10-21","summary":"Firefox 93.0 のリリースノートの要約です","tags":["Releasenote","Browser"],"updatedAt":"2021-10-21"}},{"slug":"first-post","content":"<p>こんにちは、サイボウズフロントエンドエキスパートチームの<a href=\"https://twitter.com/__sosukesuzuki\">@__sosukesuzuki</a>です。</p>\n<p>サイボウズには<a href=\"https://blog.cybozu.io/\">Cybozu Inside Out</a>という技術ブログがあります。\nそれとは別に、この度フロントエンドエキスパートチームとしてウェブサイトを開設することにしました。</p>\n<p>この記事では、このウェブサイトを開設することになった経緯と目的、使用した技術について説明します。</p>\n<h2>経緯</h2>\n<p>フロントエンドエキスパートチームでは、チームでのコミュニケーションの促進を主な目的としてハッカソンを開催することがあります。\n(チームでのハッカソンについては<a href=\"https://blog.cybozu.io/entry/2021/02/25/133039\">Cybozu Inside Out に投稿されている記事</a>をご覧ください)</p>\n<p>そのようなハッカソンで、フリーテーマの回がありました。\nそこで、<a href=\"https://twitter.com/__sakito__\">Sakito</a>さんと<a href=\"https://twitter.com/b4h0_c4t\">BaHo</a>さんと<a href=\"https://twitter.com/__sosukesuzuki\">sosukesuzuki</a>(私)のチームでは、フロントエンドエキスパートチームのウェブサイトを作ってみることにしました。</p>\n<p>ハッカソンの期間内に完成することはありませんでしたが、チームとしてウェブサイトを持っていた方が良いということで合意が得られたので、ハッカソン終了後も開発を継続することにしました。</p>\n<h2>目的</h2>\n<p>フロントエンドエキスパートチームの活動を多くの人に知ってもらうためです。</p>\n<p>フロントエンドエキスパートチームでは、日頃から様々なフロントエンド技術の啓蒙活動を行っています。\nそれらの多くはクローズドな場所で行われています。しかし基本的にその内容はサイボウズ特有のものではなく、一般的に有用な情報です。</p>\n<p>そこで、フロントエンドエキスパートチームとしてウェブサイトを開設し、公開できる有用な情報は公開することにしました。</p>\n<p>このウェブサイトを通して、フロントエンドエキスパートチームに興味を持ってくれたら嬉しいです。</p>\n<h2>技術</h2>\n<p>次の要件を満たす技術として、<a href=\"https://github.com/vercel/next.js\">Next.js</a> を採用しました。</p>\n<ul>\n<li>環境構築が簡単である\n<ul>\n<li>もともとハッカソンで開発していたので、環境構築に多くの時間を割けないという事情がありました。</li>\n</ul>\n</li>\n<li>SSG の機能を備えている\n<ul>\n<li>すべてのコンテンツは静的なものと決まっていたので、SSG ができると嬉しい</li>\n</ul>\n</li>\n<li>TypeScript との相性が良い</li>\n</ul>\n<p>記事は Markdown として管理して Next.js の <code>getStaticProps</code> のタイミングで <a href=\"https://github.com/remarkjs/remark\">remark</a> を使って HTML に変換しています。</p>\n<p>また、ブログの機能を持つので、feed の生成と記事ごとの OGP 画像の生成をのためのスクリプトをそれぞれ用意しました。feed 生成スクリプトは、記事データの Markdown からメタデータを取得し、XML ファイルを書き出します。\nOGP 画像生成スクリプトは、記事データの Markdown からタイトルを取得し、<a href=\"https://github.com/puppeteer/puppeteer\">Puppeteer</a> で画像を生成します。</p>\n<p>ホスティングには GitHub Pages を使っています。GitHub で管理している HTML をホストする先としてはやはり楽です。</p>\n<p>実装はすべて <a href=\"https://github.com/cybozu/frontend-expert\">https://github.com/cybozu/frontend-expert</a> で公開しています。</p>\n<h2>おわりに</h2>\n<p>これから、不定期ではありますが、当サイトにてフロントエンドに関連する情報を発信していく予定です。ぜひ読んでみてくださいね。</p>\n","metaData":{"title":"サイボウズフロントエンドエキスパートチームのウェブサイトを作りました","author":"sosukesuzuki","createdAt":"2021-10-14","summary":"このウェブサイトを開設することになった経緯と目的、使用した技術について説明します。","tags":["Announcement"],"updatedAt":"2021-10-14"}}]},"__N_SSG":true}
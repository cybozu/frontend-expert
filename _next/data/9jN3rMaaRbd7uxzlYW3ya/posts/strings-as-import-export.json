{"pageProps":{"post":{"slug":"strings-as-import-export","content":"<p>11 月 11 日に、以前から一部で注目されていた<a href=\"https://github.com/tc39/ecma262/pull/2154\">ある Pull Request</a> が <a href=\"https://github.com/tc39/ecma262\">tc39/ecma262</a> にマージされました。</p>\n<p>この Pull Request がマージされたことで、識別子ではなく文字列リテラルを使った import/export が可能になりました。</p>\n<p>この仕様変更はプロポーザルという形で扱われてはいませんが、構文上の影響があるので、JavaScript ユーザーとして知っておくに越したことはないものになります。</p>\n<h2>概要</h2>\n<p>まず具体例を示します。</p>\n<p>今回の変更によって、次のように import/export する際の名前として文字列リテラルを使えるようになります。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">export</span> <span class=\"token punctuation\">{</span> foo <span class=\"token keyword module\">as</span> <span class=\"token string\">\"😃 hey hey\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"😃 hey hey\"</span> <span class=\"token keyword module\">as</span> foo <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./module.js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// foo</span>\n</code></pre></div>\n<p>基本的にはこれだけです。</p>\n<h2>詳解</h2>\n<p>ここからは仕様上の用語を使って解説をします。</p>\n<p>この変更が入る前の ECMAScript では <a href=\"https://tc39.es/ecma262/#prod-ImportSpecifier\"><code>ImportSpecifier</code></a> で <code>as</code> を使う場合 <code>as</code> の左側は <a href=\"https://tc39.es/ecma262/#prod-IdentifierName\"><code>IdentifierName</code></a> でなければいけませんでした。\nまた <a href=\"https://tc39.es/ecma262/#prod-ExportSpecifier\"><code>ExportSpecifier</code></a> は、単一の <code>IdentifierName</code> もしくは、<code>as</code> を使う場合は <code>as</code> の左側と右側は両方とも <code>IdentifierName</code> でなければいけませんでした。</p>\n<p>今回の変更によって、新たに <a href=\"https://tc39.es/ecma262/#prod-ModuleExportName\"><code>ModuleExportName</code></a> という構文が追加されました。<code>ModuleExportName</code> は、<code>IdentifierName</code> もしくは <a href=\"https://tc39.es/ecma262/#prod-StringLiteral\"><code>StringLiteral</code></a> の形をとります。\nたとえば、識別子 <code>foo</code> や 文字列リテラル <code>\"😃 hey hey\"</code> は <code>ModuleExportName</code> です。</p>\n<p>そして、<code>ImportSpecifier</code> で <code>as</code> を使う場合 <code>as</code> の左側は <code>ModuleExportName</code> の形をとるようになりました。したがって、次の例の <code>import</code> 文はすべて構文として妥当です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> foo <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"mod\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> foo <span class=\"token keyword module\">as</span> bar <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"mod\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"😃 hey hey\"</span> <span class=\"token keyword module\">as</span> baz <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"mod\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code>ExportSpecifier</code> は、単一の <code>ModuleExportName</code> もしくは、 <code>as</code> を使う場合 <code>as</code> の左側と右側は両方とも <code>ModuleExportName</code> の形をとるようになりました。したがって、次の例の <code>export</code> 文はすべて構文として妥当です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">export</span> <span class=\"token exports\"><span class=\"token punctuation\">{</span> foo <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"mod\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">export</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"😃 hey hey\"</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"mod\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">export</span> <span class=\"token exports\"><span class=\"token punctuation\">{</span> foo <span class=\"token keyword module\">as</span> foo <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"mod\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">export</span> <span class=\"token punctuation\">{</span> foo <span class=\"token keyword module\">as</span> <span class=\"token string\">\"😃 hey hey\"</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"mod\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">export</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"😃 hey hey\"</span> <span class=\"token keyword module\">as</span> foo <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"mod\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">export</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"😃 hey hey\"</span> <span class=\"token keyword module\">as</span> <span class=\"token string\">\"😃 hey hey\"</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"mod\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>ただし <code>ExportSpecifier</code> の <code>ModuleExportName</code> を <code>StringLiteral</code> にできるのは、その <code>ExportSpecifier</code> を含む <a href=\"https://tc39.es/ecma262/#prod-ExportDeclaration\"><code>ExportDeclaration</code></a> に <a href=\"https://tc39.es/ecma262/#prod-FromClause\"><code>FromClause</code></a> が存在する場合のみです。</p>\n<p>たとえば、次のコードは <code>ExportDeclaration</code> に <code>FromClause</code> が存在しないので <code>ExportSpecifier</code> で <code>StringLiteral</code> を使うことはできません。</p>\n<!-- prettier-ignore -->\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// できない</span>\n<span class=\"token keyword module\">export</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"😃 hey hey\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>一方で、次のコードは <code>FromClause</code> が存在するので、<code>ExportSpecifier</code> で <code>StringLiteral</code> を使うことができます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// できる</span>\n<span class=\"token keyword module\">export</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"😃 hey hey\"</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"mod\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h2>文字列の制約</h2>\n<p><code>StringLiteral</code> は通常の JavaScript の文字列リテラルです。たとえば <code>\"foo\"</code> とか <code>\"bar\"</code> みたいな形をしたものです。</p>\n<p><code>ModuleExportName</code> は <code>StringLiteral</code> を含むので、全ての文字列リテラルを <code>ModuleExportName</code> として使えるようにみえますが、実際には少々異なります。<code>ModuleExportName</code> として使える <code>StringLiteral</code> には制限があります。</p>\n<p><strong><code>ModuleExportName</code> として使える <code>StringLiteral</code> は、<a href=\"https://www.unicode.org/glossary/#well_formed_code_unit_sequence\">Well-Formed Code Unit Sequence</a> でなければいけません。</strong>\nこのことは、<a href=\"https://tc39.es/ecma262/#sec-module-semantics\">Module Semantics</a> の Eary Errros 内の <a href=\"https://tc39.es/ecma262/#_ref_6583\">https://tc39.es/ecma262/#_ref_6583</a> に記載されています。</p>\n<h3>Well-Formed Code Unit Sequence とは</h3>\n<p>JavaScript の文字列は UTF-16 でエンコードされます。そのため、実際には JavaScript の文字列というのは 16 ビットの整数で表現される Unicode のコードユニットの並びでしかありません。</p>\n<p>UTF-16 では基本的に 1 文字につき 16 ビットで表現されます。しかし、Unicode の BMP(基本多言語面)に収まらない文字は 16 ビットのコードユニットを二つ並べたペアで表現します。</p>\n<p>たとえば、ひらがなの <code>あ</code> は BMP に含まれており、一つのコードユニット(<code>0x3042</code>)で表されます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\u3042\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// あ</span>\n</code></pre></div>\n<p>一方で、<code>𠮟</code>(<code>叱</code> ではないことに注意) は BMP に含まれないので、二つのコードユニット(<code>0xD842</code> と <code>0xDF9F</code>)で表されます。このようなコードユニットのペアを、サロゲートペアといいます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\uD842\\uDF9F\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 𠮟</span>\n</code></pre></div>\n<p>前述のとおり、JavaScript の文字列は 16 ビットの整数で表現されるコードユニットの並びでしかありません。したがって、<code>𠮟</code> を構成する二つのコードユニットである <code>0xD842</code> と <code>0xDF9F</code> のうち一つだけを含む文字列も作ることができます。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"\\uD842\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>しかし、<code>0xD842</code> 単体に対応する文字は Unicode には存在しません。</p>\n<p>このような、<strong>対になっていないサロゲートペアを含むような文字列は Well-Formed Code Unit Sequence ではありません。</strong></p>\n<p>逆に、対になっていないサロゲートペアを許容しないような文字列を <strong>Well-Formed Code Unit Sequence</strong> といいます。つまり、大雑把にいえば「ちゃんと文字になっているコードユニットで構成された文字列」ということです。</p>\n<p>ちなみに、このような Well-Formed な文字列は WebIDL では <a href=\"https://developer.mozilla.org/ja/docs/Web/API/USVString\">USVString</a> と呼ばれています。</p>\n<h3>新しい Abstract Operation <code>IsStringWellFormedUnicode</code></h3>\n<p>この仕様の変更に伴って、<a href=\"https://tc39.es/ecma262/#sec-isstringwellformedunicode\"><code>IsStringWellFormedUnicode</code></a> という新しい Abstract Operation が追加されました。</p>\n<p>この Abstract Operation は、引数の文字列が Well-Formed Code Unit Sequence かどうかを判定します。</p>\n<p>前述した <code>ModuleExportName</code> のための Early Errors では、この <code>IsStringWellFormedUnicode</code> Abstract Operation を使って <code>StringLiteral</code> が Well-Formed Code Unit Sequence かどうかの判定を行います。そしてもし Well-Formed Code Unit Sequence でなければ Syntax Error になります。</p>\n<h2>仕様変更のモチベーション</h2>\n<p>実はこの仕様の変更は、今の Web の仕様ではほとんど役に立つことはありません。</p>\n<p>この変更が行われたモチベーションは、<strong>将来的に</strong> WebAssembly の Module との相互運用性を向上させるためです。</p>\n<p>この背景を理解するために、おさえておくべき前提が二つあります。</p>\n<p>１つ目は、WebAssembly の Module では関数を export するときに文字列で名前をつけるということです。\nたとえば次の例では <code>$add</code> という関数を <code>\"add\"</code> という名前で export しています。</p>\n<div class=\"remark-highlight\"><pre class=\"language-wasm\"><code class=\"language-wasm\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token variable\">$add</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">param</span> <span class=\"token variable\">$lhs</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">param</span> <span class=\"token variable\">$rhs</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">result</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">local</span>.get <span class=\"token variable\">$lhs</span>\n    <span class=\"token keyword\">local</span>.get <span class=\"token variable\">$rhs</span>\n    <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>add</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">export</span> <span class=\"token string\">\"add\"</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token variable\">$add</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>２つ目は、WebAssembly の Module を JavaScript から import できるようにしたい、という動きがあるということです。<a href=\"https://github.com/WebAssembly/esm-integration\">WebAsembly/esm-integration</a> などで、その動きを見ることができます。</p>\n<p>簡単にいえば、次のようにして簡単に WebAssembly の Module を JavaScript から扱えるようにしたいということです。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> add <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"foo.wasm\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n</code></pre></div>\n<p>現在の WebAssembly および ECMAScript の仕様では、このような形で JavaScript 側から WebAssembly の Module を読み込むことはできません。</p>\n<p>これらを前提として上で、次の例について考えます。</p>\n<p>この例は前述したものとほとんど変わりませんが、<code>export</code> の後ろが <code>\"add\"</code> ではなく <code>\"+\"</code> になっています。<code>export</code> の後ろには文字列を置くことができるので、これは妥当な Module です。</p>\n<div class=\"remark-highlight\"><pre class=\"language-wasm\"><code class=\"language-wasm\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">module</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token variable\">$add</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">param</span> <span class=\"token variable\">$lhs</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">param</span> <span class=\"token variable\">$rhs</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">result</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">local</span>.get <span class=\"token variable\">$lhs</span>\n    <span class=\"token keyword\">local</span>.get <span class=\"token variable\">$rhs</span>\n    <span class=\"token keyword\">i32<span class=\"token punctuation\">.</span>add</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">export</span> <span class=\"token string\">\"+\"</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span> <span class=\"token variable\">$add</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>将来、WebAssembly の Module を JavaScript から import できるようになったときに、このモジュールから <code>+</code> 関数を named import したいとします。\n<strong>しかし、<code>+</code> は <code>IdentifierName</code> ではないので、今までの ECMAScript の仕様では named import できませんでした。</strong></p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// できない</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"foo.wasm\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// できない</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token operator\">+</span> <span class=\"token keyword module\">as</span> add <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"foo.wasm\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>今回の変更によって <code>ImportSpecifier</code> の <code>as</code> の左側に <code>StringLiteral</code> を置けるようになったことで、次のように書るようになりました。</p>\n<div class=\"remark-highlight\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ES2022 でできる</span>\n<span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"+\"</span> <span class=\"token keyword module\">as</span> add <span class=\"token punctuation\">}</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"foo.wasm\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n</code></pre></div>\n<p>このような書き方は ES2022 では構文上は妥当ですが、実際にはまだ WebAssembly の import はできません。</p>\n<p>また、<code>ModuleExportName</code> の <code>StringLiteral</code> が Well-Formed Code Unit Sequence でなければならないという制約が存在するのも、WebAssembly との相互運用のためです。\nWebAssembly のテキストフォーマットで <code>export</code> の後に続く文字列は Well-Formed Code Unit Sequence でなければいけないので、それと統一させたのでしょう。</p>\n<h2>参考リンク</h2>\n<ul>\n<li>TC39\n<ul>\n<li><a href=\"https://github.com/tc39/ecma262/pull/2154\">Normative: Arbitrary module namespace identifier names by bmeck · Pull Request #2154 · tc39/ecma262</a></li>\n<li><a href=\"https://github.com/tc39/notes/blob/master/meetings/2020-09/sept-21.md#arbitrary-strings-as-exportimport-names\">Arbitrary module namespace identifier names · tc39/notes/notes/sept-21.md</a></li>\n<li><a href=\"https://github.com/tc39/proposal-import-reflection\">tc39/proposal-import-reflection</a></li>\n</ul>\n</li>\n<li>Babel\n<ul>\n<li><a href=\"https://github.com/babel/babel/pull/13195\">Parse string export names by default (<code>moduleStringNames</code>) by nicolo-ribaudo · Pull Request #13195 · babel/babel</a></li>\n<li><a href=\"https://babeljs.io/blog/2020/10/15/7.12.0#imports-and-exports-with-string-names-12091httpsgithubcombabelbabelpull12091\">7.12.0 Released: TypeScript 4.1, strings as import/export names, and class static blocks · Babel</a></li>\n</ul>\n</li>\n<li>MDN\n<ul>\n<li><a href=\"https://developer.mozilla.org/ja/docs/Glossary/Identifier\">Identifier (識別子) - MDN Web Docs 用語集: ウェブ関連用語の定義</a></li>\n<li><a href=\"https://developer.mozilla.org/ja/docs/Web/API/USVString\">USVString - Web API | MDN</a></li>\n</ul>\n</li>\n<li>ECMA262\n<ul>\n<li><a href=\"https://tc39.es/ecma262/#prod-ImportSpecifier\">ImportSpecifier · ECMAScript® 2022 Language Specification</a></li>\n<li><a href=\"https://tc39.es/ecma262/#prod-ExportSpecifier\">ExportSpecifier · ECMAScript® 2022 Language Specification</a></li>\n<li><a href=\"https://tc39.es/ecma262/#prod-ModuleExportName\">ModuleExportName · ECMAScript® 2022 Language Specification</a></li>\n<li><a href=\"https://tc39.es/ecma262/#sec-isstringwellformedunicode\">IsStringWellFormedUnicode · ECMAScript® 2022 Language Specification</a></li>\n</ul>\n</li>\n<li>Unicode\n<ul>\n<li><a href=\"https://www.unicode.org/glossary/#well_formed_code_unit_sequence\">Well-Formed Code Unit Sequence · Glossary of Unicode Terms</a></li>\n</ul>\n</li>\n<li>WebAssembly\n<ul>\n<li><a href=\"https://github.com/WebAssembly/esm-integration\">WebAssembly/esm-integration: ECMAScript module integration</a></li>\n<li><a href=\"https://webassembly.github.io/spec/core/text/values.html#names\">Values — WebAssembly 1.1 (Draft 2021-12-02)</a></li>\n<li><a href=\"https://github.com/WebAssembly/esm-integration/issues/39\">ESM isn't suited for importing objects containing non-JavaScript identifiers · Issue #39 · WebAssembly/esm-integration</a></li>\n</ul>\n</li>\n</ul>\n","metaData":{"title":"なぜ ES2022 で文字列リテラルを使った import/export ができるようになるのか","author":"sosukesuzuki","createdAt":"2021-12-06","summary":"ES2022 に含まれる予定の、識別子ではなく文字列リテラルを使って import/export できるようになる ECMAScript の仕様変更について解説します","tags":["ECMAScript"],"updatedAt":"2021-12-06"}}},"__N_SSG":true}
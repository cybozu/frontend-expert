{"pageProps":{"post":{"slug":"tc39-meeting-2021-12","content":"<p>TC39 の 87 回目のミーティングが 12月14日 ~ 12月15日に開催されました。このミーティングで議題に上がった提案とそのステージの移動について紹介します。</p>\n<h2>For Stage 4</h2>\n<p><strong>For Stage 4 の提案はありませんでした</strong></p>\n<h2>For Stage 3</h2>\n<h3><a href=\"https://github.com/tc39/proposal-array-grouping\">Array Grouping</a></h3>\n<p><strong>Stage 3 になりました</strong></p>\n<p>Array Grouping は <code>Array.prototype.groupBy</code> と <code>Array.prototype.groupByToMap</code> を追加するプロポーザルです。</p>\n<p>2021 年 10 月のミーティングで Stage 2 になったばかりですが、今回のミーティングで Stage 3 になりました。</p>\n<p>また、今回から <code>Array.prototype.groupByToMap</code> が追加されています。</p>\n<p>これは <code>groupBy</code> の結果が <code>Map</code> になったものです。</p>\n<div><pre><code><span>const</span> array <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>;</span>\n<span>const</span> odd  <span>=</span> <span>{</span> <span>odd</span><span>:</span> <span>true</span> <span>}</span><span>;</span>\n<span>const</span> even <span>=</span> <span>{</span> <span>even</span><span>:</span> <span>true</span> <span>}</span><span>;</span>\n<span>const</span> map <span>=</span> array<span>.</span><span>groupByToMap</span><span>(</span><span>(</span><span>num<span>,</span> index<span>,</span> array</span><span>)</span> <span>=></span> <span>{</span>\n  <span>return</span> num <span>%</span> <span>2</span> <span>===</span> <span>0</span> <span>?</span> even<span>:</span> odd<span>;</span>\n<span>}</span><span>)</span><span>;</span>\n<span>console</span><span>.</span><span>log</span><span>(</span>map<span>)</span><span>;</span> <span>// Map { {odd: true}: [1, 3, 5], {even: true}: [2, 4] }</span>\n</code></pre></div>\n<h2>For Stage 2</h2>\n<h3><a href=\"https://github.com/tc39/proposal-array-from-async/\">Array.fromAsync</a></h3>\n<p><strong>Stage 2 になりました</strong></p>\n<p><code>Array.fromAsync</code> は非同期イテラブルから配列を生成するためのスタティックメソッドを追加するプロポーザルです。</p>\n<p>JavaScript では <code>Array.from</code> を使ってイテラブルから配列を生成できます。しかし、非同期イテラブルから配列を生成することはできません。</p>\n<p>このプロポーザルによって追加される <code>Array.fromAsync</code> メソッドを使うと次のようにして非同期イテラブルから配列を生成できます。</p>\n<div><pre><code><span>async</span> <span>function</span> <span>*</span> <span>asyncGen</span> <span>(</span><span>n</span><span>)</span> <span>{</span>\n  <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&#x3C;</span> n<span>;</span> i<span>++</span><span>)</span>\n    <span>yield</span> i <span>*</span> <span>2</span><span>;</span>\n<span>}</span>\n<span>const</span> arr <span>=</span> <span>await</span> <span>Array</span><span>.</span><span>fromAsync</span><span>(</span><span>asyncGen</span><span>(</span><span>4</span><span>)</span><span>)</span><span>;</span>\n</code></pre></div>\n<h3><a href=\"https://github.com/tc39/proposal-regexp-r-escape\">RegExp <code>\\R</code> escape</a></h3>\n<p><strong>Stage 2 になりませんでした</strong></p>\n<p>RegExp <code>\\R</code> escape は以前 <a href=\"https://github.com/rbuckton/proposal-regexp-features\">RegExp Language Features</a> として提案されていた正規表現の機能群の１つで、正規表現内で line terminator とシンプルにマッチングさせるために新しく <code>\\R</code> を導入する提案です。</p>\n<p>この機能は <code>u</code> もしくは <code>v</code> フラグが有効になっているときのみ有効になります。そして、大まかには次のパターンと等価です。</p>\n<div><pre><code><span>(</span><span>?</span><span>></span>\\r\\n<span>?</span><span>|</span><span>[</span>\\x0A<span>-</span>\\x0C\\x85\\u<span>{</span><span>2028</span><span>}</span>\\u<span>{</span><span>2029</span><span>}</span><span>]</span><span>)</span>\n</code></pre></div>\n<p>この正規表現の機能は Perl をはじめとする多くの正規表現エンジンに実装されていて、TC39 においてもそのユースケースは認められているようです。</p>\n<p>しかし、<a href=\"https://github.com/tc39/proposal-regexp-set-notation\">RegExp Set Notation Proposal</a> の sequece properties によって同等の機能が実現できる可能性があるためその方向で調査しなおすべきだという結論になり Stage 2 には到達しませんでした。</p>\n<h3><a href=\"https://github.com/tc39/proposal-regexp-modifiers\">RegExp Modifiers</a></h3>\n<p><strong>Stage 2 になりました</strong></p>\n<p>RegExp Modifiers は <code>\\R</code> escape と同じようにもともと RegExp Language Features の機能の１つでした。</p>\n<p>この提案は正規表現パターン内でのフラグの変更を可能にします。</p>\n<p>例を示します。</p>\n<p>次の例中の正規表現パターン全体には <code>i</code> フラグが適用されてます。しかし２つめの <code>[a-z]</code> は <code>?-i:</code> という RegExp Modifiers の構文を使って <code>i</code> フラグを無効にしてます。このとき一文字目では大文字小文字が無視されるものの、二文字目では大文字小文字が無視されません。</p>\n<p>したがってこのパターンは <code>\"ab\"</code> や <code>\"Ab\"</code> にはマッチし <code>\"aB\"</code> にはマッチしません。</p>\n<div><pre><code><span>const</span> re1 <span>=</span> <span><span>/</span><span><span>^</span><span><span>[</span><span>a<span>-</span>z</span><span>]</span></span><span>(</span><span>?</span>-i:<span><span>[</span><span>a<span>-</span>z</span><span>]</span></span><span>)</span><span>$</span></span><span>/</span><span>i</span></span><span>;</span>\nre1<span>.</span><span>test</span><span>(</span><span>\"ab\"</span><span>)</span><span>;</span> <span>// true</span>\nre1<span>.</span><span>test</span><span>(</span><span>\"Ab\"</span><span>)</span><span>;</span> <span>// true</span>\nre1<span>.</span><span>test</span><span>(</span><span>\"aB\"</span><span>)</span><span>;</span> <span>// false</span>\n</code></pre></div>\n<h3><a href=\"https://github.com/tc39/proposal-regexp-buffer-boundaries\">RegExp Buffer Boundaries</a></h3>\n<p><strong>Stage 2 になりました</strong></p>\n<p>RegExp Buffer Boundaries も RegExp Language Features の機能の１つでした。</p>\n<p>この提案は、それぞれ入力の最初と最後にマッチする <code>\\A</code> と <code>\\z</code> を導入します。<code>m</code> フラグの影響を受けないことを除けば <code>^</code> と <code>$</code> に似ています。</p>\n<p><code>^</code> と <code>$</code> はそれぞれ最初と最後にマッチしますが、<code>m</code> フラグが有効になっているときは行頭と行末にマッチします。しかし RegExp Buffer Boundaries が導入する <code>\\A</code> と <code>\\z</code> は、たとえ <code>m</code> フラグが有効であっても入力の最初と最後にマッチします。</p>\n<p>例を示します。</p>\n<div><pre><code><span>const</span> re <span>=</span> <span><span>/</span><span><span>\\A</span>foo<span>|</span><span>^</span>bar</span><span>/</span><span>um</span></span><span>;</span>\n</code></pre></div>\n<p>このパターンでは <code>foo</code> に <code>\\A</code> がついています。したがって入力の最初が <code>foo</code> の文字列にマッチします。</p>\n<div><pre><code>re<span>.</span><span>test</span><span>(</span><span>\"foo\"</span><span>)</span><span>;</span> <span>// true</span>\nre<span>.</span><span>test</span><span>(</span><span>\"foo\\n\"</span><span>)</span><span>;</span> <span>// true</span>\n</code></pre></div>\n<p>しかし入力の最初ではなく行頭が <code>foo</code> の文字列にはマッチしません。</p>\n<div><pre><code>re<span>.</span><span>test</span><span>(</span><span>\"\\nfoo\"</span><span>)</span><span>;</span> <span>// false</span>\n</code></pre></div>\n<p><code>bar</code> には <code>^</code> がついています。パターン全体で <code>m</code> フラグが有効になっているので、入力の先頭と行頭が <code>bar</code> の文字列にマッチします。</p>\n<div><pre><code>re<span>.</span><span>test</span><span>(</span><span>\"bar\"</span><span>)</span><span>;</span> <span>// true</span>\nre<span>.</span><span>test</span><span>(</span><span>\"bar\\n\"</span><span>)</span><span>;</span> <span>// true</span>\nre<span>.</span><span>test</span><span>(</span><span>\"\\nbar\"</span><span>)</span><span>;</span> <span>// true</span>\n</code></pre></div>\n<h2>For Stage 1</h2>\n<h2>Updates</h2>\n<p>ステージの移動はないものの、アップデートがあった提案です。</p>\n<h3><a href=\"https://github.com/tc39/proposal-temporal\">Temporal</a></h3>\n<p>いくつかの仕様上の軽微な修正がありました。修正箇所について説明した<a href=\"https://ptomato.name/talks/tc39-2021-12/#1\">スライド</a>が公開されています。</p>\n<h3><a href=\"https://github.com/tc39/proposal-decimal\">Decimal</a></h3>\n<p>Decimal は現在 Stage 1 ですが、2022 年に Stage 2 に到達することを目指しているそうです。進捗を共有するための<a href=\"https://drive.google.com/file/d/1qdieei11dZgDY_KnJhSBcFyHTMZOmCJr/view\">スライド</a>が公開されています。</p>\n<h3><a href=\"https://github.com/tc39/proposal-destructuring-private\">Destructuring Private Fields</a></h3>\n<p>Destructuring Private Fields が提案された当初は小さな修正で十分だと考えられていました。しかし真剣に検討してみるといくつかの仕様上の難しい問題が明らかになったそうです。そこで再度レビュワーを募りレビューをやり直すことが決定しました。</p>\n<h3><a href=\"https://github.com/tc39/proposal-shadowrealm\">Shadow Realms</a></h3>\n<p>いくつかの仕様上の重要な変更があったようです。詳しくは<a href=\"https://docs.google.com/presentation/d/12PM5c4_yUnqXHjvACh8HEN5oJwgei-0T0hX_hlqjfDU/edit#slide=id.ge435a9058a_0_0\">スライド</a>に記載されています。</p>\n<h3><a href=\"https://github.com/tc39/proposal-record-tuple/\">Records and Tuples</a></h3>\n<p>Record と Tuple の中で通常のオブジェクトを扱う方法について議論されました。その方法とその懸念についての Decision Tree が<a href=\"https://drive.google.com/file/d/1lVYn8_sHecqxW08vN5Tu7rXZn7GemBqO/view\">スライド</a>として公開されています。</p>\n<h2>Normative Changes</h2>\n<h3><a href=\"https://github.com/tc39/ecma262/pull/2106\"><code>import.meta[Symbol.toStringTag]</code> の追加</a></h3>\n<p><strong>合意は得られませんでした</strong></p>\n<p><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag\"><code>Symbol.toStringTag</code></a> という Well-known Symbol があります。\nこの Symbol は <code>Object.prototype.toString()</code> によって表示される文字列の決定に使われます。</p>\n<p>具体的な例を示します。</p>\n<p>オブジェクト <code>foo</code> の <code>[Symbol.toStringTag]</code> に <code>\"I'm foo\"</code> という文字列をセットしておくと、<code>foo.toString()</code> は <code>[object I'm foo]</code> になります。</p>\n<div><pre><code><span>const</span> foo <span>=</span> <span>{</span>\n  <span>[</span><span>Symbol</span><span>.</span><span>toStringTag</span><span>]</span><span>:</span> <span>\"I'm foo\"</span>\n<span>}</span><span>;</span>\n<span>console</span><span>.</span><span>log</span><span>(</span>foo<span>.</span><span>toString</span><span>(</span><span>)</span><span>)</span><span>;</span> <span>// \"[object I'm foo]\"</span>\n</code></pre></div>\n<p>今回のミーティングでは <code>import.meta</code> の <code>[Symbol.toStringTag]</code> に <code>\"ImportMeta\"</code> という文字列を設定するという修正について議論されました。</p>\n<p>この挙動についての Issue は <code>import.meta</code> の策定時にも存在しましたが、そのときすでに <code>import.meta</code> が Stage 4 を達成していたことからクローズされました。</p>\n<p>そして今回のミーティングでもこの仕様の修正についての合意は得られませんでした。この修正のための Pull Request が作成された時点で以下のような懸念が公開されていました。</p>\n<ul>\n<li><code>import.meta</code> は、ECMAScript の範囲では <a href=\"https://tc39.es/ecma262/#sec-hostgetimportmetaproperties\"><code>HostGetImportMetaProperties</code></a> というホスト定義の abstract operation によって中身が決定されるオブジェクトであるということしか決まっておらず、ホストにとって必要であればホスト側で <code>import.meta</code> の <code>Symbol.toStringTag</code> を定義できる。</li>\n<li>仕様内で作成される他のオブジェクトとは異なり、<code>import.meta</code> はホストのデータによって生成されるものであり、ECMAScript の範囲でプロパティを生成することを考慮したものではない。</li>\n</ul>\n<h2>参考リンク</h2>\n<ul>\n<li>TC39\n<ul>\n<li><a href=\"https://github.com/tc39/agendas/blob/main/2021/12.md\">Agenda for the 87th meeting of Ecma TC39</a></li>\n<li><a href=\"https://github.com/tc39/ecma262/pull/2106\">Normative: Add import.meta[Symbol.toStringTag]</a></li>\n<li><a href=\"https://github.com/tc39/proposal-array-grouping\">Proposal Array Grouping</a></li>\n<li><a href=\"https://github.com/tc39/proposal-shadowrealm\">Proposal Shadow Realms</a></li>\n<li><a href=\"https://github.com/tc39/proposal-array-from-async/\">Proposal <code>Array.fromAsync</code></a></li>\n<li><a href=\"https://github.com/rbuckton/proposal-regexp-features\">Proposal RegExp Language Features</a></li>\n<li><a href=\"https://github.com/tc39/proposal-regexp-r-escape\">Proposal RegExp <code>\\R</code> escape</a></li>\n<li><a href=\"https://github.com/tc39/proposal-regexp-set-notation\">Proposal RegExp Set Notation</a></li>\n<li><a href=\"https://github.com/tc39/proposal-regexp-buffer-boundaries\">Proposal RegExp Buffer Boundaries</a></li>\n<li><a href=\"https://github.com/tc39/proposal-regexp-modifiers\">Proposal RegExp Modifiers</a></li>\n<li><a href=\"https://github.com/tc39/proposal-temporal\">Proposal Temporal</a></li>\n<li><a href=\"https://github.com/tc39/proposal-shadowrealm\">Proposal Shadow Realms</a></li>\n<li><a href=\"https://github.com/tc39/proposal-record-tuple/\">Proposal Records and Tuples</a></li>\n<li><a href=\"https://github.com/tc39/proposal-destructuring-private\">Proposal Destructuring Private Fields</a></li>\n</ul>\n</li>\n<li>Babel\n<ul>\n<li><a href=\"https://github.com/babel/proposals/issues/78\">Dec 2021 · Issue #78 · babel/proposals</a></li>\n</ul>\n</li>\n<li>ECMA262\n<ul>\n<li><a href=\"https://tc39.es/ecma262/#prod-ImportMeta\"><code>import.meta</code></a></li>\n<li><a href=\"https://tc39.es/ecma262/#sec-hostgetimportmetaproperties\"><code>HostGetImportMetaProperties</code></a></li>\n</ul>\n</li>\n</ul>\n","metaData":{"title":"ECMAScriptの最新動向 2021年12月版","author":"sosukesuzuki","createdAt":"2022-01-24","summary":"2021年12月14日~15日に開催された TC39 meeting 87th の内容を紹介します","tags":["TC39","ECMAScript"],"updatedAt":"2022-01-24"}}},"__N_SSG":true}
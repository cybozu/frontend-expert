{"pageProps":{"posts":[{"slug":"tc39-meeting-2021-10","content":"<div><pre><code>※ 旧タイトル: TC39 meeting 86th の概要とステージの移動</code></pre></div>\n<p>TC39 の 86 回目のミーティングが 10/25 ~ 10/28 に開催されました。\nこのミーティングで議題に上がった提案と、そのステージの移動について紹介します。</p>\n<ul>\n<li><a href=\"https://github.com/tc39/agendas/blob/master/2021/10.md\">agendas/10.md at master · tc39/agendas</a></li>\n<li><a href=\"https://github.com/babel/proposals/issues/77\">Oct 2021 · Issue #77 · babel/proposals</a></li>\n</ul>\n<h2>for Stage 4</h2>\n<h3><a href=\"https://github.com/tc39/proposal-error-cause\">Error Cause</a></h3>\n<p><strong>Stage 4 になりました。ECMAScript 2022 に入ります</strong></p>\n<p>Error Cause は、<code>Error</code> コンストラクタの第 2 引数に <code>cause</code> という値で原因となったエラーを渡すことができるようにする提案です。\nキャッチする側では、<code>error.cause</code> で、そのエラーを取得できます。</p>\n<p>例を示します。</p>\n<p><code>doUploadJob</code> 関数は <code>fetch</code> を実行して失敗したときに新しいエラーをスローします。そのエラーの第 2 引数に <code>{ cause: err }</code> というオブジェクトを渡しています。</p>\n<div><pre><code><span>async</span> <span>function</span> <span>doUploadJob</span><span>(</span><span>)</span> <span>{</span>\n  <span>await</span> <span>fetch</span><span>(</span><span>\"https://example.com/upload\"</span><span>)</span><span>.</span><span>catch</span><span>(</span><span>(</span><span>err</span><span>)</span> <span>=></span> <span>{</span>\n    <span>throw</span> <span>new</span> <span>Error</span><span>(</span><span>\"Upload job result failed\"</span><span>,</span> <span>{</span> <span>cause</span><span>:</span> err <span>}</span><span>)</span><span>;</span>\n  <span>}</span><span>)</span><span>;</span>\n<span>}</span>\n\n<span>try</span> <span>{</span>\n  <span>await</span> <span>doJob</span><span>(</span><span>)</span><span>;</span>\n<span>}</span> <span>catch</span> <span>(</span>e<span>)</span> <span>{</span>\n  <span>console</span><span>.</span><span>log</span><span>(</span>e<span>)</span><span>;</span>\n  <span>console</span><span>.</span><span>log</span><span>(</span><span>\"Caused by\"</span><span>,</span> e<span>.</span><span>cause</span><span>)</span><span>;</span>\n<span>}</span>\n<span>// Error: Upload job result failed</span>\n<span>// Caused by TypeError: Failed to fetch</span>\n</code></pre></div>\n<p><code>doUploadJob</code> がスローしているエラーメッセージは <code>\"Upload job result failed\"</code> ですが、その原因となったエラーを <code>cause</code> として渡すことで、キャッチする側でどのエラーが原因で失敗したのかを取得できます。</p>\n<p>この例では、<code>doUploadJob</code> が失敗した原因が <code>TypeError: Failed to fetch</code> であったことがわかります。</p>\n<h2>for Stage 3</h2>\n<p>今回は、for Stage 3 の提案はありませんでした。</p>\n<h2>for Stage 2</h2>\n<h3><a href=\"https://github.com/tc39/proposal-array-grouping\">Array Grouping</a></h3>\n<p><strong>Stage 2 になりました</strong></p>\n<p>Array Grouping は、<code>Array</code> に <code>groupBy</code> というインスタンスメソッドを追加する提案です。</p>\n<p>ユースケースは<a href=\"https://lodash.com/docs/4.17.15#groupBy\">Lodash の <code>groupBy</code></a> と同様です。</p>\n<div><pre><code><span>const</span> array <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>;</span>\narray<span>.</span><span>groupBy</span><span>(</span><span>(</span><span>i</span><span>)</span> <span>=></span> <span>{</span>\n  <span>return</span> i <span>%</span> <span>2</span> <span>===</span> <span>0</span> <span>?</span> <span>\"even\"</span> <span>:</span> <span>\"odd\"</span><span>;</span>\n<span>}</span><span>)</span><span>;</span>\n<span>// =>  { odd: [1, 3, 5], even: [2, 4] }</span>\n</code></pre></div>\n<h3><a href=\"https://github.com/tc39/proposal-partial-application\">Partial Application</a></h3>\n<p><strong>Stage 2 になりませんでした</strong></p>\n<p>Partial Application は、関数の部分適用のための構文を導入します。</p>\n<p>例を示します。</p>\n<p><code>add</code> は 2 つの引数を受け取り、その 2 つを足し合わせて返すだけの単純な関数です。\nそして、Partial Application を使って <code>addOne</code> という新しい関数を作っています。<code>addOne</code> は、1 つの引数を受け取り、それに<code>1</code>を足して返す関数です。\nつまり、既存の関数の一部の引数だけ渡して、残りの引数を受け取るような関数を作ることができます。</p>\n<div><pre><code><span>const</span> <span>add</span> <span>=</span> <span>(</span><span>x<span>,</span> y</span><span>)</span> <span>=></span> x <span>+</span> y<span>;</span>\n<span>const</span> addOne <span>=</span> add<span>~</span><span>(</span><span>1</span><span>,</span> <span>?</span><span>)</span><span>;</span>\n<span>addOne</span><span>(</span><span>2</span><span>)</span><span>;</span> <span>// 3</span>\n</code></pre></div>\n<p>現在の JavaScript で表現すると、次のようになります。</p>\n<div><pre><code><span>const</span> <span>add</span> <span>=</span> <span>(</span><span>x</span><span>)</span> <span>=></span> <span>(</span><span>y</span><span>)</span> <span>=></span> x <span>+</span> y<span>;</span>\n<span>const</span> addOne <span>=</span> <span>add</span><span>(</span><span>1</span><span>)</span><span>;</span>\n<span>addOne</span><span>(</span><span>2</span><span>)</span><span>;</span> <span>// 3</span>\n</code></pre></div>\n<p>Haskell のような関数型プログラミング言語では標準で備わっている機能です。</p>\n<h2>for Stage 1</h2>\n<h3><a href=\"https://github.com/bathos/proposal-string-cooked\"><code>String.cooked</code></a></h3>\n<p><strong>Stage 1 になりました</strong></p>\n<p><code>String.cooked</code> は <code>String</code> に新しいスタティックメソッド <code>cooked</code> を追加する提案です。\n<code>String.cooked</code> は <a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/String/raw\"><code>String.raw</code></a> と逆のことをします。</p>\n<div><pre><code><span>String</span><span>.</span><span>raw</span><span><span>`</span><span>mmm ... \\u0064elicious cooked string</span><span>`</span></span><span>;</span>\n<span>// mmm ... \\u0064elicious cooked string</span>\n<span>String</span><span>.</span><span>cooked</span><span><span>`</span><span>mmm ... \\u0064elicious cooked string</span><span>`</span></span><span>;</span>\n<span>// \"mmm ... delicious cooked string\"</span>\n</code></pre></div>\n<p>つまり、通常のテンプレートリテラルとおなじ挙動です。</p>\n<div><pre><code><span><span>`</span><span>mmm ... \\u0064elicious cooked string</span><span>`</span></span><span>;</span>\n<span>// \"mmm ... delicious cooked string\"</span>\n</code></pre></div>\n<p>この機能がタグ付きテンプレートリテラルとして存在することで、これを用いて新しいタグ付きテンプレートリテラルを作るときに役にたちます。</p>\n<div><pre><code><span>function</span> <span>myTag</span><span>(</span><span>strings<span>,</span> <span>...</span>values</span><span>)</span> <span>{</span>\n  <span>return</span> <span>String</span><span>.</span><span>cooked</span><span>(</span>strings<span>,</span> <span>...</span>values<span>.</span><span>map</span><span>(</span><span>value</span> <span>=></span> <span>String</span><span>(</span>value<span>)</span><span>.</span><span>toUpperCase</span><span>(</span><span>)</span><span>)</span>\n<span>}</span>\n\nmyTag<span><span>`</span><span>hello </span><span><span>${</span><span>'world'</span><span>}</span></span><span>`</span></span> <span>// \"hello WORLD\"</span>\n</code></pre></div>\n<h3><a href=\"https://github.com/jridgewell/proposal-destructuring-private\">Destructure Private Fields</a></h3>\n<p><strong>Stage 1 を飛ばして、Stage 2 になりました</strong></p>\n<p>Destructure Private Fields は、プライベートフィールドの分割代入のための構文を導入します。</p>\n<p><code>#</code> からはじまる識別子は通常であれば存在できないので、別の名前にリネームする必要があります。次の例では <code>this.#x</code> を <code>x</code> という名前にリネームしています。</p>\n<div><pre><code><span>class</span> <span>Foo</span> <span>{</span>\n  #x <span>=</span> <span>1</span><span>;</span>\n  <span>constructor</span><span>(</span><span>)</span> <span>{</span>\n    <span>console</span><span>.</span><span>log</span><span>(</span><span>this</span><span>.</span><span>#x</span><span>)</span><span>;</span> <span>// => 1</span>\n    <span>const</span> <span>{</span> #x<span>:</span> x <span>}</span> <span>=</span> <span>this</span><span>;</span>\n    <span>console</span><span>.</span><span>log</span><span>(</span>x<span>)</span><span>;</span> <span>// => 1</span>\n  <span>}</span>\n<span>}</span>\n</code></pre></div>\n<h3><a href=\"https://github.com/js-choi/proposal-bind-this\">Bind-this operator</a></h3>\n<p><strong>Stage 1 になりました</strong></p>\n<p>Bind this operator は、<a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\">Function.prototype.bind</a> と同様の方法で関数をバインドするための二項演算子を導入する提案です。</p>\n<p>以前から存在する Stage 0 の <a href=\"https://github.com/tc39/proposal-bind-operator\">Bind Operator</a> の後継であり、Stage 1 の <a href=\"https://github.com/tc39/proposal-extensions\">Extensions</a> の競合です。</p>\n<div><pre><code><span>Object</span><span>.</span><span>prototype</span><span>.</span><span>hasOwnProperty</span><span>.</span><span>call</span><span>(</span><span>{</span> <span>foo</span><span>:</span> <span>\"foo\"</span> <span>}</span><span>,</span> <span>\"foo\"</span><span>)</span><span>;</span> <span>// true</span>\n<span>(</span><span>{</span> <span>foo</span><span>:</span> <span>\"foo\"</span> <span>}</span><span>:</span><span>:</span><span>Object</span><span>.</span><span>prototype</span><span>.</span><span>hasOwnProperty</span><span>(</span><span>\"foo\"</span><span>)</span><span>)</span><span>;</span> <span>// true</span>\n</code></pre></div>\n<h3><a href=\"https://github.com/js-choi/proposal-function-helpers\">Function helpers</a></h3>\n<p><strong>Stage 1 になりませんでした。この提案に含まれる関数は個別の提案として再度提出されるかもしれません。</strong></p>\n<p>Function helpers は、<code>Function</code> のスタティックメソッドとして便利なヘルパー関数を追加する提案です。</p>\n<p><code>Function.flow</code> は引数に与えられた関数を合成した新しい関数を返します。</p>\n<div><pre><code><span>const</span> f <span>=</span> <span>Function</span><span>.</span><span>flow</span><span>(</span>f0<span>,</span> f1<span>,</span> f2<span>)</span><span>;</span>\n<span>f</span><span>(</span><span>5</span><span>,</span> <span>7</span><span>)</span><span>;</span> <span>// f2(f1(f0(5, 7))).</span>\n</code></pre></div>\n<p><code>Function.pipe</code> は第 1 引数の値を、それ移行の引数として渡された関数を合成した関数に渡した結果を返します。</p>\n<div><pre><code><span>Function</span><span>.</span><span>pipe</span><span>(</span><span>5</span><span>,</span> f0<span>,</span> f1<span>,</span> f2<span>)</span><span>;</span> <span>// f2(f1(f0(5))).</span>\n</code></pre></div>\n<p><code>Function.constant</code> は、第 1 引数として渡された値を返し続ける関数を返します。</p>\n<div><pre><code><span>const</span> f <span>=</span> <span>Function</span><span>.</span><span>constant</span><span>(</span><span>3</span><span>)</span><span>;</span>\n<span>f</span><span>(</span><span>\"fooo\"</span><span>)</span><span>;</span> <span>// 3</span>\n<span>f</span><span>(</span><span>3009</span><span>,</span> <span>33</span><span>,</span> <span>44</span><span>)</span><span>;</span> <span>// 3</span>\n<span>f</span><span>(</span><span>{</span> <span>foo</span><span>:</span> <span>\"foo\"</span> <span>}</span><span>)</span><span>;</span> <span>// 3</span>\n</code></pre></div>\n<p><code>Function.identifiy</code> は、第 1 引数に与えられた値をそのまま返します。</p>\n<div><pre><code><span>Function</span><span>.</span><span>identity</span><span>(</span><span>3</span><span>)</span><span>;</span> <span>// 3</span>\n<span>Function</span><span>.</span><span>identity</span><span>(</span><span>4</span><span>,</span> <span>5</span><span>)</span><span>;</span> <span>// 4</span>\n</code></pre></div>\n<p><code>Function.tap</code> はコールバック関数を引数として受け取り、関数を返します。\n<code>Function.tape</code> が返した関数に引数を渡すと、それをコールバック関数に渡して実行し、その上でその引数をそのまま返します。\n言葉で説明すると難しいですが、例を見れば簡単だと思います。</p>\n<div><pre><code><span>const</span> f <span>=</span> <span>Function</span><span>.</span><span>tap</span><span>(</span><span>console</span><span>.</span><span>log</span><span>)</span><span>;</span>\n<span>f</span><span>(</span><span>5</span><span>)</span><span>;</span> <span>// 5 を出力して、5 を返す</span>\n</code></pre></div>\n<h3><a href=\"https://github.com/lucacasonato/proposal-evaluator-attributes\">Evaluator Attributes</a></h3>\n<p><strong>Stage 1 になりました</strong></p>\n<p>Evaluator Attributes は、インポートされたモジュールの評価方法を処理系に伝えるための構文を導入します。</p>\n<p>例にある通り、提案された目的は WebAssembly のモジュールを JavaScript の Import 文で読み込むためです。しかし、提案の仕様としては WebAssembly には限られていません。</p>\n<div><pre><code><span>import</span> <span>mod</span> <span>from</span> <span>\"./foo.wasm\"</span> <span>as</span> <span>\"wasm-module\"</span><span>;</span>\nmod <span>instanceof</span> <span>WebAssembly<span>.</span>Module</span><span>;</span> <span>// true</span>\n</code></pre></div>\n<p>現在 Stage 3 の <a href=\"https://github.com/tc39/proposal-import-assertions\">Import Assertions</a> に似ていますが、Import Assertions はモジュールの評価方法に影響を与えることはできません。</p>\n<h3>RegExp Features</h3>\n<p>前回のミーティングで提案された<a href=\"https://github.com/rbuckton/proposal-regexp-features\">RegExp Features</a>が機能ごとに別々の提案に分割されました。</p>\n<h4><a href=\"https://github.com/rbuckton/proposal-regexp-modifiers\">RegExp Modifiers</a></h4>\n<p><strong>Stage 1 になりました</strong></p>\n<h4><a href=\"https://github.com/rbuckton/proposal-regexp-x-mode\">RegExp Extended Mode and Comments</a></h4>\n<p><strong>Stage 1 になりました</strong></p>\n<h4><a href=\"https://github.com/rbuckton/proposal-regexp-atomic-operators\">RegExp Atomic Operators</a></h4>\n<p><strong>Stage 1 になりませんでした</strong></p>\n<h4><a href=\"https://github.com/rbuckton/proposal-regexp-r-escape\">RegExp <code>\\R</code> Escape</a></h4>\n<p><strong>Stage 1 になりました</strong></p>\n<h4><a href=\"https://github.com/rbuckton/proposal-regexp-buffer-boundaries\">RegExp Buffer Boundaries</a></h4>\n<p><strong>Stage 1 になりました</strong></p>\n<h3>Updates</h3>\n<p>ステージの移動はないものの、アップデートがあった提案です。</p>\n<ul>\n<li><a href=\"https://github.com/tc39/proposal-change-array-by-copy\">Change Array by Copy</a></li>\n<li><a href=\"https://github.com/tc39/proposal-json-parse-with-source\">JSON.parse sourct text access</a></li>\n<li><a href=\"https://github.com/tc39/proposal-record-tuple/\">Records &#x26; Tuples</a></li>\n<li><a href=\"https://github.com/tc39/proposal-explicit-resource-management\">Explicit Resource Management</a></li>\n<li><a href=\"https://github.com/tc39/proposal-js-module-blocks\">JS Module Blocks</a></li>\n<li><a href=\"https://github.com/js-choi/proposal-array-from-async\">Array.fromAsync</a></li>\n</ul>\n<h2>その他</h2>\n<p>提案ではなく、仕様書の変更として扱われているものです。</p>\n<h3><a href=\"https://github.com/tc39/ecma262/pull/1321\">Extending null</a></h3>\n<p><strong>合意は得られませんでした</strong></p>\n<div><pre><code><span>class</span> <span>Foo</span> <span>extends</span> <span>null</span> <span>{</span><span>}</span>\n</code></pre></div>\n","metaData":{"title":"ECMAScriptの最新動向 2021年11月版","author":"sosukesuzuki","editor":"nakajmg","createdAt":"2021-11-02","summary":"2021年10月25日~28日に開催された TC39 meeting 86th の内容を紹介します","tags":["TC39","ECMAScript"],"updatedAt":"2021-11-02"}},{"slug":"release-firefox-93","content":"<p>Firefox 93 がリリースされました！</p>\n<ul>\n<li><a href=\"https://www.mozilla.org/en-US/firefox/93.0/releasenotes/\">https://www.mozilla.org/en-US/firefox/93.0/releasenotes/</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Releases/93\">https://developer.mozilla.org/en-US/docs/Mozilla/Firefox/Releases/93</a></li>\n</ul>\n<p>今回のリリースから AVIF 画像フォーマットがデフォルトで有効化されます。</p>\n<p>クライアント側の使用感が変わるわけではありませんが、今後こういった高圧縮可能な形式がスタンダードになることでよりリッチな Web コンテンツを多く提供できるようになるかもしれませんね。</p>\n<p>また、クラスの <code>static</code> 初期化ブロックをはじめとして、多くのイベントハンドラやプロパティの追加が盛り込まれているため、開発者視点では重要なアップデートではないかと思われます。</p>\n<h2>New</h2>\n<ul>\n<li>AV1 形式の画像フォーマットに対応</li>\n<li>PDF ビューアーがより詳細なフォームに対応(複数の政府や銀行が使用している XFA ベースフォーム)</li>\n<li>Windows 版にて、利用可能メモリが極端に少ない場合に利用状況や属性に基づいてタブを自動的にアンロードするようになった</li>\n<li>macOS 版にて、.dmg ファイルからマウントされた Firefox を実行している時、セッションを失わないためにインストールを完了するかどうかプロンプトが表示されるようになった</li>\n<li>安全でない接続に依存している、もしくは安全でない可能性のあるダウンロードをブロックするようになった</li>\n<li>Smart Block 3.0 (プライバシー保護機能)の互換性向上</li>\n<li>新しい referrer tracking protection を Strick Tracking Protection と Private Browsing に導入</li>\n<li>Firefox Suggest(Web ナビゲーター) の導入</li>\n</ul>\n<h2>Fixed</h2>\n<ul>\n<li>VoiceOver がアクセス可能なツリーコントロール内にあるチェック可能アイテムのチェック状態を正しく判別するようになった</li>\n<li>Orca スクリーンリーダーが Firefox で正しく動作するようになった</li>\n<li>その他セキュリティ修正</li>\n</ul>\n<h2>Changed</h2>\n<ul>\n<li>3DES を使用する TLS 暗号スイートが無効化\n<ul>\n<li>非推奨バージョンの TLS を有効化する設定により利用は可能</li>\n</ul>\n</li>\n<li>ダウンロードパネルが Firefox のビジュアルスタイルに沿うようになった</li>\n</ul>\n<h2>for web developer</h2>\n<h3>HTML</h3>\n<ul>\n<li>ARIA <code>meter</code> ロールを実装</li>\n<li><code>&#x3C;input type=\"datetime-local\"></code> の UI を実装</li>\n</ul>\n<h3>CSS</h3>\n<ul>\n<li><code>font-synthesis</code> に <code>small-caps</code> キーワードを追加</li>\n</ul>\n<h3>JavaScript</h3>\n<ul>\n<li>クラスの <code>static</code> 初期化ブロックをサポート</li>\n<li><code>createImageBitmap()</code> にて option オブジェクトを用いて <code>imageOrientation</code> 及び <code>premultiplyAlpha</code> プロパティを渡せるようになった</li>\n<li><code>Intl.supportedValueOf()</code> をサポート\n<ul>\n<li>実装でサポートされている値をコードで列挙できるようになった</li>\n</ul>\n</li>\n</ul>\n<h3>HTTP</h3>\n<ul>\n<li>ダイジェストを用いた HTTP 認証で SHA-256 アルゴリズムをサポート</li>\n<li>画像のデフォルト HTTP ACCEPT ヘッダーが <code>image/avif,image/webp,*/*</code> に変更\n<ul>\n<li>AV1 フォーマット対応によるものだと思われます</li>\n</ul>\n</li>\n</ul>\n<h3>APIs</h3>\n<ul>\n<li><code>ElementInternals.shadowRoot</code> 及び <code>HTMLElement.attachInternals</code> をサポート</li>\n<li><code>ResizeObserver.Observe()</code> にて <code>device-pixel-content-box</code> 値をサポート</li>\n<li>グローバル関数 <code>reportError()</code> をサポート\n<ul>\n<li>スクリプトがコンソールやグローバルイベントハンドラに対してエラーを報告できるようになった</li>\n</ul>\n</li>\n</ul>\n<h3>Events</h3>\n<ul>\n<li>グローバルイベントハンドラプロパティ <code>onsecuritypolicyviolation</code> をサポート\n<ul>\n<li>コンテンツセキュリティポリシー違反時に発生する <code>securitypolicyviolation</code> イベントを処理するハンドラを割り当てることが可能になった</li>\n</ul>\n</li>\n<li><code>GlobalEventHandlers</code> 及び <code>ShadowRoot</code> にて <code>onslotchange</code> イベントハンドラプロパティをサポート\n<ul>\n<li>スロットに含まれるノードが変更された際に <code>&#x3C;slot></code> 要素で発生する <code>slotchange</code> イベントを処理するハンドラを割り当てることが可能になった</li>\n</ul>\n</li>\n</ul>\n<h3>Removals</h3>\n<ul>\n<li><code>KeyboardEvent.initKeyEvent()</code> が <code>dom.keyboardevent.init_key_event.enabled</code> によって実行可否が制御されるようになり、デフォルトで無効になった</li>\n</ul>\n<h3>WebDerive conformance (Marionette)</h3>\n<ul>\n<li>大きなドキュメントに対して <code>WebDriver:Print</code> が失敗する原因になっているバグを修正</li>\n</ul>\n<h3>for add-on developers</h3>\n<ul>\n<li><code>windowId</code> が指定されている場合、サイドバーが <code>extension.getViews</code> に包含されるようになった</li>\n</ul>\n<h3>Other</h3>\n<ul>\n<li>AVIF 画像のサポートがデフォルトで有効になった\n<ul>\n<li><code>image.avif.compliance_strictness</code> を用いて仕様準拠の厳密生を調節できる</li>\n<li>アニメーション画像には非対応</li>\n</ul>\n</li>\n</ul>\n<h2>Web Platform</h2>\n<ul>\n<li><code>&#x3C;input type=\"datetime-local\"></code> の UI を実装</li>\n</ul>\n","metaData":{"title":"Firefox 93.0 リリースノート要約","author":"BaHo","editor":"nakajmg","createdAt":"2021-10-21","summary":"Firefox 93.0 のリリースノートの要約です","tags":["Releasenote","Browser"],"updatedAt":"2021-10-21"}},{"slug":"first-post","content":"<p>こんにちは、サイボウズフロントエンドエキスパートチームの<a href=\"https://twitter.com/__sosukesuzuki\">@__sosukesuzuki</a>です。</p>\n<p>サイボウズには<a href=\"https://blog.cybozu.io/\">Cybozu Inside Out</a>という技術ブログがあります。\nそれとは別に、この度フロントエンドエキスパートチームとしてウェブサイトを開設することにしました。</p>\n<p>この記事では、このウェブサイトを開設することになった経緯と目的、使用した技術について説明します。</p>\n<h2>経緯</h2>\n<p>フロントエンドエキスパートチームでは、チームでのコミュニケーションの促進を主な目的としてハッカソンを開催することがあります。\n(チームでのハッカソンについては<a href=\"https://blog.cybozu.io/entry/2021/02/25/133039\">Cybozu Inside Out に投稿されている記事</a>をご覧ください)</p>\n<p>そのようなハッカソンで、フリーテーマの回がありました。\nそこで、<a href=\"https://twitter.com/__sakito__\">Sakito</a>さんと<a href=\"https://twitter.com/b4h0_c4t\">BaHo</a>さんと<a href=\"https://twitter.com/__sosukesuzuki\">sosukesuzuki</a>(私)のチームでは、フロントエンドエキスパートチームのウェブサイトを作ってみることにしました。</p>\n<p>ハッカソンの期間内に完成することはありませんでしたが、チームとしてウェブサイトを持っていた方が良いということで合意が得られたので、ハッカソン終了後も開発を継続することにしました。</p>\n<h2>目的</h2>\n<p>フロントエンドエキスパートチームの活動を多くの人に知ってもらうためです。</p>\n<p>フロントエンドエキスパートチームでは、日頃から様々なフロントエンド技術の啓蒙活動を行っています。\nそれらの多くはクローズドな場所で行われています。しかし基本的にその内容はサイボウズ特有のものではなく、一般的に有用な情報です。</p>\n<p>そこで、フロントエンドエキスパートチームとしてウェブサイトを開設し、公開できる有用な情報は公開することにしました。</p>\n<p>このウェブサイトを通して、フロントエンドエキスパートチームに興味を持ってくれたら嬉しいです。</p>\n<h2>技術</h2>\n<p>次の要件を満たす技術として、<a href=\"https://github.com/vercel/next.js\">Next.js</a> を採用しました。</p>\n<ul>\n<li>環境構築が簡単である\n<ul>\n<li>もともとハッカソンで開発していたので、環境構築に多くの時間を割けないという事情がありました。</li>\n</ul>\n</li>\n<li>SSG の機能を備えている\n<ul>\n<li>すべてのコンテンツは静的なものと決まっていたので、SSG ができると嬉しい</li>\n</ul>\n</li>\n<li>TypeScript との相性が良い</li>\n</ul>\n<p>記事は Markdown として管理して Next.js の <code>getStaticProps</code> のタイミングで <a href=\"https://github.com/remarkjs/remark\">remark</a> を使って HTML に変換しています。</p>\n<p>また、ブログの機能を持つので、feed の生成と記事ごとの OGP 画像の生成をのためのスクリプトをそれぞれ用意しました。feed 生成スクリプトは、記事データの Markdown からメタデータを取得し、XML ファイルを書き出します。\nOGP 画像生成スクリプトは、記事データの Markdown からタイトルを取得し、<a href=\"https://github.com/puppeteer/puppeteer\">Puppeteer</a> で画像を生成します。</p>\n<p>ホスティングには GitHub Pages を使っています。GitHub で管理している HTML をホストする先としてはやはり楽です。</p>\n<p>実装はすべて <a href=\"https://github.com/cybozu/frontend-expert\">https://github.com/cybozu/frontend-expert</a> で公開しています。</p>\n<h2>おわりに</h2>\n<p>これから、不定期ではありますが、当サイトにてフロントエンドに関連する情報を発信していく予定です。ぜひ読んでみてくださいね。</p>\n","metaData":{"title":"サイボウズフロントエンドエキスパートチームのウェブサイトを作りました","author":"sosukesuzuki","createdAt":"2021-10-14","summary":"このウェブサイトを開設することになった経緯と目的、使用した技術について説明します。","tags":["Announcement"],"updatedAt":"2021-10-14"}}],"totalPage":3,"pageNum":3},"__N_SSG":true}
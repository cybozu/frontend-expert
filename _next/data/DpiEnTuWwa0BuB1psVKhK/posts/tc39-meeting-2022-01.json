{"pageProps":{"post":{"slug":"tc39-meeting-2022-01","content":"<p>この記事では2021年01月24日~27日に開催された TC39 meeting 88th で議題に上がったプロポーザルについて紹介します。</p>\n<h2>For Stage 4</h2>\n<p>For Stage 4 の提案はありませんでした。</p>\n<h2>For Stage 3</h2>\n<h3><a href=\"https://github.com/tc39/proposal-array-from-async/\">Array.fromAsync</a></h3>\n<p><strong>Stage 3 にはなりませんでした。</strong></p>\n<p><code>Array.fromAsync</code> は次のようにして非同期イテラブルから配列を生成するスタティックメソッドを追加するプロポーザルです。</p>\n<div><pre><code><span>async</span> <span>function</span> <span>*</span> <span>asyncGen</span> <span>(</span><span>n</span><span>)</span> <span>{</span>\n  <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&#x3C;</span> n<span>;</span> i<span>++</span><span>)</span>\n    <span>yield</span> i <span>*</span> <span>2</span><span>;</span>\n<span>}</span>\n<span>const</span> arr <span>=</span> <span>await</span> <span>Array</span><span>.</span><span>fromAsync</span><span>(</span><span>asyncGen</span><span>(</span><span>4</span><span>)</span><span>)</span><span>;</span>\n</code></pre></div>\n<p><a href=\"https://github.com/tc39/proposal-array-from-async/issues/19\">https://github.com/tc39/proposal-array-from-async/issues/19</a> で指摘された問題のため、Stage 3 にはなりませんでした。</p>\n<h2>For Stage 2</h2>\n<h3><a href=\"https://github.com/tc39/proposal-class-brand-check\">Class brand checks</a></h3>\n<p><strong>Stage 2 にはなりませんでした</strong></p>\n<p>Class brand checks は brand check のための新しい構文を導入するプロポーザルです。</p>\n<p>brand check は TC39 内で使われる用語で、<a href=\"https://github.com/tc39/how-we-work/blob/master/terminology.md#brand-check\">https://github.com/tc39/how-we-work/blob/master/terminology.md#brand-check</a> で説明されています。</p>\n<p>brand check とは、雑に言えば「ある値があるデータ型であることを検証すること」です。たとえば <code>Array.isArray</code> は brand check です(<a href=\"https://zenn.dev/sosukesuzuki/articles/e0516a3d4c424e\"><code>instanceof</code> は厳密ではない</a>ため brand check ではありません)。</p>\n<p>以前 brand check の方法の一つである <a href=\"https://github.com/tc39/proposal-private-fields-in-in\">Ergonomic brand checks for private fields</a> についての記事を書いたので興味のある方はそちらもご覧ください。</p>\n<p><div></div></p>\n<p>Class branc check プロポーザルでは <code>class.hasInstance(x)</code> という新しい Meta Property を追加します。これはクラスの中でのみ使うことができ、引数として渡された値が今いるクラスのインスタンスかどうかをチェックします。</p>\n<div><pre><code><span>class</span> <span>Foo</span> <span>{</span>\n  <span>static</span> <span>isFoo</span><span>(</span><span>o</span><span>)</span> <span>{</span>\n    <span>return</span> <span>class</span><span>.</span><span>hasInstance</span><span>(</span>o<span>)</span><span>;</span>\n  <span>}</span>\n<span>}</span>\n\n<span>const</span> foo <span>=</span> <span>new</span> <span>Foo</span><span>(</span><span>)</span><span>;</span>\n<span>console</span><span>.</span><span>log</span><span>(</span><span>Foo</span><span>.</span><span>isFoo</span><span>(</span>foo<span>)</span><span>)</span><span>;</span> <span>// true</span>\n\n<span>const</span> obj <span>=</span> <span>{</span><span>}</span><span>;</span>\n<span>console</span><span>.</span><span>log</span><span>(</span><span>Foo</span><span>.</span><span>isFoo</span><span>(</span>obj<span>)</span><span>)</span><span>;</span> <span>// false</span>\n</code></pre></div>\n<h2>For Stage 1</h2>\n<h3><a href=\"https://github.com/rbuckton/proposal-enum\">enum</a></h3>\n<p><strong>Stage 1 にはなりませんでした。</strong></p>\n<p>enum は列挙型を実現するためのプロポーザルです。このプロポーザルは 4 年ほど前から存在していましたがまた動き出したようです。</p>\n<p>enum プロポーザルでは次のような構文を導入します。</p>\n<div><pre><code><span>enum</span> <span>SyntaxKind</span> <span>{</span>\n  <span>A</span><span>,</span>\n  <span>B</span><span>,</span>\n  <span>C</span>\n<span>}</span>\n</code></pre></div>\n<p>他のプログラミング言語の enum と構文上は似ています。</p>\n<p>しかし細部の仕様について検討すべき事項が多く、今回のミーティングでは Stage 1 に到達することはありませんでした。<a href=\"https://docs.google.com/presentation/d/14WtGmdWjEYXIXZVWJWpERF98D90_BytceAu7b7DKr5Q/edit#slide=id.g10effb28f4f_0_273\">このスライド</a>に詳しくまとまっているので興味のある方はご覧ください。</p>\n<h3><a href=\"https://github.com/tc39/proposal-reversible-string-split\">Reversible string split</a></h3>\n<p><strong>Stage 1 になりました。</strong></p>\n<p>Reversible string split は可逆(Reversible)の文字列分割のための方法を導入するプロポーザルです。</p>\n<p>JavaScript では <code>String.prototype.split</code> を使って文字列を分割できます。</p>\n<p><div></div></p>\n<div><pre><code><span>const</span> splitted <span>=</span> <span>\"A,B,C,D,E\"</span><span>.</span><span>split</span><span>(</span><span>\",\"</span><span>)</span><span>;</span>\n<span>console</span><span>.</span><span>log</span><span>(</span>splitted<span>)</span><span>;</span> <span>// [ 'A', 'B', 'C', 'D', 'E' ]</span>\n</code></pre></div>\n<p><code>String.prototype.split</code> は第2引数として非負の整数を渡すことで、分割する数を制限できます。</p>\n<div><pre><code><span>const</span> splitted1 <span>=</span> <span>\"A,B,C,D,E\"</span><span>.</span><span>split</span><span>(</span><span>\",\"</span><span>,</span> <span>1</span><span>)</span><span>;</span>\n<span>console</span><span>.</span><span>log</span><span>(</span>splitted1<span>)</span><span>;</span> <span>// [ 'A' ]</span>\n\n<span>const</span> splitted2 <span>=</span> <span>\"A,B,C,D,E\"</span><span>.</span><span>split</span><span>(</span><span>\",\"</span><span>,</span> <span>2</span><span>)</span><span>;</span>\n<span>console</span><span>.</span><span>log</span><span>(</span>splitted2<span>)</span><span>;</span> <span>// [ 'A', 'B' ]</span>\n\n<span>const</span> splitted3 <span>=</span> <span>\"A,B,C,D,E\"</span><span>.</span><span>split</span><span>(</span><span>\",\"</span><span>,</span> <span>3</span><span>)</span><span>;</span>\n<span>console</span><span>.</span><span>log</span><span>(</span>splitted3<span>)</span><span>;</span> <span>// [ 'A', 'B', 'C' ]</span>\n</code></pre></div>\n<p>JavaScript 以外のいくつかの言語(Perl、PHP、Ruby、Go、Rust、Java など)では第2引数を受け取った <code>String.prototype.split</code> に相当する機能は、次のように文字列の分割を行います。</p>\n<div><pre><code><span>const</span> splitted2 <span>=</span> <span>\"A,B,C,D,E\"</span><span>.</span><span>split</span><span>(</span><span>\",\"</span><span>,</span> <span>2</span><span>)</span><span>;</span>\n<span>console</span><span>.</span><span>log</span><span>(</span>splitted2<span>)</span><span>;</span> <span>// [ 'A', 'B,C,D,E' ]</span>\n</code></pre></div>\n<p>N-1 回分割され、残りの部分が戻り値の配列の末尾に含まれています(戻り値の配列の要素数が N)。</p>\n<p>Reversible string split プロポーザルでは、このような振る舞いを持つ新しいメソッド <code>String.prototype.splitN</code> を導入します。</p>\n<div><pre><code><span>const</span> splitted2 <span>=</span> <span>\"A,B,C,D,E\"</span><span>.</span><span>splitN</span><span>(</span><span>\",\"</span><span>,</span> <span>2</span><span>)</span><span>;</span>\n<span>console</span><span>.</span><span>log</span><span>(</span>splitted2<span>)</span><span>;</span> <span>// [ 'A', 'B,C,D,E' ]</span>\n</code></pre></div>\n<p>このような文字列分割メソッドを使うと、次のようにして分割する前の文字列を取得できます。</p>\n<div><pre><code><span>const</span> value <span>=</span> <span>\"A,B,C,D,E\"</span><span>;</span>\n<span>const</span> separator <span>=</span> <span>\",\"</span><span>;</span>\n<span>const</span> n <span>=</span> <span>2</span><span>;</span>\n<span>console</span><span>.</span><span>log</span><span>(</span><span>(</span>value<span>.</span><span>splitN</span><span>(</span>separator<span>,</span> n<span>)</span><span>.</span><span>join</span><span>(</span>separator<span>)</span><span>)</span> <span>===</span> value<span>)</span><span>;</span> <span>// true</span>\n</code></pre></div>\n<p>提案の名前に含まれている Reversible というのはこのような可逆性のことを指しているようです。</p>\n<h2>Updates</h2>\n<h3><a href=\"https://github.com/tc39/proposal-symbols-as-weakmap-keys\">Symbols as WeakMap keys</a></h3>\n<p>Symbols as WeakMap keys は Symbol を WeakMap のキーとして使えるようにするためのプロポーザルです。</p>\n<p>現在では一部情報が古くなっていますが以前このプロポーザルについて解説する記事を書いたので興味がある方はそちらもご覧ください。</p>\n<p><div></div></p>\n<p>以前から Symbols as WeakMap keys プロポーザルのモチベーションや基本的な振る舞いについては概ね合意がとれていました。しかし、Well-knwon Symbols やグローバルシンボルレジストリに登録された Symbol (Eternal Symbol と呼ばれている)についてはどのように扱うべきかという点で TC39 メンバー内でも意見が分かれていました。</p>\n<p>今回のミーティングで Symbols as WeakMap keys チャンピョングループは、Eternal Symbol を WeakMap のキーとして使おうとするとエラーが throw されるという振る舞いを選択したことを発表しました。それにともなって、<code>WeakMap.isValidKey(x)</code>、<code>WeakSet.isValidValue(x)</code>、<code>WeakRef.isValidTarget(x)</code>、<code>FinalizationRegistry.isValidTarget(x)</code> などのいくつかのスタティックメソッドが追加される可能性があります。</p>\n<p>しかし議事録によればまだ TC39 メンバーの中で意見が分かれているため仕様の決定には時間がかかりそうです。</p>\n<h2>参考リンク</h2>\n<ul>\n<li>TC39\n<ul>\n<li><a href=\"https://github.com/tc39/agendas/blob/main/2022/01.md\">agendas/01.md at main · tc39/agendas</a></li>\n<li><a href=\"https://github.com/tc39/notes/blob/main/meetings/2022-01/jan-24.md\">notes/jan-24.md at main · tc39/notes</a></li>\n<li><a href=\"https://github.com/tc39/notes/blob/main/meetings/2022-01/jan-25.md\">notes/jan-25.md at main · tc39/notes</a></li>\n<li><a href=\"https://github.com/tc39/notes/blob/main/meetings/2022-01/jan-26.md\">notes/jan-26.md at main · tc39/notes</a></li>\n<li><a href=\"https://github.com/tc39/proposal-array-from-async/\">Proposal Array.fromAsync</a></li>\n<li><a href=\"https://github.com/tc39/proposal-symbols-as-weakmap-keys\">Proposal Symbols as WeakMap keys</a></li>\n<li><a href=\"https://github.com/tc39/proposal-class-brand-check\">Proposal <code>class.hasInstance()</code></a></li>\n<li><a href=\"https://github.com/rbuckton/proposal-enum\">Proposal enum</a></li>\n<li><a href=\"https://github.com/tc39/proposal-reversible-string-split\">Proposal Reversible string split</a></li>\n</ul>\n</li>\n<li>Babel\n<ul>\n<li><a href=\"https://github.com/babel/proposals/issues/80\">Jan 2022 · Issue #80 · babel/proposals</a></li>\n</ul>\n</li>\n</ul>\n","metaData":{"title":"ECMAScriptの最新動向 2022年01月版","author":"sosukesuzuki","createdAt":"2022-03-09","summary":"2021年01月24日~27日に開催された TC39 meeting 88th の内容を紹介します","tags":["TC39","ECMAScript"],"updatedAt":"2022-03-09"}}},"__N_SSG":true}